//==============================================================================
// Copyright (c) 2010-2018 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  Internal counter definitions for GFX8_FIJI
//==============================================================================

#ifndef _GPA_INTERNAL_COUNTERS_GFX8_FIJI_H_
#define _GPA_INTERNAL_COUNTERS_GFX8_FIJI_H_

// This file is autogenerated by the ConvertHWEnums project

#include "GPAInternalCounter.h"
#include "GPAInternalCountersGfx8.h"

namespace CounterGfx8_Fiji
{
/// Uses the input ASIC type to determine if this data provides an ASIC specific version.
/// \param asicType The ASIC type that is currently in use.
/// \return True if the ASIC is matched by this file.
inline bool MatchAsic(GDT_HW_ASIC_TYPE asicType)
{
    static std::set<GDT_HW_ASIC_TYPE> asicsSupported = { GDT_FIJI };

    if (asicsSupported.find(asicType) == asicsSupported.end())
    {
        return false;
    }

    return true;
}

extern GPA_HardwareCounterDesc MC0countersGfx8_Fiji []; ///< Array of internal counters for MC0 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC1countersGfx8_Fiji []; ///< Array of internal counters for MC1 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC2countersGfx8_Fiji []; ///< Array of internal counters for MC2 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC3countersGfx8_Fiji []; ///< Array of internal counters for MC3 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC4countersGfx8_Fiji []; ///< Array of internal counters for MC4 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC5countersGfx8_Fiji []; ///< Array of internal counters for MC5 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC6countersGfx8_Fiji []; ///< Array of internal counters for MC6 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC7countersGfx8_Fiji []; ///< Array of internal counters for MC7 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC8countersGfx8_Fiji []; ///< Array of internal counters for MC8 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC9countersGfx8_Fiji []; ///< Array of internal counters for MC9 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC10countersGfx8_Fiji []; ///< Array of internal counters for MC10 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC11countersGfx8_Fiji []; ///< Array of internal counters for MC11 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC12countersGfx8_Fiji []; ///< Array of internal counters for MC12 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC13countersGfx8_Fiji []; ///< Array of internal counters for MC13 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC14countersGfx8_Fiji []; ///< Array of internal counters for MC14 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC15countersGfx8_Fiji []; ///< Array of internal counters for MC15 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC16countersGfx8_Fiji []; ///< Array of internal counters for MC16 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC17countersGfx8_Fiji []; ///< Array of internal counters for MC17 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC18countersGfx8_Fiji []; ///< Array of internal counters for MC18 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC19countersGfx8_Fiji []; ///< Array of internal counters for MC19 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC20countersGfx8_Fiji []; ///< Array of internal counters for MC20 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC21countersGfx8_Fiji []; ///< Array of internal counters for MC21 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC22countersGfx8_Fiji []; ///< Array of internal counters for MC22 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC23countersGfx8_Fiji []; ///< Array of internal counters for MC23 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC24countersGfx8_Fiji []; ///< Array of internal counters for MC24 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC25countersGfx8_Fiji []; ///< Array of internal counters for MC25 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC26countersGfx8_Fiji []; ///< Array of internal counters for MC26 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC27countersGfx8_Fiji []; ///< Array of internal counters for MC27 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC28countersGfx8_Fiji []; ///< Array of internal counters for MC28 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC29countersGfx8_Fiji []; ///< Array of internal counters for MC29 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC30countersGfx8_Fiji []; ///< Array of internal counters for MC30 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc MC31countersGfx8_Fiji []; ///< Array of internal counters for MC31 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc VGT0countersGfx8_Fiji []; ///< Array of internal counters for VGT0 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc VGT1countersGfx8_Fiji []; ///< Array of internal counters for VGT1 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc VGT2countersGfx8_Fiji []; ///< Array of internal counters for VGT2 block for Gfx8_Fiji family
extern GPA_HardwareCounterDesc VGT3countersGfx8_Fiji []; ///< Array of internal counters for VGT3 block for Gfx8_Fiji family

/// Replaces count number of block instance counters at the destination with the overriding source counters.
/// \param pDestCounter Destination to update.
/// \param pSrcCounter Source to update from.
/// \param count Number of counters to update.
inline void ReplaceBlockInstanceCounters(GPA_HardwareCounterDesc* pDestCounter, GPA_HardwareCounterDesc* pSrcCounter, uint32_t count)
{
    for (uint32_t i = 0; i < count; i++)
    {
        pDestCounter[i] = pSrcCounter[i];
    }
}

/// If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
/// \param asicType The ASIC type that is currently in use.
/// \return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideBlockInstanceCounters(GDT_HW_ASIC_TYPE asicType)
{
    if (!MatchAsic(asicType))
    {
        return false;
    }

    ReplaceBlockInstanceCounters(MC0countersGfx8, MC0countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC1countersGfx8, MC1countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC2countersGfx8, MC2countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC3countersGfx8, MC3countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC4countersGfx8, MC4countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC5countersGfx8, MC5countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC6countersGfx8, MC6countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC7countersGfx8, MC7countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC8countersGfx8, MC8countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC9countersGfx8, MC9countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC10countersGfx8, MC10countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC11countersGfx8, MC11countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC12countersGfx8, MC12countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC13countersGfx8, MC13countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC14countersGfx8, MC14countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC15countersGfx8, MC15countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC16countersGfx8, MC16countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC17countersGfx8, MC17countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC18countersGfx8, MC18countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC19countersGfx8, MC19countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC20countersGfx8, MC20countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC21countersGfx8, MC21countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC22countersGfx8, MC22countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC23countersGfx8, MC23countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC24countersGfx8, MC24countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC25countersGfx8, MC25countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC26countersGfx8, MC26countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC27countersGfx8, MC27countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC28countersGfx8, MC28countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC29countersGfx8, MC29countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC30countersGfx8, MC30countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(MC31countersGfx8, MC31countersGfx8_Fiji, 33);
    ReplaceBlockInstanceCounters(VGT0countersGfx8, VGT0countersGfx8_Fiji, 146);
    ReplaceBlockInstanceCounters(VGT1countersGfx8, VGT1countersGfx8_Fiji, 146);
    ReplaceBlockInstanceCounters(VGT2countersGfx8, VGT2countersGfx8_Fiji, 146);
    ReplaceBlockInstanceCounters(VGT3countersGfx8, VGT3countersGfx8_Fiji, 146);

    return true;
}
} // CounterGfx8_Fiji

#endif // _GPA_INTERNAL_COUNTERS_GFX8_FIJI_H_
