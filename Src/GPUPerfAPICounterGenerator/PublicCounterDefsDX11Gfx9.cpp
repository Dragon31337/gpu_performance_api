//==============================================================================
// Copyright (c) 2010-2017 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  PublicCounterDefinitions for DX11GFX9
//==============================================================================

#include "PublicCounterDefsDX11Gfx9.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicCountersDX11Gfx9(GPA_PublicCounters& p)
{
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);

        p.DefinePublicCounter("GPUTime", "#Timing#Time this API call took to execute on the GPU in milliseconds. Does not include time that draw calls are processed in parallel.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_API_DYNAMIC, internalCounters, "0,TS_FREQ,/,(1000),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12484);
        internalCounters.push_back(12482);

        p.DefinePublicCounter("GPUBusy", "#Timing#The percentage of time GPU was busy.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50487);
        internalCounters.push_back(50635);
        internalCounters.push_back(50783);
        internalCounters.push_back(50931);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("TessellatorBusy", "#Timing#The percentage of time the tessellation engine is busy.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,max,2,max,3,max,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16556);
        internalCounters.push_back(16752);
        internalCounters.push_back(16948);
        internalCounters.push_back(17144);
        internalCounters.push_back(16609);
        internalCounters.push_back(16805);
        internalCounters.push_back(17001);
        internalCounters.push_back(17197);
        internalCounters.push_back(16565);
        internalCounters.push_back(16761);
        internalCounters.push_back(16957);
        internalCounters.push_back(17153);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("VSBusy", "#Timing#The percentage of time the ShaderUnit has vertex shader work to do.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,8,ifnotzero,(0),1,9,ifnotzero,max,(0),2,10,ifnotzero,max,(0),3,11,ifnotzero,max,12,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);
        internalCounters.push_back(16556);
        internalCounters.push_back(16752);
        internalCounters.push_back(16948);
        internalCounters.push_back(17144);
        internalCounters.push_back(16609);
        internalCounters.push_back(16805);
        internalCounters.push_back(17001);
        internalCounters.push_back(17197);
        internalCounters.push_back(16565);
        internalCounters.push_back(16761);
        internalCounters.push_back(16957);
        internalCounters.push_back(17153);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("VSTime", "#Timing#Time vertex shaders are busy in milliseconds.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),1,9,ifnotzero,(0),2,10,ifnotzero,max,(0),3,11,ifnotzero,max,(0),4,12,ifnotzero,max,13,/,(1),min,0,TS_FREQ,/,(1000),*,*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16587);
        internalCounters.push_back(16783);
        internalCounters.push_back(16979);
        internalCounters.push_back(17175);
        internalCounters.push_back(16593);
        internalCounters.push_back(16789);
        internalCounters.push_back(16985);
        internalCounters.push_back(17181);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("HSBusy", "#Timing#The percentage of time the ShaderUnit has hull shader work to do.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);
        internalCounters.push_back(16587);
        internalCounters.push_back(16783);
        internalCounters.push_back(16979);
        internalCounters.push_back(17175);
        internalCounters.push_back(16593);
        internalCounters.push_back(16789);
        internalCounters.push_back(16985);
        internalCounters.push_back(17181);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("HSTime", "#Timing#Time hull shaders are busy in milliseconds.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16575);
        internalCounters.push_back(16771);
        internalCounters.push_back(16967);
        internalCounters.push_back(17163);
        internalCounters.push_back(16578);
        internalCounters.push_back(16774);
        internalCounters.push_back(16970);
        internalCounters.push_back(17166);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("GSBusy", "#Timing#The percentage of time the ShaderUnit has geometry shader work to do.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);
        internalCounters.push_back(16575);
        internalCounters.push_back(16771);
        internalCounters.push_back(16967);
        internalCounters.push_back(17163);
        internalCounters.push_back(16578);
        internalCounters.push_back(16774);
        internalCounters.push_back(16970);
        internalCounters.push_back(17166);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("GSTime", "#Timing#Time geometry shaders are busy in milliseconds.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16609);
        internalCounters.push_back(16805);
        internalCounters.push_back(17001);
        internalCounters.push_back(17197);
        internalCounters.push_back(16614);
        internalCounters.push_back(16810);
        internalCounters.push_back(17006);
        internalCounters.push_back(17202);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PSBusy", "#Timing#The percentage of time the ShaderUnit has pixel shader work to do.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);
        internalCounters.push_back(16609);
        internalCounters.push_back(16805);
        internalCounters.push_back(17001);
        internalCounters.push_back(17197);
        internalCounters.push_back(16614);
        internalCounters.push_back(16810);
        internalCounters.push_back(17006);
        internalCounters.push_back(17202);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PSTime", "#Timing#Time pixel shaders are busy in milliseconds.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,0,TS_FREQ,/,(1000),*,*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16597);
        internalCounters.push_back(16793);
        internalCounters.push_back(16989);
        internalCounters.push_back(17185);
        internalCounters.push_back(16601);
        internalCounters.push_back(16797);
        internalCounters.push_back(16993);
        internalCounters.push_back(17189);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("CSBusy", "#Timing#The percentage of time the ShaderUnit has compute shader work to do.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(51557);
        internalCounters.push_back(16597);
        internalCounters.push_back(16793);
        internalCounters.push_back(16989);
        internalCounters.push_back(17185);
        internalCounters.push_back(16601);
        internalCounters.push_back(16797);
        internalCounters.push_back(16993);
        internalCounters.push_back(17189);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("CSTime", "#Timing#Time compute shaders are busy in milliseconds.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50382);
        internalCounters.push_back(50530);
        internalCounters.push_back(50678);
        internalCounters.push_back(50826);
        internalCounters.push_back(50363);
        internalCounters.push_back(50511);
        internalCounters.push_back(50659);
        internalCounters.push_back(50807);
        internalCounters.push_back(50458);
        internalCounters.push_back(50606);
        internalCounters.push_back(50754);
        internalCounters.push_back(50902);

        p.DefinePublicCounter("VSVerticesIn", "#VertexShader#The number of vertices processed by the VS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,4,5,6,7,sum4,ifnotzero,8,9,10,11,sum4,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(21853);
        internalCounters.push_back(22227);
        internalCounters.push_back(22601);
        internalCounters.push_back(22975);
        internalCounters.push_back(21831);
        internalCounters.push_back(22205);
        internalCounters.push_back(22579);
        internalCounters.push_back(22953);

        p.DefinePublicCounter("VSVALUInstCount", "#VertexShader#Average number of vector ALU instructions executed in the VS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(21857);
        internalCounters.push_back(22231);
        internalCounters.push_back(22605);
        internalCounters.push_back(22979);
        internalCounters.push_back(21831);
        internalCounters.push_back(22205);
        internalCounters.push_back(22579);
        internalCounters.push_back(22953);

        p.DefinePublicCounter("VSSALUInstCount", "#VertexShader#Average number of scalar ALU instructions executed in the VS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(21898);
        internalCounters.push_back(22272);
        internalCounters.push_back(22646);
        internalCounters.push_back(23020);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("VSVALUBusy", "#VertexShader#The percentage of GPUTime vector ALU instructions are being processed by the VS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(21911);
        internalCounters.push_back(22285);
        internalCounters.push_back(22659);
        internalCounters.push_back(23033);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("VSSALUBusy", "#VertexShader#The percentage of GPUTime scalar ALU instructions are being processed by the VS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50467);
        internalCounters.push_back(50615);
        internalCounters.push_back(50763);
        internalCounters.push_back(50911);

        p.DefinePublicCounter("HSPatches", "#HullShader#The number of patches processed by the HS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(26341);
        internalCounters.push_back(26715);
        internalCounters.push_back(27089);
        internalCounters.push_back(27463);
        internalCounters.push_back(26319);
        internalCounters.push_back(26693);
        internalCounters.push_back(27067);
        internalCounters.push_back(27441);

        p.DefinePublicCounter("HSVALUInstCount", "#HullShader#Average number of vector ALU instructions executed in the HS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(26345);
        internalCounters.push_back(26719);
        internalCounters.push_back(27093);
        internalCounters.push_back(27467);
        internalCounters.push_back(26319);
        internalCounters.push_back(26693);
        internalCounters.push_back(27067);
        internalCounters.push_back(27441);

        p.DefinePublicCounter("HSSALUInstCount", "#HullShader#Average number of scalar ALU instructions executed in the HS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(26386);
        internalCounters.push_back(26760);
        internalCounters.push_back(27134);
        internalCounters.push_back(27508);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("HSVALUBusy", "#HullShader#The percentage of GPUTime vector ALU instructions are being processed by the HS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(26399);
        internalCounters.push_back(26773);
        internalCounters.push_back(27147);
        internalCounters.push_back(27521);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("HSSALUBusy", "#HullShader#The percentage of GPUTime scalar ALU instructions are being processed by the HS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50371);
        internalCounters.push_back(50519);
        internalCounters.push_back(50667);
        internalCounters.push_back(50815);

        p.DefinePublicCounter("GSPrimsIn", "#GeometryShader#The number of primitives passed into the GS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50382);
        internalCounters.push_back(50530);
        internalCounters.push_back(50678);
        internalCounters.push_back(50826);
        internalCounters.push_back(50363);
        internalCounters.push_back(50511);
        internalCounters.push_back(50659);
        internalCounters.push_back(50807);

        p.DefinePublicCounter("GSVerticesOut", "#GeometryShader#The number of vertices output by the GS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(20357);
        internalCounters.push_back(20731);
        internalCounters.push_back(21105);
        internalCounters.push_back(21479);
        internalCounters.push_back(20335);
        internalCounters.push_back(20709);
        internalCounters.push_back(21083);
        internalCounters.push_back(21457);

        p.DefinePublicCounter("GSVALUInstCount", "#GeometryShader#Average number of vector ALU instructions executed in the GS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(20361);
        internalCounters.push_back(20735);
        internalCounters.push_back(21109);
        internalCounters.push_back(21483);
        internalCounters.push_back(20335);
        internalCounters.push_back(20709);
        internalCounters.push_back(21083);
        internalCounters.push_back(21457);

        p.DefinePublicCounter("GSSALUInstCount", "#GeometryShader#Average number of scalar ALU instructions executed in the GS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(20402);
        internalCounters.push_back(20776);
        internalCounters.push_back(21150);
        internalCounters.push_back(21524);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("GSVALUBusy", "#GeometryShader#The percentage of GPUTime vector ALU instructions are being processed by the GS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(20415);
        internalCounters.push_back(20789);
        internalCounters.push_back(21163);
        internalCounters.push_back(21537);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("GSSALUBusy", "#GeometryShader#The percentage of GPUTime scalar ALU instructions are being processed by the GS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12696);
        internalCounters.push_back(12988);
        internalCounters.push_back(13280);
        internalCounters.push_back(13572);
        internalCounters.push_back(12700);
        internalCounters.push_back(12992);
        internalCounters.push_back(13284);
        internalCounters.push_back(13576);
        internalCounters.push_back(12652);
        internalCounters.push_back(12944);
        internalCounters.push_back(13236);
        internalCounters.push_back(13528);
        internalCounters.push_back(12664);
        internalCounters.push_back(12956);
        internalCounters.push_back(13248);
        internalCounters.push_back(13540);
        internalCounters.push_back(12653);
        internalCounters.push_back(12945);
        internalCounters.push_back(13237);
        internalCounters.push_back(13529);
        internalCounters.push_back(12665);
        internalCounters.push_back(12957);
        internalCounters.push_back(13249);
        internalCounters.push_back(13541);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PrimitiveAssemblyBusy", "#Timing#The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max,24,/,(100),*,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12599);
        internalCounters.push_back(12891);
        internalCounters.push_back(13183);
        internalCounters.push_back(13475);

        p.DefinePublicCounter("PrimitivesIn", "#PrimitiveAssembly#The number of primitives received by the hardware. This includes primitives generated by tessellation.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12605);
        internalCounters.push_back(12897);
        internalCounters.push_back(13189);
        internalCounters.push_back(13481);
        internalCounters.push_back(12645);
        internalCounters.push_back(12937);
        internalCounters.push_back(13229);
        internalCounters.push_back(13521);
        internalCounters.push_back(12646);
        internalCounters.push_back(12938);
        internalCounters.push_back(13230);
        internalCounters.push_back(13522);
        internalCounters.push_back(12647);
        internalCounters.push_back(12939);
        internalCounters.push_back(13231);
        internalCounters.push_back(13523);
        internalCounters.push_back(12648);
        internalCounters.push_back(12940);
        internalCounters.push_back(13232);
        internalCounters.push_back(13524);

        p.DefinePublicCounter("CulledPrims", "#PrimitiveAssembly#The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,+,2,+,3,+,4,+,5,+,6,+,7,+,8,+,9,+,10,+,11,+,12,+,13,+,14,+,15,+,16,+,17,+,18,+,19,+");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12612);
        internalCounters.push_back(12904);
        internalCounters.push_back(13196);
        internalCounters.push_back(13488);

        p.DefinePublicCounter("ClippedPrims", "#PrimitiveAssembly#The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(12700);
        internalCounters.push_back(12992);
        internalCounters.push_back(13284);
        internalCounters.push_back(13576);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PAStalledOnRasterizer", "#PrimitiveAssembly#Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,max,2,max,3,max,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15735);
        internalCounters.push_back(15943);
        internalCounters.push_back(16151);
        internalCounters.push_back(16359);
        internalCounters.push_back(15740);
        internalCounters.push_back(15948);
        internalCounters.push_back(16156);
        internalCounters.push_back(16364);
        internalCounters.push_back(15745);
        internalCounters.push_back(15953);
        internalCounters.push_back(16161);
        internalCounters.push_back(16369);
        internalCounters.push_back(15750);
        internalCounters.push_back(15958);
        internalCounters.push_back(16166);
        internalCounters.push_back(16374);

        p.DefinePublicCounter("PSPixelsOut", "#PixelShader#Pixels exported from shader to colour buffers. Does not include killed or alpha tested pixels; if there are multiple rendertargets, each rendertarget receives one export, so this will be 2 for 1 pixel written to two RTs.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,8,9,10,11,sum4,12,13,14,15,sum4,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15737);
        internalCounters.push_back(15945);
        internalCounters.push_back(16153);
        internalCounters.push_back(16361);
        internalCounters.push_back(15742);
        internalCounters.push_back(15950);
        internalCounters.push_back(16158);
        internalCounters.push_back(16366);
        internalCounters.push_back(15747);
        internalCounters.push_back(15955);
        internalCounters.push_back(16163);
        internalCounters.push_back(16371);
        internalCounters.push_back(15752);
        internalCounters.push_back(15960);
        internalCounters.push_back(16168);
        internalCounters.push_back(16376);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PSExportStalls", "#PixelShader#Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the colour buffer.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,max,13,max,14,max,15,max,16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(23349);
        internalCounters.push_back(23723);
        internalCounters.push_back(24097);
        internalCounters.push_back(24471);
        internalCounters.push_back(23327);
        internalCounters.push_back(23701);
        internalCounters.push_back(24075);
        internalCounters.push_back(24449);

        p.DefinePublicCounter("PSVALUInstCount", "#PixelShader#Average number of vector ALU instructions executed in the PS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(23353);
        internalCounters.push_back(23727);
        internalCounters.push_back(24101);
        internalCounters.push_back(24475);
        internalCounters.push_back(23327);
        internalCounters.push_back(23701);
        internalCounters.push_back(24075);
        internalCounters.push_back(24449);

        p.DefinePublicCounter("PSSALUInstCount", "#PixelShader#Average number of scalar ALU instructions executed in the PS. Affected by flow control.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(23394);
        internalCounters.push_back(23768);
        internalCounters.push_back(24142);
        internalCounters.push_back(24516);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PSVALUBusy", "#PixelShader#The percentage of GPUTime vector ALU instructions are being processed by the PS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(23407);
        internalCounters.push_back(23781);
        internalCounters.push_back(24155);
        internalCounters.push_back(24529);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("PSSALUBusy", "#PixelShader#The percentage of GPUTime scalar ALU instructions are being processed by the PS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSThreadGroups", "#ComputeShader#Total number of thread groups.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16601);
        internalCounters.push_back(16797);
        internalCounters.push_back(16993);
        internalCounters.push_back(17189);

        p.DefinePublicCounter("CSWavefronts", "#ComputeShader#The total number of wavefronts used for the CS.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);
        internalCounters.push_back(17353);
        internalCounters.push_back(17727);
        internalCounters.push_back(18101);
        internalCounters.push_back(18475);

        p.DefinePublicCounter("CSThreads", "#ComputeShader#The number of CS threads processed by the hardware.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),4,5,6,7,sum4,0,1,2,3,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27837);
        internalCounters.push_back(28211);
        internalCounters.push_back(28585);
        internalCounters.push_back(28959);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSVALUInsts", "#ComputeShader#The average number of vector ALU instructions executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27896);
        internalCounters.push_back(28270);
        internalCounters.push_back(28644);
        internalCounters.push_back(29018);
        internalCounters.push_back(27882);
        internalCounters.push_back(28256);
        internalCounters.push_back(28630);
        internalCounters.push_back(29004);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSVALUUtilization", "#ComputeShader#The percentage of active vector ALU threads in a wave. A lower number can mean either more thread divergence in a wave or that the work-group size is not a multiple of 64. Value range: 0% (bad), 100% (ideal - no thread divergence).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,(64),*,/,(100),*,8,9,10,11,sum4,ifnotzero,(100),min");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27841);
        internalCounters.push_back(28215);
        internalCounters.push_back(28589);
        internalCounters.push_back(28963);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSSALUInsts", "#ComputeShader#The average number of scalar ALU instructions executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27839);
        internalCounters.push_back(28213);
        internalCounters.push_back(28587);
        internalCounters.push_back(28961);
        internalCounters.push_back(29408);
        internalCounters.push_back(29527);
        internalCounters.push_back(29646);
        internalCounters.push_back(29765);
        internalCounters.push_back(29884);
        internalCounters.push_back(30003);
        internalCounters.push_back(30122);
        internalCounters.push_back(30241);
        internalCounters.push_back(30360);
        internalCounters.push_back(30479);
        internalCounters.push_back(30598);
        internalCounters.push_back(30717);
        internalCounters.push_back(30836);
        internalCounters.push_back(30955);
        internalCounters.push_back(31074);
        internalCounters.push_back(31193);
        internalCounters.push_back(31312);
        internalCounters.push_back(31431);
        internalCounters.push_back(31550);
        internalCounters.push_back(31669);
        internalCounters.push_back(31788);
        internalCounters.push_back(31907);
        internalCounters.push_back(32026);
        internalCounters.push_back(32145);
        internalCounters.push_back(32264);
        internalCounters.push_back(32383);
        internalCounters.push_back(32502);
        internalCounters.push_back(32621);
        internalCounters.push_back(32740);
        internalCounters.push_back(32859);
        internalCounters.push_back(32978);
        internalCounters.push_back(33097);
        internalCounters.push_back(33216);
        internalCounters.push_back(33335);
        internalCounters.push_back(33454);
        internalCounters.push_back(33573);
        internalCounters.push_back(33692);
        internalCounters.push_back(33811);
        internalCounters.push_back(33930);
        internalCounters.push_back(34049);
        internalCounters.push_back(34168);
        internalCounters.push_back(34287);
        internalCounters.push_back(34406);
        internalCounters.push_back(34525);
        internalCounters.push_back(34644);
        internalCounters.push_back(34763);
        internalCounters.push_back(34882);
        internalCounters.push_back(35001);
        internalCounters.push_back(35120);
        internalCounters.push_back(35239);
        internalCounters.push_back(35358);
        internalCounters.push_back(35477);
        internalCounters.push_back(35596);
        internalCounters.push_back(35715);
        internalCounters.push_back(35834);
        internalCounters.push_back(35953);
        internalCounters.push_back(36072);
        internalCounters.push_back(36191);
        internalCounters.push_back(36310);
        internalCounters.push_back(36429);
        internalCounters.push_back(36548);
        internalCounters.push_back(36667);
        internalCounters.push_back(36786);
        internalCounters.push_back(36905);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSVFetchInsts", "#ComputeShader#The average number of vector fetch instructions from the video memory executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,sum64,-,68,69,70,71,sum4,/,72,73,74,75,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27842);
        internalCounters.push_back(28216);
        internalCounters.push_back(28590);
        internalCounters.push_back(28964);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSSFetchInsts", "#ComputeShader#The average number of scalar fetch instructions from the video memory executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27838);
        internalCounters.push_back(28212);
        internalCounters.push_back(28586);
        internalCounters.push_back(28960);
        internalCounters.push_back(29409);
        internalCounters.push_back(29528);
        internalCounters.push_back(29647);
        internalCounters.push_back(29766);
        internalCounters.push_back(29885);
        internalCounters.push_back(30004);
        internalCounters.push_back(30123);
        internalCounters.push_back(30242);
        internalCounters.push_back(30361);
        internalCounters.push_back(30480);
        internalCounters.push_back(30599);
        internalCounters.push_back(30718);
        internalCounters.push_back(30837);
        internalCounters.push_back(30956);
        internalCounters.push_back(31075);
        internalCounters.push_back(31194);
        internalCounters.push_back(31313);
        internalCounters.push_back(31432);
        internalCounters.push_back(31551);
        internalCounters.push_back(31670);
        internalCounters.push_back(31789);
        internalCounters.push_back(31908);
        internalCounters.push_back(32027);
        internalCounters.push_back(32146);
        internalCounters.push_back(32265);
        internalCounters.push_back(32384);
        internalCounters.push_back(32503);
        internalCounters.push_back(32622);
        internalCounters.push_back(32741);
        internalCounters.push_back(32860);
        internalCounters.push_back(32979);
        internalCounters.push_back(33098);
        internalCounters.push_back(33217);
        internalCounters.push_back(33336);
        internalCounters.push_back(33455);
        internalCounters.push_back(33574);
        internalCounters.push_back(33693);
        internalCounters.push_back(33812);
        internalCounters.push_back(33931);
        internalCounters.push_back(34050);
        internalCounters.push_back(34169);
        internalCounters.push_back(34288);
        internalCounters.push_back(34407);
        internalCounters.push_back(34526);
        internalCounters.push_back(34645);
        internalCounters.push_back(34764);
        internalCounters.push_back(34883);
        internalCounters.push_back(35002);
        internalCounters.push_back(35121);
        internalCounters.push_back(35240);
        internalCounters.push_back(35359);
        internalCounters.push_back(35478);
        internalCounters.push_back(35597);
        internalCounters.push_back(35716);
        internalCounters.push_back(35835);
        internalCounters.push_back(35954);
        internalCounters.push_back(36073);
        internalCounters.push_back(36192);
        internalCounters.push_back(36311);
        internalCounters.push_back(36430);
        internalCounters.push_back(36549);
        internalCounters.push_back(36668);
        internalCounters.push_back(36787);
        internalCounters.push_back(36906);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSVWriteInsts", "#ComputeShader#The average number of vector write instructions to the video memory executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,sum64,-,68,69,70,71,sum4,/,72,73,74,75,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27843);
        internalCounters.push_back(28217);
        internalCounters.push_back(28591);
        internalCounters.push_back(28965);
        internalCounters.push_back(27844);
        internalCounters.push_back(28218);
        internalCounters.push_back(28592);
        internalCounters.push_back(28966);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSFlatVMemInsts", "#ComputeShader#The average number of FLAT instructions that read from or write to the video memory executed per work item (affected by flow control). Includes FLAT instructions that read from or write to scratch.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,-,8,9,10,11,sum4,/,12,13,14,15,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27882);
        internalCounters.push_back(28256);
        internalCounters.push_back(28630);
        internalCounters.push_back(29004);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSVALUBusy", "#ComputeShader#The percentage of GPUTime vector ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*,5,6,7,8,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27895);
        internalCounters.push_back(28269);
        internalCounters.push_back(28643);
        internalCounters.push_back(29017);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSSALUBusy", "#ComputeShader#The percentage of GPUTime scalar ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*,5,6,7,8,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(29322);
        internalCounters.push_back(29441);
        internalCounters.push_back(29560);
        internalCounters.push_back(29679);
        internalCounters.push_back(29798);
        internalCounters.push_back(29917);
        internalCounters.push_back(30036);
        internalCounters.push_back(30155);
        internalCounters.push_back(30274);
        internalCounters.push_back(30393);
        internalCounters.push_back(30512);
        internalCounters.push_back(30631);
        internalCounters.push_back(30750);
        internalCounters.push_back(30869);
        internalCounters.push_back(30988);
        internalCounters.push_back(31107);
        internalCounters.push_back(31226);
        internalCounters.push_back(31345);
        internalCounters.push_back(31464);
        internalCounters.push_back(31583);
        internalCounters.push_back(31702);
        internalCounters.push_back(31821);
        internalCounters.push_back(31940);
        internalCounters.push_back(32059);
        internalCounters.push_back(32178);
        internalCounters.push_back(32297);
        internalCounters.push_back(32416);
        internalCounters.push_back(32535);
        internalCounters.push_back(32654);
        internalCounters.push_back(32773);
        internalCounters.push_back(32892);
        internalCounters.push_back(33011);
        internalCounters.push_back(33130);
        internalCounters.push_back(33249);
        internalCounters.push_back(33368);
        internalCounters.push_back(33487);
        internalCounters.push_back(33606);
        internalCounters.push_back(33725);
        internalCounters.push_back(33844);
        internalCounters.push_back(33963);
        internalCounters.push_back(34082);
        internalCounters.push_back(34201);
        internalCounters.push_back(34320);
        internalCounters.push_back(34439);
        internalCounters.push_back(34558);
        internalCounters.push_back(34677);
        internalCounters.push_back(34796);
        internalCounters.push_back(34915);
        internalCounters.push_back(35034);
        internalCounters.push_back(35153);
        internalCounters.push_back(35272);
        internalCounters.push_back(35391);
        internalCounters.push_back(35510);
        internalCounters.push_back(35629);
        internalCounters.push_back(35748);
        internalCounters.push_back(35867);
        internalCounters.push_back(35986);
        internalCounters.push_back(36105);
        internalCounters.push_back(36224);
        internalCounters.push_back(36343);
        internalCounters.push_back(36462);
        internalCounters.push_back(36581);
        internalCounters.push_back(36700);
        internalCounters.push_back(36819);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSMemUnitBusy", "#ComputeShader#The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*,65,66,67,68,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(40577);
        internalCounters.push_back(40662);
        internalCounters.push_back(40747);
        internalCounters.push_back(40832);
        internalCounters.push_back(40917);
        internalCounters.push_back(41002);
        internalCounters.push_back(41087);
        internalCounters.push_back(41172);
        internalCounters.push_back(41257);
        internalCounters.push_back(41342);
        internalCounters.push_back(41427);
        internalCounters.push_back(41512);
        internalCounters.push_back(41597);
        internalCounters.push_back(41682);
        internalCounters.push_back(41767);
        internalCounters.push_back(41852);
        internalCounters.push_back(41937);
        internalCounters.push_back(42022);
        internalCounters.push_back(42107);
        internalCounters.push_back(42192);
        internalCounters.push_back(42277);
        internalCounters.push_back(42362);
        internalCounters.push_back(42447);
        internalCounters.push_back(42532);
        internalCounters.push_back(42617);
        internalCounters.push_back(42702);
        internalCounters.push_back(42787);
        internalCounters.push_back(42872);
        internalCounters.push_back(42957);
        internalCounters.push_back(43042);
        internalCounters.push_back(43127);
        internalCounters.push_back(43212);
        internalCounters.push_back(43297);
        internalCounters.push_back(43382);
        internalCounters.push_back(43467);
        internalCounters.push_back(43552);
        internalCounters.push_back(43637);
        internalCounters.push_back(43722);
        internalCounters.push_back(43807);
        internalCounters.push_back(43892);
        internalCounters.push_back(43977);
        internalCounters.push_back(44062);
        internalCounters.push_back(44147);
        internalCounters.push_back(44232);
        internalCounters.push_back(44317);
        internalCounters.push_back(44402);
        internalCounters.push_back(44487);
        internalCounters.push_back(44572);
        internalCounters.push_back(44657);
        internalCounters.push_back(44742);
        internalCounters.push_back(44827);
        internalCounters.push_back(44912);
        internalCounters.push_back(44997);
        internalCounters.push_back(45082);
        internalCounters.push_back(45167);
        internalCounters.push_back(45252);
        internalCounters.push_back(45337);
        internalCounters.push_back(45422);
        internalCounters.push_back(45507);
        internalCounters.push_back(45592);
        internalCounters.push_back(45677);
        internalCounters.push_back(45762);
        internalCounters.push_back(45847);
        internalCounters.push_back(45932);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSMemUnitStalled", "#ComputeShader#The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*,65,66,67,68,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(46052);
        internalCounters.push_back(46308);
        internalCounters.push_back(46564);
        internalCounters.push_back(46820);
        internalCounters.push_back(47076);
        internalCounters.push_back(47332);
        internalCounters.push_back(47588);
        internalCounters.push_back(47844);
        internalCounters.push_back(48100);
        internalCounters.push_back(48356);
        internalCounters.push_back(48612);
        internalCounters.push_back(48868);
        internalCounters.push_back(49124);
        internalCounters.push_back(49380);
        internalCounters.push_back(49636);
        internalCounters.push_back(49892);
        internalCounters.push_back(46053);
        internalCounters.push_back(46309);
        internalCounters.push_back(46565);
        internalCounters.push_back(46821);
        internalCounters.push_back(47077);
        internalCounters.push_back(47333);
        internalCounters.push_back(47589);
        internalCounters.push_back(47845);
        internalCounters.push_back(48101);
        internalCounters.push_back(48357);
        internalCounters.push_back(48613);
        internalCounters.push_back(48869);
        internalCounters.push_back(49125);
        internalCounters.push_back(49381);
        internalCounters.push_back(49637);
        internalCounters.push_back(49893);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSFetchSize", "#ComputeShader#The total kilobytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_KILOBYTES, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(64),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+,(1024),/,16,17,18,19,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(46040);
        internalCounters.push_back(46296);
        internalCounters.push_back(46552);
        internalCounters.push_back(46808);
        internalCounters.push_back(47064);
        internalCounters.push_back(47320);
        internalCounters.push_back(47576);
        internalCounters.push_back(47832);
        internalCounters.push_back(48088);
        internalCounters.push_back(48344);
        internalCounters.push_back(48600);
        internalCounters.push_back(48856);
        internalCounters.push_back(49112);
        internalCounters.push_back(49368);
        internalCounters.push_back(49624);
        internalCounters.push_back(49880);
        internalCounters.push_back(46041);
        internalCounters.push_back(46297);
        internalCounters.push_back(46553);
        internalCounters.push_back(46809);
        internalCounters.push_back(47065);
        internalCounters.push_back(47321);
        internalCounters.push_back(47577);
        internalCounters.push_back(47833);
        internalCounters.push_back(48089);
        internalCounters.push_back(48345);
        internalCounters.push_back(48601);
        internalCounters.push_back(48857);
        internalCounters.push_back(49113);
        internalCounters.push_back(49369);
        internalCounters.push_back(49625);
        internalCounters.push_back(49881);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSWriteSize", "#ComputeShader#The total kilobytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_KILOBYTES, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(64),*,+,(1024),/,16,17,18,19,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(40631);
        internalCounters.push_back(40716);
        internalCounters.push_back(40801);
        internalCounters.push_back(40886);
        internalCounters.push_back(40971);
        internalCounters.push_back(41056);
        internalCounters.push_back(41141);
        internalCounters.push_back(41226);
        internalCounters.push_back(41311);
        internalCounters.push_back(41396);
        internalCounters.push_back(41481);
        internalCounters.push_back(41566);
        internalCounters.push_back(41651);
        internalCounters.push_back(41736);
        internalCounters.push_back(41821);
        internalCounters.push_back(41906);
        internalCounters.push_back(41991);
        internalCounters.push_back(42076);
        internalCounters.push_back(42161);
        internalCounters.push_back(42246);
        internalCounters.push_back(42331);
        internalCounters.push_back(42416);
        internalCounters.push_back(42501);
        internalCounters.push_back(42586);
        internalCounters.push_back(42671);
        internalCounters.push_back(42756);
        internalCounters.push_back(42841);
        internalCounters.push_back(42926);
        internalCounters.push_back(43011);
        internalCounters.push_back(43096);
        internalCounters.push_back(43181);
        internalCounters.push_back(43266);
        internalCounters.push_back(43351);
        internalCounters.push_back(43436);
        internalCounters.push_back(43521);
        internalCounters.push_back(43606);
        internalCounters.push_back(43691);
        internalCounters.push_back(43776);
        internalCounters.push_back(43861);
        internalCounters.push_back(43946);
        internalCounters.push_back(44031);
        internalCounters.push_back(44116);
        internalCounters.push_back(44201);
        internalCounters.push_back(44286);
        internalCounters.push_back(44371);
        internalCounters.push_back(44456);
        internalCounters.push_back(44541);
        internalCounters.push_back(44626);
        internalCounters.push_back(44711);
        internalCounters.push_back(44796);
        internalCounters.push_back(44881);
        internalCounters.push_back(44966);
        internalCounters.push_back(45051);
        internalCounters.push_back(45136);
        internalCounters.push_back(45221);
        internalCounters.push_back(45306);
        internalCounters.push_back(45391);
        internalCounters.push_back(45476);
        internalCounters.push_back(45561);
        internalCounters.push_back(45646);
        internalCounters.push_back(45731);
        internalCounters.push_back(45816);
        internalCounters.push_back(45901);
        internalCounters.push_back(45986);
        internalCounters.push_back(40640);
        internalCounters.push_back(40725);
        internalCounters.push_back(40810);
        internalCounters.push_back(40895);
        internalCounters.push_back(40980);
        internalCounters.push_back(41065);
        internalCounters.push_back(41150);
        internalCounters.push_back(41235);
        internalCounters.push_back(41320);
        internalCounters.push_back(41405);
        internalCounters.push_back(41490);
        internalCounters.push_back(41575);
        internalCounters.push_back(41660);
        internalCounters.push_back(41745);
        internalCounters.push_back(41830);
        internalCounters.push_back(41915);
        internalCounters.push_back(42000);
        internalCounters.push_back(42085);
        internalCounters.push_back(42170);
        internalCounters.push_back(42255);
        internalCounters.push_back(42340);
        internalCounters.push_back(42425);
        internalCounters.push_back(42510);
        internalCounters.push_back(42595);
        internalCounters.push_back(42680);
        internalCounters.push_back(42765);
        internalCounters.push_back(42850);
        internalCounters.push_back(42935);
        internalCounters.push_back(43020);
        internalCounters.push_back(43105);
        internalCounters.push_back(43190);
        internalCounters.push_back(43275);
        internalCounters.push_back(43360);
        internalCounters.push_back(43445);
        internalCounters.push_back(43530);
        internalCounters.push_back(43615);
        internalCounters.push_back(43700);
        internalCounters.push_back(43785);
        internalCounters.push_back(43870);
        internalCounters.push_back(43955);
        internalCounters.push_back(44040);
        internalCounters.push_back(44125);
        internalCounters.push_back(44210);
        internalCounters.push_back(44295);
        internalCounters.push_back(44380);
        internalCounters.push_back(44465);
        internalCounters.push_back(44550);
        internalCounters.push_back(44635);
        internalCounters.push_back(44720);
        internalCounters.push_back(44805);
        internalCounters.push_back(44890);
        internalCounters.push_back(44975);
        internalCounters.push_back(45060);
        internalCounters.push_back(45145);
        internalCounters.push_back(45230);
        internalCounters.push_back(45315);
        internalCounters.push_back(45400);
        internalCounters.push_back(45485);
        internalCounters.push_back(45570);
        internalCounters.push_back(45655);
        internalCounters.push_back(45740);
        internalCounters.push_back(45825);
        internalCounters.push_back(45910);
        internalCounters.push_back(45995);
        internalCounters.push_back(40641);
        internalCounters.push_back(40726);
        internalCounters.push_back(40811);
        internalCounters.push_back(40896);
        internalCounters.push_back(40981);
        internalCounters.push_back(41066);
        internalCounters.push_back(41151);
        internalCounters.push_back(41236);
        internalCounters.push_back(41321);
        internalCounters.push_back(41406);
        internalCounters.push_back(41491);
        internalCounters.push_back(41576);
        internalCounters.push_back(41661);
        internalCounters.push_back(41746);
        internalCounters.push_back(41831);
        internalCounters.push_back(41916);
        internalCounters.push_back(42001);
        internalCounters.push_back(42086);
        internalCounters.push_back(42171);
        internalCounters.push_back(42256);
        internalCounters.push_back(42341);
        internalCounters.push_back(42426);
        internalCounters.push_back(42511);
        internalCounters.push_back(42596);
        internalCounters.push_back(42681);
        internalCounters.push_back(42766);
        internalCounters.push_back(42851);
        internalCounters.push_back(42936);
        internalCounters.push_back(43021);
        internalCounters.push_back(43106);
        internalCounters.push_back(43191);
        internalCounters.push_back(43276);
        internalCounters.push_back(43361);
        internalCounters.push_back(43446);
        internalCounters.push_back(43531);
        internalCounters.push_back(43616);
        internalCounters.push_back(43701);
        internalCounters.push_back(43786);
        internalCounters.push_back(43871);
        internalCounters.push_back(43956);
        internalCounters.push_back(44041);
        internalCounters.push_back(44126);
        internalCounters.push_back(44211);
        internalCounters.push_back(44296);
        internalCounters.push_back(44381);
        internalCounters.push_back(44466);
        internalCounters.push_back(44551);
        internalCounters.push_back(44636);
        internalCounters.push_back(44721);
        internalCounters.push_back(44806);
        internalCounters.push_back(44891);
        internalCounters.push_back(44976);
        internalCounters.push_back(45061);
        internalCounters.push_back(45146);
        internalCounters.push_back(45231);
        internalCounters.push_back(45316);
        internalCounters.push_back(45401);
        internalCounters.push_back(45486);
        internalCounters.push_back(45571);
        internalCounters.push_back(45656);
        internalCounters.push_back(45741);
        internalCounters.push_back(45826);
        internalCounters.push_back(45911);
        internalCounters.push_back(45996);
        internalCounters.push_back(40642);
        internalCounters.push_back(40727);
        internalCounters.push_back(40812);
        internalCounters.push_back(40897);
        internalCounters.push_back(40982);
        internalCounters.push_back(41067);
        internalCounters.push_back(41152);
        internalCounters.push_back(41237);
        internalCounters.push_back(41322);
        internalCounters.push_back(41407);
        internalCounters.push_back(41492);
        internalCounters.push_back(41577);
        internalCounters.push_back(41662);
        internalCounters.push_back(41747);
        internalCounters.push_back(41832);
        internalCounters.push_back(41917);
        internalCounters.push_back(42002);
        internalCounters.push_back(42087);
        internalCounters.push_back(42172);
        internalCounters.push_back(42257);
        internalCounters.push_back(42342);
        internalCounters.push_back(42427);
        internalCounters.push_back(42512);
        internalCounters.push_back(42597);
        internalCounters.push_back(42682);
        internalCounters.push_back(42767);
        internalCounters.push_back(42852);
        internalCounters.push_back(42937);
        internalCounters.push_back(43022);
        internalCounters.push_back(43107);
        internalCounters.push_back(43192);
        internalCounters.push_back(43277);
        internalCounters.push_back(43362);
        internalCounters.push_back(43447);
        internalCounters.push_back(43532);
        internalCounters.push_back(43617);
        internalCounters.push_back(43702);
        internalCounters.push_back(43787);
        internalCounters.push_back(43872);
        internalCounters.push_back(43957);
        internalCounters.push_back(44042);
        internalCounters.push_back(44127);
        internalCounters.push_back(44212);
        internalCounters.push_back(44297);
        internalCounters.push_back(44382);
        internalCounters.push_back(44467);
        internalCounters.push_back(44552);
        internalCounters.push_back(44637);
        internalCounters.push_back(44722);
        internalCounters.push_back(44807);
        internalCounters.push_back(44892);
        internalCounters.push_back(44977);
        internalCounters.push_back(45062);
        internalCounters.push_back(45147);
        internalCounters.push_back(45232);
        internalCounters.push_back(45317);
        internalCounters.push_back(45402);
        internalCounters.push_back(45487);
        internalCounters.push_back(45572);
        internalCounters.push_back(45657);
        internalCounters.push_back(45742);
        internalCounters.push_back(45827);
        internalCounters.push_back(45912);
        internalCounters.push_back(45997);
        internalCounters.push_back(40643);
        internalCounters.push_back(40728);
        internalCounters.push_back(40813);
        internalCounters.push_back(40898);
        internalCounters.push_back(40983);
        internalCounters.push_back(41068);
        internalCounters.push_back(41153);
        internalCounters.push_back(41238);
        internalCounters.push_back(41323);
        internalCounters.push_back(41408);
        internalCounters.push_back(41493);
        internalCounters.push_back(41578);
        internalCounters.push_back(41663);
        internalCounters.push_back(41748);
        internalCounters.push_back(41833);
        internalCounters.push_back(41918);
        internalCounters.push_back(42003);
        internalCounters.push_back(42088);
        internalCounters.push_back(42173);
        internalCounters.push_back(42258);
        internalCounters.push_back(42343);
        internalCounters.push_back(42428);
        internalCounters.push_back(42513);
        internalCounters.push_back(42598);
        internalCounters.push_back(42683);
        internalCounters.push_back(42768);
        internalCounters.push_back(42853);
        internalCounters.push_back(42938);
        internalCounters.push_back(43023);
        internalCounters.push_back(43108);
        internalCounters.push_back(43193);
        internalCounters.push_back(43278);
        internalCounters.push_back(43363);
        internalCounters.push_back(43448);
        internalCounters.push_back(43533);
        internalCounters.push_back(43618);
        internalCounters.push_back(43703);
        internalCounters.push_back(43788);
        internalCounters.push_back(43873);
        internalCounters.push_back(43958);
        internalCounters.push_back(44043);
        internalCounters.push_back(44128);
        internalCounters.push_back(44213);
        internalCounters.push_back(44298);
        internalCounters.push_back(44383);
        internalCounters.push_back(44468);
        internalCounters.push_back(44553);
        internalCounters.push_back(44638);
        internalCounters.push_back(44723);
        internalCounters.push_back(44808);
        internalCounters.push_back(44893);
        internalCounters.push_back(44978);
        internalCounters.push_back(45063);
        internalCounters.push_back(45148);
        internalCounters.push_back(45233);
        internalCounters.push_back(45318);
        internalCounters.push_back(45403);
        internalCounters.push_back(45488);
        internalCounters.push_back(45573);
        internalCounters.push_back(45658);
        internalCounters.push_back(45743);
        internalCounters.push_back(45828);
        internalCounters.push_back(45913);
        internalCounters.push_back(45998);

        p.DefinePublicCounter("CSL1CacheHit", "#ComputeShader#The percentage of fetch, write, atomic, and other instructions that hit the data in L1 cache. Value range: 0% (no hit) to 100% (optimal).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),(1),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum256,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(46031);
        internalCounters.push_back(46287);
        internalCounters.push_back(46543);
        internalCounters.push_back(46799);
        internalCounters.push_back(47055);
        internalCounters.push_back(47311);
        internalCounters.push_back(47567);
        internalCounters.push_back(47823);
        internalCounters.push_back(48079);
        internalCounters.push_back(48335);
        internalCounters.push_back(48591);
        internalCounters.push_back(48847);
        internalCounters.push_back(49103);
        internalCounters.push_back(49359);
        internalCounters.push_back(49615);
        internalCounters.push_back(49871);
        internalCounters.push_back(46033);
        internalCounters.push_back(46289);
        internalCounters.push_back(46545);
        internalCounters.push_back(46801);
        internalCounters.push_back(47057);
        internalCounters.push_back(47313);
        internalCounters.push_back(47569);
        internalCounters.push_back(47825);
        internalCounters.push_back(48081);
        internalCounters.push_back(48337);
        internalCounters.push_back(48593);
        internalCounters.push_back(48849);
        internalCounters.push_back(49105);
        internalCounters.push_back(49361);
        internalCounters.push_back(49617);
        internalCounters.push_back(49873);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSL2CacheHit", "#ComputeShader#The percentage of fetch, write, atomic, and other instructions that hit the data in L2 cache. Value range: 0% (no hit) to 100% (optimal).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,+,/,(100),*,32,33,34,35,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(46044);
        internalCounters.push_back(46300);
        internalCounters.push_back(46556);
        internalCounters.push_back(46812);
        internalCounters.push_back(47068);
        internalCounters.push_back(47324);
        internalCounters.push_back(47580);
        internalCounters.push_back(47836);
        internalCounters.push_back(48092);
        internalCounters.push_back(48348);
        internalCounters.push_back(48604);
        internalCounters.push_back(48860);
        internalCounters.push_back(49116);
        internalCounters.push_back(49372);
        internalCounters.push_back(49628);
        internalCounters.push_back(49884);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSWriteUnitStalled", "#ComputeShader#The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*,17,18,19,20,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27846);
        internalCounters.push_back(28220);
        internalCounters.push_back(28594);
        internalCounters.push_back(28968);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSGDSInsts", "#ComputeShader#The average number of GDS read or GDS write instructions executed per work item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27845);
        internalCounters.push_back(28219);
        internalCounters.push_back(28593);
        internalCounters.push_back(28967);
        internalCounters.push_back(27844);
        internalCounters.push_back(28218);
        internalCounters.push_back(28592);
        internalCounters.push_back(28966);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSLDSInsts", "#ComputeShader#The average number of LDS read/write instructions executed per work-item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,-,8,9,10,11,sum4,/,12,13,14,15,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27844);
        internalCounters.push_back(28218);
        internalCounters.push_back(28592);
        internalCounters.push_back(28966);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSFlatLDSInsts", "#ComputeShader#The average number of FLAT instructions that read from or write to LDS executed per work item (affected by flow control).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27874);
        internalCounters.push_back(28248);
        internalCounters.push_back(28622);
        internalCounters.push_back(28996);
        internalCounters.push_back(27815);
        internalCounters.push_back(28189);
        internalCounters.push_back(28563);
        internalCounters.push_back(28937);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSALUStalledByLDS", "#ComputeShader#The percentage of GPUTime ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,/,NUM_SHADER_ENGINES,/,(100),*,5,6,7,8,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(27904);
        internalCounters.push_back(28278);
        internalCounters.push_back(28652);
        internalCounters.push_back(29026);
        internalCounters.push_back(12484);
        internalCounters.push_back(16598);
        internalCounters.push_back(16794);
        internalCounters.push_back(16990);
        internalCounters.push_back(17186);

        p.DefinePublicCounter("CSLDSBankConflict", "#ComputeShader#The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "(0),0,1,2,3,sum4,4,/,NUM_SIMDS,/,(100),*,5,6,7,8,sum4,ifnotzero");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(29322);
        internalCounters.push_back(29441);
        internalCounters.push_back(29560);
        internalCounters.push_back(29679);
        internalCounters.push_back(29798);
        internalCounters.push_back(29917);
        internalCounters.push_back(30036);
        internalCounters.push_back(30155);
        internalCounters.push_back(30274);
        internalCounters.push_back(30393);
        internalCounters.push_back(30512);
        internalCounters.push_back(30631);
        internalCounters.push_back(30750);
        internalCounters.push_back(30869);
        internalCounters.push_back(30988);
        internalCounters.push_back(31107);
        internalCounters.push_back(31226);
        internalCounters.push_back(31345);
        internalCounters.push_back(31464);
        internalCounters.push_back(31583);
        internalCounters.push_back(31702);
        internalCounters.push_back(31821);
        internalCounters.push_back(31940);
        internalCounters.push_back(32059);
        internalCounters.push_back(32178);
        internalCounters.push_back(32297);
        internalCounters.push_back(32416);
        internalCounters.push_back(32535);
        internalCounters.push_back(32654);
        internalCounters.push_back(32773);
        internalCounters.push_back(32892);
        internalCounters.push_back(33011);
        internalCounters.push_back(33130);
        internalCounters.push_back(33249);
        internalCounters.push_back(33368);
        internalCounters.push_back(33487);
        internalCounters.push_back(33606);
        internalCounters.push_back(33725);
        internalCounters.push_back(33844);
        internalCounters.push_back(33963);
        internalCounters.push_back(34082);
        internalCounters.push_back(34201);
        internalCounters.push_back(34320);
        internalCounters.push_back(34439);
        internalCounters.push_back(34558);
        internalCounters.push_back(34677);
        internalCounters.push_back(34796);
        internalCounters.push_back(34915);
        internalCounters.push_back(35034);
        internalCounters.push_back(35153);
        internalCounters.push_back(35272);
        internalCounters.push_back(35391);
        internalCounters.push_back(35510);
        internalCounters.push_back(35629);
        internalCounters.push_back(35748);
        internalCounters.push_back(35867);
        internalCounters.push_back(35986);
        internalCounters.push_back(36105);
        internalCounters.push_back(36224);
        internalCounters.push_back(36343);
        internalCounters.push_back(36462);
        internalCounters.push_back(36581);
        internalCounters.push_back(36700);
        internalCounters.push_back(36819);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("TexUnitBusy", "#Timing#The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(29376);
        internalCounters.push_back(29495);
        internalCounters.push_back(29614);
        internalCounters.push_back(29733);
        internalCounters.push_back(29852);
        internalCounters.push_back(29971);
        internalCounters.push_back(30090);
        internalCounters.push_back(30209);
        internalCounters.push_back(30328);
        internalCounters.push_back(30447);
        internalCounters.push_back(30566);
        internalCounters.push_back(30685);
        internalCounters.push_back(30804);
        internalCounters.push_back(30923);
        internalCounters.push_back(31042);
        internalCounters.push_back(31161);
        internalCounters.push_back(31280);
        internalCounters.push_back(31399);
        internalCounters.push_back(31518);
        internalCounters.push_back(31637);
        internalCounters.push_back(31756);
        internalCounters.push_back(31875);
        internalCounters.push_back(31994);
        internalCounters.push_back(32113);
        internalCounters.push_back(32232);
        internalCounters.push_back(32351);
        internalCounters.push_back(32470);
        internalCounters.push_back(32589);
        internalCounters.push_back(32708);
        internalCounters.push_back(32827);
        internalCounters.push_back(32946);
        internalCounters.push_back(33065);
        internalCounters.push_back(33184);
        internalCounters.push_back(33303);
        internalCounters.push_back(33422);
        internalCounters.push_back(33541);
        internalCounters.push_back(33660);
        internalCounters.push_back(33779);
        internalCounters.push_back(33898);
        internalCounters.push_back(34017);
        internalCounters.push_back(34136);
        internalCounters.push_back(34255);
        internalCounters.push_back(34374);
        internalCounters.push_back(34493);
        internalCounters.push_back(34612);
        internalCounters.push_back(34731);
        internalCounters.push_back(34850);
        internalCounters.push_back(34969);
        internalCounters.push_back(35088);
        internalCounters.push_back(35207);
        internalCounters.push_back(35326);
        internalCounters.push_back(35445);
        internalCounters.push_back(35564);
        internalCounters.push_back(35683);
        internalCounters.push_back(35802);
        internalCounters.push_back(35921);
        internalCounters.push_back(36040);
        internalCounters.push_back(36159);
        internalCounters.push_back(36278);
        internalCounters.push_back(36397);
        internalCounters.push_back(36516);
        internalCounters.push_back(36635);
        internalCounters.push_back(36754);
        internalCounters.push_back(36873);
        internalCounters.push_back(29375);
        internalCounters.push_back(29494);
        internalCounters.push_back(29613);
        internalCounters.push_back(29732);
        internalCounters.push_back(29851);
        internalCounters.push_back(29970);
        internalCounters.push_back(30089);
        internalCounters.push_back(30208);
        internalCounters.push_back(30327);
        internalCounters.push_back(30446);
        internalCounters.push_back(30565);
        internalCounters.push_back(30684);
        internalCounters.push_back(30803);
        internalCounters.push_back(30922);
        internalCounters.push_back(31041);
        internalCounters.push_back(31160);
        internalCounters.push_back(31279);
        internalCounters.push_back(31398);
        internalCounters.push_back(31517);
        internalCounters.push_back(31636);
        internalCounters.push_back(31755);
        internalCounters.push_back(31874);
        internalCounters.push_back(31993);
        internalCounters.push_back(32112);
        internalCounters.push_back(32231);
        internalCounters.push_back(32350);
        internalCounters.push_back(32469);
        internalCounters.push_back(32588);
        internalCounters.push_back(32707);
        internalCounters.push_back(32826);
        internalCounters.push_back(32945);
        internalCounters.push_back(33064);
        internalCounters.push_back(33183);
        internalCounters.push_back(33302);
        internalCounters.push_back(33421);
        internalCounters.push_back(33540);
        internalCounters.push_back(33659);
        internalCounters.push_back(33778);
        internalCounters.push_back(33897);
        internalCounters.push_back(34016);
        internalCounters.push_back(34135);
        internalCounters.push_back(34254);
        internalCounters.push_back(34373);
        internalCounters.push_back(34492);
        internalCounters.push_back(34611);
        internalCounters.push_back(34730);
        internalCounters.push_back(34849);
        internalCounters.push_back(34968);
        internalCounters.push_back(35087);
        internalCounters.push_back(35206);
        internalCounters.push_back(35325);
        internalCounters.push_back(35444);
        internalCounters.push_back(35563);
        internalCounters.push_back(35682);
        internalCounters.push_back(35801);
        internalCounters.push_back(35920);
        internalCounters.push_back(36039);
        internalCounters.push_back(36158);
        internalCounters.push_back(36277);
        internalCounters.push_back(36396);
        internalCounters.push_back(36515);
        internalCounters.push_back(36634);
        internalCounters.push_back(36753);
        internalCounters.push_back(36872);

        p.DefinePublicCounter("TexTriFilteringPct", "#TextureUnit#Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(29378);
        internalCounters.push_back(29497);
        internalCounters.push_back(29616);
        internalCounters.push_back(29735);
        internalCounters.push_back(29854);
        internalCounters.push_back(29973);
        internalCounters.push_back(30092);
        internalCounters.push_back(30211);
        internalCounters.push_back(30330);
        internalCounters.push_back(30449);
        internalCounters.push_back(30568);
        internalCounters.push_back(30687);
        internalCounters.push_back(30806);
        internalCounters.push_back(30925);
        internalCounters.push_back(31044);
        internalCounters.push_back(31163);
        internalCounters.push_back(31282);
        internalCounters.push_back(31401);
        internalCounters.push_back(31520);
        internalCounters.push_back(31639);
        internalCounters.push_back(31758);
        internalCounters.push_back(31877);
        internalCounters.push_back(31996);
        internalCounters.push_back(32115);
        internalCounters.push_back(32234);
        internalCounters.push_back(32353);
        internalCounters.push_back(32472);
        internalCounters.push_back(32591);
        internalCounters.push_back(32710);
        internalCounters.push_back(32829);
        internalCounters.push_back(32948);
        internalCounters.push_back(33067);
        internalCounters.push_back(33186);
        internalCounters.push_back(33305);
        internalCounters.push_back(33424);
        internalCounters.push_back(33543);
        internalCounters.push_back(33662);
        internalCounters.push_back(33781);
        internalCounters.push_back(33900);
        internalCounters.push_back(34019);
        internalCounters.push_back(34138);
        internalCounters.push_back(34257);
        internalCounters.push_back(34376);
        internalCounters.push_back(34495);
        internalCounters.push_back(34614);
        internalCounters.push_back(34733);
        internalCounters.push_back(34852);
        internalCounters.push_back(34971);
        internalCounters.push_back(35090);
        internalCounters.push_back(35209);
        internalCounters.push_back(35328);
        internalCounters.push_back(35447);
        internalCounters.push_back(35566);
        internalCounters.push_back(35685);
        internalCounters.push_back(35804);
        internalCounters.push_back(35923);
        internalCounters.push_back(36042);
        internalCounters.push_back(36161);
        internalCounters.push_back(36280);
        internalCounters.push_back(36399);
        internalCounters.push_back(36518);
        internalCounters.push_back(36637);
        internalCounters.push_back(36756);
        internalCounters.push_back(36875);
        internalCounters.push_back(29377);
        internalCounters.push_back(29496);
        internalCounters.push_back(29615);
        internalCounters.push_back(29734);
        internalCounters.push_back(29853);
        internalCounters.push_back(29972);
        internalCounters.push_back(30091);
        internalCounters.push_back(30210);
        internalCounters.push_back(30329);
        internalCounters.push_back(30448);
        internalCounters.push_back(30567);
        internalCounters.push_back(30686);
        internalCounters.push_back(30805);
        internalCounters.push_back(30924);
        internalCounters.push_back(31043);
        internalCounters.push_back(31162);
        internalCounters.push_back(31281);
        internalCounters.push_back(31400);
        internalCounters.push_back(31519);
        internalCounters.push_back(31638);
        internalCounters.push_back(31757);
        internalCounters.push_back(31876);
        internalCounters.push_back(31995);
        internalCounters.push_back(32114);
        internalCounters.push_back(32233);
        internalCounters.push_back(32352);
        internalCounters.push_back(32471);
        internalCounters.push_back(32590);
        internalCounters.push_back(32709);
        internalCounters.push_back(32828);
        internalCounters.push_back(32947);
        internalCounters.push_back(33066);
        internalCounters.push_back(33185);
        internalCounters.push_back(33304);
        internalCounters.push_back(33423);
        internalCounters.push_back(33542);
        internalCounters.push_back(33661);
        internalCounters.push_back(33780);
        internalCounters.push_back(33899);
        internalCounters.push_back(34018);
        internalCounters.push_back(34137);
        internalCounters.push_back(34256);
        internalCounters.push_back(34375);
        internalCounters.push_back(34494);
        internalCounters.push_back(34613);
        internalCounters.push_back(34732);
        internalCounters.push_back(34851);
        internalCounters.push_back(34970);
        internalCounters.push_back(35089);
        internalCounters.push_back(35208);
        internalCounters.push_back(35327);
        internalCounters.push_back(35446);
        internalCounters.push_back(35565);
        internalCounters.push_back(35684);
        internalCounters.push_back(35803);
        internalCounters.push_back(35922);
        internalCounters.push_back(36041);
        internalCounters.push_back(36160);
        internalCounters.push_back(36279);
        internalCounters.push_back(36398);
        internalCounters.push_back(36517);
        internalCounters.push_back(36636);
        internalCounters.push_back(36755);
        internalCounters.push_back(36874);

        p.DefinePublicCounter("TexVolFilteringPct", "#TextureUnit#Percentage of pixels that received volume filtering.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(29396);
        internalCounters.push_back(29515);
        internalCounters.push_back(29634);
        internalCounters.push_back(29753);
        internalCounters.push_back(29872);
        internalCounters.push_back(29991);
        internalCounters.push_back(30110);
        internalCounters.push_back(30229);
        internalCounters.push_back(30348);
        internalCounters.push_back(30467);
        internalCounters.push_back(30586);
        internalCounters.push_back(30705);
        internalCounters.push_back(30824);
        internalCounters.push_back(30943);
        internalCounters.push_back(31062);
        internalCounters.push_back(31181);
        internalCounters.push_back(31300);
        internalCounters.push_back(31419);
        internalCounters.push_back(31538);
        internalCounters.push_back(31657);
        internalCounters.push_back(31776);
        internalCounters.push_back(31895);
        internalCounters.push_back(32014);
        internalCounters.push_back(32133);
        internalCounters.push_back(32252);
        internalCounters.push_back(32371);
        internalCounters.push_back(32490);
        internalCounters.push_back(32609);
        internalCounters.push_back(32728);
        internalCounters.push_back(32847);
        internalCounters.push_back(32966);
        internalCounters.push_back(33085);
        internalCounters.push_back(33204);
        internalCounters.push_back(33323);
        internalCounters.push_back(33442);
        internalCounters.push_back(33561);
        internalCounters.push_back(33680);
        internalCounters.push_back(33799);
        internalCounters.push_back(33918);
        internalCounters.push_back(34037);
        internalCounters.push_back(34156);
        internalCounters.push_back(34275);
        internalCounters.push_back(34394);
        internalCounters.push_back(34513);
        internalCounters.push_back(34632);
        internalCounters.push_back(34751);
        internalCounters.push_back(34870);
        internalCounters.push_back(34989);
        internalCounters.push_back(35108);
        internalCounters.push_back(35227);
        internalCounters.push_back(35346);
        internalCounters.push_back(35465);
        internalCounters.push_back(35584);
        internalCounters.push_back(35703);
        internalCounters.push_back(35822);
        internalCounters.push_back(35941);
        internalCounters.push_back(36060);
        internalCounters.push_back(36179);
        internalCounters.push_back(36298);
        internalCounters.push_back(36417);
        internalCounters.push_back(36536);
        internalCounters.push_back(36655);
        internalCounters.push_back(36774);
        internalCounters.push_back(36893);
        internalCounters.push_back(29397);
        internalCounters.push_back(29516);
        internalCounters.push_back(29635);
        internalCounters.push_back(29754);
        internalCounters.push_back(29873);
        internalCounters.push_back(29992);
        internalCounters.push_back(30111);
        internalCounters.push_back(30230);
        internalCounters.push_back(30349);
        internalCounters.push_back(30468);
        internalCounters.push_back(30587);
        internalCounters.push_back(30706);
        internalCounters.push_back(30825);
        internalCounters.push_back(30944);
        internalCounters.push_back(31063);
        internalCounters.push_back(31182);
        internalCounters.push_back(31301);
        internalCounters.push_back(31420);
        internalCounters.push_back(31539);
        internalCounters.push_back(31658);
        internalCounters.push_back(31777);
        internalCounters.push_back(31896);
        internalCounters.push_back(32015);
        internalCounters.push_back(32134);
        internalCounters.push_back(32253);
        internalCounters.push_back(32372);
        internalCounters.push_back(32491);
        internalCounters.push_back(32610);
        internalCounters.push_back(32729);
        internalCounters.push_back(32848);
        internalCounters.push_back(32967);
        internalCounters.push_back(33086);
        internalCounters.push_back(33205);
        internalCounters.push_back(33324);
        internalCounters.push_back(33443);
        internalCounters.push_back(33562);
        internalCounters.push_back(33681);
        internalCounters.push_back(33800);
        internalCounters.push_back(33919);
        internalCounters.push_back(34038);
        internalCounters.push_back(34157);
        internalCounters.push_back(34276);
        internalCounters.push_back(34395);
        internalCounters.push_back(34514);
        internalCounters.push_back(34633);
        internalCounters.push_back(34752);
        internalCounters.push_back(34871);
        internalCounters.push_back(34990);
        internalCounters.push_back(35109);
        internalCounters.push_back(35228);
        internalCounters.push_back(35347);
        internalCounters.push_back(35466);
        internalCounters.push_back(35585);
        internalCounters.push_back(35704);
        internalCounters.push_back(35823);
        internalCounters.push_back(35942);
        internalCounters.push_back(36061);
        internalCounters.push_back(36180);
        internalCounters.push_back(36299);
        internalCounters.push_back(36418);
        internalCounters.push_back(36537);
        internalCounters.push_back(36656);
        internalCounters.push_back(36775);
        internalCounters.push_back(36894);
        internalCounters.push_back(29398);
        internalCounters.push_back(29517);
        internalCounters.push_back(29636);
        internalCounters.push_back(29755);
        internalCounters.push_back(29874);
        internalCounters.push_back(29993);
        internalCounters.push_back(30112);
        internalCounters.push_back(30231);
        internalCounters.push_back(30350);
        internalCounters.push_back(30469);
        internalCounters.push_back(30588);
        internalCounters.push_back(30707);
        internalCounters.push_back(30826);
        internalCounters.push_back(30945);
        internalCounters.push_back(31064);
        internalCounters.push_back(31183);
        internalCounters.push_back(31302);
        internalCounters.push_back(31421);
        internalCounters.push_back(31540);
        internalCounters.push_back(31659);
        internalCounters.push_back(31778);
        internalCounters.push_back(31897);
        internalCounters.push_back(32016);
        internalCounters.push_back(32135);
        internalCounters.push_back(32254);
        internalCounters.push_back(32373);
        internalCounters.push_back(32492);
        internalCounters.push_back(32611);
        internalCounters.push_back(32730);
        internalCounters.push_back(32849);
        internalCounters.push_back(32968);
        internalCounters.push_back(33087);
        internalCounters.push_back(33206);
        internalCounters.push_back(33325);
        internalCounters.push_back(33444);
        internalCounters.push_back(33563);
        internalCounters.push_back(33682);
        internalCounters.push_back(33801);
        internalCounters.push_back(33920);
        internalCounters.push_back(34039);
        internalCounters.push_back(34158);
        internalCounters.push_back(34277);
        internalCounters.push_back(34396);
        internalCounters.push_back(34515);
        internalCounters.push_back(34634);
        internalCounters.push_back(34753);
        internalCounters.push_back(34872);
        internalCounters.push_back(34991);
        internalCounters.push_back(35110);
        internalCounters.push_back(35229);
        internalCounters.push_back(35348);
        internalCounters.push_back(35467);
        internalCounters.push_back(35586);
        internalCounters.push_back(35705);
        internalCounters.push_back(35824);
        internalCounters.push_back(35943);
        internalCounters.push_back(36062);
        internalCounters.push_back(36181);
        internalCounters.push_back(36300);
        internalCounters.push_back(36419);
        internalCounters.push_back(36538);
        internalCounters.push_back(36657);
        internalCounters.push_back(36776);
        internalCounters.push_back(36895);
        internalCounters.push_back(29399);
        internalCounters.push_back(29518);
        internalCounters.push_back(29637);
        internalCounters.push_back(29756);
        internalCounters.push_back(29875);
        internalCounters.push_back(29994);
        internalCounters.push_back(30113);
        internalCounters.push_back(30232);
        internalCounters.push_back(30351);
        internalCounters.push_back(30470);
        internalCounters.push_back(30589);
        internalCounters.push_back(30708);
        internalCounters.push_back(30827);
        internalCounters.push_back(30946);
        internalCounters.push_back(31065);
        internalCounters.push_back(31184);
        internalCounters.push_back(31303);
        internalCounters.push_back(31422);
        internalCounters.push_back(31541);
        internalCounters.push_back(31660);
        internalCounters.push_back(31779);
        internalCounters.push_back(31898);
        internalCounters.push_back(32017);
        internalCounters.push_back(32136);
        internalCounters.push_back(32255);
        internalCounters.push_back(32374);
        internalCounters.push_back(32493);
        internalCounters.push_back(32612);
        internalCounters.push_back(32731);
        internalCounters.push_back(32850);
        internalCounters.push_back(32969);
        internalCounters.push_back(33088);
        internalCounters.push_back(33207);
        internalCounters.push_back(33326);
        internalCounters.push_back(33445);
        internalCounters.push_back(33564);
        internalCounters.push_back(33683);
        internalCounters.push_back(33802);
        internalCounters.push_back(33921);
        internalCounters.push_back(34040);
        internalCounters.push_back(34159);
        internalCounters.push_back(34278);
        internalCounters.push_back(34397);
        internalCounters.push_back(34516);
        internalCounters.push_back(34635);
        internalCounters.push_back(34754);
        internalCounters.push_back(34873);
        internalCounters.push_back(34992);
        internalCounters.push_back(35111);
        internalCounters.push_back(35230);
        internalCounters.push_back(35349);
        internalCounters.push_back(35468);
        internalCounters.push_back(35587);
        internalCounters.push_back(35706);
        internalCounters.push_back(35825);
        internalCounters.push_back(35944);
        internalCounters.push_back(36063);
        internalCounters.push_back(36182);
        internalCounters.push_back(36301);
        internalCounters.push_back(36420);
        internalCounters.push_back(36539);
        internalCounters.push_back(36658);
        internalCounters.push_back(36777);
        internalCounters.push_back(36896);
        internalCounters.push_back(29400);
        internalCounters.push_back(29519);
        internalCounters.push_back(29638);
        internalCounters.push_back(29757);
        internalCounters.push_back(29876);
        internalCounters.push_back(29995);
        internalCounters.push_back(30114);
        internalCounters.push_back(30233);
        internalCounters.push_back(30352);
        internalCounters.push_back(30471);
        internalCounters.push_back(30590);
        internalCounters.push_back(30709);
        internalCounters.push_back(30828);
        internalCounters.push_back(30947);
        internalCounters.push_back(31066);
        internalCounters.push_back(31185);
        internalCounters.push_back(31304);
        internalCounters.push_back(31423);
        internalCounters.push_back(31542);
        internalCounters.push_back(31661);
        internalCounters.push_back(31780);
        internalCounters.push_back(31899);
        internalCounters.push_back(32018);
        internalCounters.push_back(32137);
        internalCounters.push_back(32256);
        internalCounters.push_back(32375);
        internalCounters.push_back(32494);
        internalCounters.push_back(32613);
        internalCounters.push_back(32732);
        internalCounters.push_back(32851);
        internalCounters.push_back(32970);
        internalCounters.push_back(33089);
        internalCounters.push_back(33208);
        internalCounters.push_back(33327);
        internalCounters.push_back(33446);
        internalCounters.push_back(33565);
        internalCounters.push_back(33684);
        internalCounters.push_back(33803);
        internalCounters.push_back(33922);
        internalCounters.push_back(34041);
        internalCounters.push_back(34160);
        internalCounters.push_back(34279);
        internalCounters.push_back(34398);
        internalCounters.push_back(34517);
        internalCounters.push_back(34636);
        internalCounters.push_back(34755);
        internalCounters.push_back(34874);
        internalCounters.push_back(34993);
        internalCounters.push_back(35112);
        internalCounters.push_back(35231);
        internalCounters.push_back(35350);
        internalCounters.push_back(35469);
        internalCounters.push_back(35588);
        internalCounters.push_back(35707);
        internalCounters.push_back(35826);
        internalCounters.push_back(35945);
        internalCounters.push_back(36064);
        internalCounters.push_back(36183);
        internalCounters.push_back(36302);
        internalCounters.push_back(36421);
        internalCounters.push_back(36540);
        internalCounters.push_back(36659);
        internalCounters.push_back(36778);
        internalCounters.push_back(36897);
        internalCounters.push_back(29401);
        internalCounters.push_back(29520);
        internalCounters.push_back(29639);
        internalCounters.push_back(29758);
        internalCounters.push_back(29877);
        internalCounters.push_back(29996);
        internalCounters.push_back(30115);
        internalCounters.push_back(30234);
        internalCounters.push_back(30353);
        internalCounters.push_back(30472);
        internalCounters.push_back(30591);
        internalCounters.push_back(30710);
        internalCounters.push_back(30829);
        internalCounters.push_back(30948);
        internalCounters.push_back(31067);
        internalCounters.push_back(31186);
        internalCounters.push_back(31305);
        internalCounters.push_back(31424);
        internalCounters.push_back(31543);
        internalCounters.push_back(31662);
        internalCounters.push_back(31781);
        internalCounters.push_back(31900);
        internalCounters.push_back(32019);
        internalCounters.push_back(32138);
        internalCounters.push_back(32257);
        internalCounters.push_back(32376);
        internalCounters.push_back(32495);
        internalCounters.push_back(32614);
        internalCounters.push_back(32733);
        internalCounters.push_back(32852);
        internalCounters.push_back(32971);
        internalCounters.push_back(33090);
        internalCounters.push_back(33209);
        internalCounters.push_back(33328);
        internalCounters.push_back(33447);
        internalCounters.push_back(33566);
        internalCounters.push_back(33685);
        internalCounters.push_back(33804);
        internalCounters.push_back(33923);
        internalCounters.push_back(34042);
        internalCounters.push_back(34161);
        internalCounters.push_back(34280);
        internalCounters.push_back(34399);
        internalCounters.push_back(34518);
        internalCounters.push_back(34637);
        internalCounters.push_back(34756);
        internalCounters.push_back(34875);
        internalCounters.push_back(34994);
        internalCounters.push_back(35113);
        internalCounters.push_back(35232);
        internalCounters.push_back(35351);
        internalCounters.push_back(35470);
        internalCounters.push_back(35589);
        internalCounters.push_back(35708);
        internalCounters.push_back(35827);
        internalCounters.push_back(35946);
        internalCounters.push_back(36065);
        internalCounters.push_back(36184);
        internalCounters.push_back(36303);
        internalCounters.push_back(36422);
        internalCounters.push_back(36541);
        internalCounters.push_back(36660);
        internalCounters.push_back(36779);
        internalCounters.push_back(36898);
        internalCounters.push_back(29402);
        internalCounters.push_back(29521);
        internalCounters.push_back(29640);
        internalCounters.push_back(29759);
        internalCounters.push_back(29878);
        internalCounters.push_back(29997);
        internalCounters.push_back(30116);
        internalCounters.push_back(30235);
        internalCounters.push_back(30354);
        internalCounters.push_back(30473);
        internalCounters.push_back(30592);
        internalCounters.push_back(30711);
        internalCounters.push_back(30830);
        internalCounters.push_back(30949);
        internalCounters.push_back(31068);
        internalCounters.push_back(31187);
        internalCounters.push_back(31306);
        internalCounters.push_back(31425);
        internalCounters.push_back(31544);
        internalCounters.push_back(31663);
        internalCounters.push_back(31782);
        internalCounters.push_back(31901);
        internalCounters.push_back(32020);
        internalCounters.push_back(32139);
        internalCounters.push_back(32258);
        internalCounters.push_back(32377);
        internalCounters.push_back(32496);
        internalCounters.push_back(32615);
        internalCounters.push_back(32734);
        internalCounters.push_back(32853);
        internalCounters.push_back(32972);
        internalCounters.push_back(33091);
        internalCounters.push_back(33210);
        internalCounters.push_back(33329);
        internalCounters.push_back(33448);
        internalCounters.push_back(33567);
        internalCounters.push_back(33686);
        internalCounters.push_back(33805);
        internalCounters.push_back(33924);
        internalCounters.push_back(34043);
        internalCounters.push_back(34162);
        internalCounters.push_back(34281);
        internalCounters.push_back(34400);
        internalCounters.push_back(34519);
        internalCounters.push_back(34638);
        internalCounters.push_back(34757);
        internalCounters.push_back(34876);
        internalCounters.push_back(34995);
        internalCounters.push_back(35114);
        internalCounters.push_back(35233);
        internalCounters.push_back(35352);
        internalCounters.push_back(35471);
        internalCounters.push_back(35590);
        internalCounters.push_back(35709);
        internalCounters.push_back(35828);
        internalCounters.push_back(35947);
        internalCounters.push_back(36066);
        internalCounters.push_back(36185);
        internalCounters.push_back(36304);
        internalCounters.push_back(36423);
        internalCounters.push_back(36542);
        internalCounters.push_back(36661);
        internalCounters.push_back(36780);
        internalCounters.push_back(36899);
        internalCounters.push_back(29403);
        internalCounters.push_back(29522);
        internalCounters.push_back(29641);
        internalCounters.push_back(29760);
        internalCounters.push_back(29879);
        internalCounters.push_back(29998);
        internalCounters.push_back(30117);
        internalCounters.push_back(30236);
        internalCounters.push_back(30355);
        internalCounters.push_back(30474);
        internalCounters.push_back(30593);
        internalCounters.push_back(30712);
        internalCounters.push_back(30831);
        internalCounters.push_back(30950);
        internalCounters.push_back(31069);
        internalCounters.push_back(31188);
        internalCounters.push_back(31307);
        internalCounters.push_back(31426);
        internalCounters.push_back(31545);
        internalCounters.push_back(31664);
        internalCounters.push_back(31783);
        internalCounters.push_back(31902);
        internalCounters.push_back(32021);
        internalCounters.push_back(32140);
        internalCounters.push_back(32259);
        internalCounters.push_back(32378);
        internalCounters.push_back(32497);
        internalCounters.push_back(32616);
        internalCounters.push_back(32735);
        internalCounters.push_back(32854);
        internalCounters.push_back(32973);
        internalCounters.push_back(33092);
        internalCounters.push_back(33211);
        internalCounters.push_back(33330);
        internalCounters.push_back(33449);
        internalCounters.push_back(33568);
        internalCounters.push_back(33687);
        internalCounters.push_back(33806);
        internalCounters.push_back(33925);
        internalCounters.push_back(34044);
        internalCounters.push_back(34163);
        internalCounters.push_back(34282);
        internalCounters.push_back(34401);
        internalCounters.push_back(34520);
        internalCounters.push_back(34639);
        internalCounters.push_back(34758);
        internalCounters.push_back(34877);
        internalCounters.push_back(34996);
        internalCounters.push_back(35115);
        internalCounters.push_back(35234);
        internalCounters.push_back(35353);
        internalCounters.push_back(35472);
        internalCounters.push_back(35591);
        internalCounters.push_back(35710);
        internalCounters.push_back(35829);
        internalCounters.push_back(35948);
        internalCounters.push_back(36067);
        internalCounters.push_back(36186);
        internalCounters.push_back(36305);
        internalCounters.push_back(36424);
        internalCounters.push_back(36543);
        internalCounters.push_back(36662);
        internalCounters.push_back(36781);
        internalCounters.push_back(36900);
        internalCounters.push_back(29404);
        internalCounters.push_back(29523);
        internalCounters.push_back(29642);
        internalCounters.push_back(29761);
        internalCounters.push_back(29880);
        internalCounters.push_back(29999);
        internalCounters.push_back(30118);
        internalCounters.push_back(30237);
        internalCounters.push_back(30356);
        internalCounters.push_back(30475);
        internalCounters.push_back(30594);
        internalCounters.push_back(30713);
        internalCounters.push_back(30832);
        internalCounters.push_back(30951);
        internalCounters.push_back(31070);
        internalCounters.push_back(31189);
        internalCounters.push_back(31308);
        internalCounters.push_back(31427);
        internalCounters.push_back(31546);
        internalCounters.push_back(31665);
        internalCounters.push_back(31784);
        internalCounters.push_back(31903);
        internalCounters.push_back(32022);
        internalCounters.push_back(32141);
        internalCounters.push_back(32260);
        internalCounters.push_back(32379);
        internalCounters.push_back(32498);
        internalCounters.push_back(32617);
        internalCounters.push_back(32736);
        internalCounters.push_back(32855);
        internalCounters.push_back(32974);
        internalCounters.push_back(33093);
        internalCounters.push_back(33212);
        internalCounters.push_back(33331);
        internalCounters.push_back(33450);
        internalCounters.push_back(33569);
        internalCounters.push_back(33688);
        internalCounters.push_back(33807);
        internalCounters.push_back(33926);
        internalCounters.push_back(34045);
        internalCounters.push_back(34164);
        internalCounters.push_back(34283);
        internalCounters.push_back(34402);
        internalCounters.push_back(34521);
        internalCounters.push_back(34640);
        internalCounters.push_back(34759);
        internalCounters.push_back(34878);
        internalCounters.push_back(34997);
        internalCounters.push_back(35116);
        internalCounters.push_back(35235);
        internalCounters.push_back(35354);
        internalCounters.push_back(35473);
        internalCounters.push_back(35592);
        internalCounters.push_back(35711);
        internalCounters.push_back(35830);
        internalCounters.push_back(35949);
        internalCounters.push_back(36068);
        internalCounters.push_back(36187);
        internalCounters.push_back(36306);
        internalCounters.push_back(36425);
        internalCounters.push_back(36544);
        internalCounters.push_back(36663);
        internalCounters.push_back(36782);
        internalCounters.push_back(36901);

        p.DefinePublicCounter("TexAveAnisotropy", "#TextureUnit#The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(2),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,*,+,(4),128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,*,+,(6),192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,*,+,(8),256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,*,+,(10),320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,*,+,(12),384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,*,+,(14),448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,*,+,(16),512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,+,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,+,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,+,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,+,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,+,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,+,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,+,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,+,/");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7378);
        internalCounters.push_back(7706);
        internalCounters.push_back(8034);
        internalCounters.push_back(8362);
        internalCounters.push_back(8690);
        internalCounters.push_back(9018);
        internalCounters.push_back(9346);
        internalCounters.push_back(9674);
        internalCounters.push_back(10002);
        internalCounters.push_back(10330);
        internalCounters.push_back(10658);
        internalCounters.push_back(10986);
        internalCounters.push_back(11314);
        internalCounters.push_back(11642);
        internalCounters.push_back(11970);
        internalCounters.push_back(12298);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("DepthStencilTestBusy", "#Timing#Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7249);
        internalCounters.push_back(7577);
        internalCounters.push_back(7905);
        internalCounters.push_back(8233);
        internalCounters.push_back(8561);
        internalCounters.push_back(8889);
        internalCounters.push_back(9217);
        internalCounters.push_back(9545);
        internalCounters.push_back(9873);
        internalCounters.push_back(10201);
        internalCounters.push_back(10529);
        internalCounters.push_back(10857);
        internalCounters.push_back(11185);
        internalCounters.push_back(11513);
        internalCounters.push_back(11841);
        internalCounters.push_back(12169);
        internalCounters.push_back(7238);
        internalCounters.push_back(7566);
        internalCounters.push_back(7894);
        internalCounters.push_back(8222);
        internalCounters.push_back(8550);
        internalCounters.push_back(8878);
        internalCounters.push_back(9206);
        internalCounters.push_back(9534);
        internalCounters.push_back(9862);
        internalCounters.push_back(10190);
        internalCounters.push_back(10518);
        internalCounters.push_back(10846);
        internalCounters.push_back(11174);
        internalCounters.push_back(11502);
        internalCounters.push_back(11830);
        internalCounters.push_back(12158);

        p.DefinePublicCounter("HiZTilesAccepted", "#DepthAndStencil#Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7238);
        internalCounters.push_back(7566);
        internalCounters.push_back(7894);
        internalCounters.push_back(8222);
        internalCounters.push_back(8550);
        internalCounters.push_back(8878);
        internalCounters.push_back(9206);
        internalCounters.push_back(9534);
        internalCounters.push_back(9862);
        internalCounters.push_back(10190);
        internalCounters.push_back(10518);
        internalCounters.push_back(10846);
        internalCounters.push_back(11174);
        internalCounters.push_back(11502);
        internalCounters.push_back(11830);
        internalCounters.push_back(12158);
        internalCounters.push_back(7262);
        internalCounters.push_back(7590);
        internalCounters.push_back(7918);
        internalCounters.push_back(8246);
        internalCounters.push_back(8574);
        internalCounters.push_back(8902);
        internalCounters.push_back(9230);
        internalCounters.push_back(9558);
        internalCounters.push_back(9886);
        internalCounters.push_back(10214);
        internalCounters.push_back(10542);
        internalCounters.push_back(10870);
        internalCounters.push_back(11198);
        internalCounters.push_back(11526);
        internalCounters.push_back(11854);
        internalCounters.push_back(12182);

        p.DefinePublicCounter("PreZTilesDetailCulled", "#DepthAndStencil#Percentage of tiles rejected because the associated prim had no contributing area.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13918);
        internalCounters.push_back(14409);
        internalCounters.push_back(14900);
        internalCounters.push_back(15391);
        internalCounters.push_back(13919);
        internalCounters.push_back(14410);
        internalCounters.push_back(14901);
        internalCounters.push_back(15392);
        internalCounters.push_back(13920);
        internalCounters.push_back(14411);
        internalCounters.push_back(14902);
        internalCounters.push_back(15393);
        internalCounters.push_back(13921);
        internalCounters.push_back(14412);
        internalCounters.push_back(14903);
        internalCounters.push_back(15394);
        internalCounters.push_back(13994);
        internalCounters.push_back(14485);
        internalCounters.push_back(14976);
        internalCounters.push_back(15467);
        internalCounters.push_back(13995);
        internalCounters.push_back(14486);
        internalCounters.push_back(14977);
        internalCounters.push_back(15468);
        internalCounters.push_back(13996);
        internalCounters.push_back(14487);
        internalCounters.push_back(14978);
        internalCounters.push_back(15469);
        internalCounters.push_back(13997);
        internalCounters.push_back(14488);
        internalCounters.push_back(14979);
        internalCounters.push_back(15470);

        p.DefinePublicCounter("HiZQuadsCulled", "#DepthAndStencil#Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13918);
        internalCounters.push_back(14409);
        internalCounters.push_back(14900);
        internalCounters.push_back(15391);
        internalCounters.push_back(13919);
        internalCounters.push_back(14410);
        internalCounters.push_back(14901);
        internalCounters.push_back(15392);
        internalCounters.push_back(13920);
        internalCounters.push_back(14411);
        internalCounters.push_back(14902);
        internalCounters.push_back(15393);
        internalCounters.push_back(13921);
        internalCounters.push_back(14412);
        internalCounters.push_back(14903);
        internalCounters.push_back(15394);
        internalCounters.push_back(14018);
        internalCounters.push_back(14509);
        internalCounters.push_back(15000);
        internalCounters.push_back(15491);
        internalCounters.push_back(13994);
        internalCounters.push_back(14485);
        internalCounters.push_back(14976);
        internalCounters.push_back(15467);
        internalCounters.push_back(13995);
        internalCounters.push_back(14486);
        internalCounters.push_back(14977);
        internalCounters.push_back(15468);
        internalCounters.push_back(13996);
        internalCounters.push_back(14487);
        internalCounters.push_back(14978);
        internalCounters.push_back(15469);
        internalCounters.push_back(13997);
        internalCounters.push_back(14488);
        internalCounters.push_back(14979);
        internalCounters.push_back(15470);

        p.DefinePublicCounter("PreZQuadsCulled", "#DepthAndStencil#Percentage of quads rejected based on the detailZ and earlyZ tests.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum16,16,17,18,19,sum4,-,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(14018);
        internalCounters.push_back(14509);
        internalCounters.push_back(15000);
        internalCounters.push_back(15491);
        internalCounters.push_back(13918);
        internalCounters.push_back(14409);
        internalCounters.push_back(14900);
        internalCounters.push_back(15391);
        internalCounters.push_back(13919);
        internalCounters.push_back(14410);
        internalCounters.push_back(14901);
        internalCounters.push_back(15392);
        internalCounters.push_back(13920);
        internalCounters.push_back(14411);
        internalCounters.push_back(14902);
        internalCounters.push_back(15393);
        internalCounters.push_back(13921);
        internalCounters.push_back(14412);
        internalCounters.push_back(14903);
        internalCounters.push_back(15394);

        p.DefinePublicCounter("PostZQuads", "#DepthAndStencil#Percentage of quads for which the pixel shader will run and may be postZ tested.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,sum16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7411);
        internalCounters.push_back(7739);
        internalCounters.push_back(8067);
        internalCounters.push_back(8395);
        internalCounters.push_back(8723);
        internalCounters.push_back(9051);
        internalCounters.push_back(9379);
        internalCounters.push_back(9707);
        internalCounters.push_back(10035);
        internalCounters.push_back(10363);
        internalCounters.push_back(10691);
        internalCounters.push_back(11019);
        internalCounters.push_back(11347);
        internalCounters.push_back(11675);
        internalCounters.push_back(12003);
        internalCounters.push_back(12331);

        p.DefinePublicCounter("PreZSamplesPassing", "#DepthAndStencil#Number of samples tested for Z before shading and passed.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7413);
        internalCounters.push_back(7741);
        internalCounters.push_back(8069);
        internalCounters.push_back(8397);
        internalCounters.push_back(8725);
        internalCounters.push_back(9053);
        internalCounters.push_back(9381);
        internalCounters.push_back(9709);
        internalCounters.push_back(10037);
        internalCounters.push_back(10365);
        internalCounters.push_back(10693);
        internalCounters.push_back(11021);
        internalCounters.push_back(11349);
        internalCounters.push_back(11677);
        internalCounters.push_back(12005);
        internalCounters.push_back(12333);

        p.DefinePublicCounter("PreZSamplesFailingS", "#DepthAndStencil#Number of samples tested for Z before shading and failed stencil test.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7412);
        internalCounters.push_back(7740);
        internalCounters.push_back(8068);
        internalCounters.push_back(8396);
        internalCounters.push_back(8724);
        internalCounters.push_back(9052);
        internalCounters.push_back(9380);
        internalCounters.push_back(9708);
        internalCounters.push_back(10036);
        internalCounters.push_back(10364);
        internalCounters.push_back(10692);
        internalCounters.push_back(11020);
        internalCounters.push_back(11348);
        internalCounters.push_back(11676);
        internalCounters.push_back(12004);
        internalCounters.push_back(12332);

        p.DefinePublicCounter("PreZSamplesFailingZ", "#DepthAndStencil#Number of samples tested for Z before shading and failed Z test.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7408);
        internalCounters.push_back(7736);
        internalCounters.push_back(8064);
        internalCounters.push_back(8392);
        internalCounters.push_back(8720);
        internalCounters.push_back(9048);
        internalCounters.push_back(9376);
        internalCounters.push_back(9704);
        internalCounters.push_back(10032);
        internalCounters.push_back(10360);
        internalCounters.push_back(10688);
        internalCounters.push_back(11016);
        internalCounters.push_back(11344);
        internalCounters.push_back(11672);
        internalCounters.push_back(12000);
        internalCounters.push_back(12328);

        p.DefinePublicCounter("PostZSamplesPassing", "#DepthAndStencil#Number of samples tested for Z after shading and passed.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7410);
        internalCounters.push_back(7738);
        internalCounters.push_back(8066);
        internalCounters.push_back(8394);
        internalCounters.push_back(8722);
        internalCounters.push_back(9050);
        internalCounters.push_back(9378);
        internalCounters.push_back(9706);
        internalCounters.push_back(10034);
        internalCounters.push_back(10362);
        internalCounters.push_back(10690);
        internalCounters.push_back(11018);
        internalCounters.push_back(11346);
        internalCounters.push_back(11674);
        internalCounters.push_back(12002);
        internalCounters.push_back(12330);

        p.DefinePublicCounter("PostZSamplesFailingS", "#DepthAndStencil#Number of samples tested for Z after shading and failed stencil test.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7409);
        internalCounters.push_back(7737);
        internalCounters.push_back(8065);
        internalCounters.push_back(8393);
        internalCounters.push_back(8721);
        internalCounters.push_back(9049);
        internalCounters.push_back(9377);
        internalCounters.push_back(9705);
        internalCounters.push_back(10033);
        internalCounters.push_back(10361);
        internalCounters.push_back(10689);
        internalCounters.push_back(11017);
        internalCounters.push_back(11345);
        internalCounters.push_back(11673);
        internalCounters.push_back(12001);
        internalCounters.push_back(12329);

        p.DefinePublicCounter("PostZSamplesFailingZ", "#DepthAndStencil#Number of samples tested for Z after shading and failed Z test.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7280);
        internalCounters.push_back(7608);
        internalCounters.push_back(7936);
        internalCounters.push_back(8264);
        internalCounters.push_back(8592);
        internalCounters.push_back(8920);
        internalCounters.push_back(9248);
        internalCounters.push_back(9576);
        internalCounters.push_back(9904);
        internalCounters.push_back(10232);
        internalCounters.push_back(10560);
        internalCounters.push_back(10888);
        internalCounters.push_back(11216);
        internalCounters.push_back(11544);
        internalCounters.push_back(11872);
        internalCounters.push_back(12200);
        internalCounters.push_back(12484);

        p.DefinePublicCounter("ZUnitStalled", "#DepthAndStencil#The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(354);
        internalCounters.push_back(792);
        internalCounters.push_back(1230);
        internalCounters.push_back(1668);
        internalCounters.push_back(2106);
        internalCounters.push_back(2544);
        internalCounters.push_back(2982);
        internalCounters.push_back(3420);
        internalCounters.push_back(3858);
        internalCounters.push_back(4296);
        internalCounters.push_back(4734);
        internalCounters.push_back(5172);
        internalCounters.push_back(5610);
        internalCounters.push_back(6048);
        internalCounters.push_back(6486);
        internalCounters.push_back(6924);

        p.DefinePublicCounter("CBMemRead", "#ColorBuffer#Number of bytes read from the color buffer.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(344);
        internalCounters.push_back(782);
        internalCounters.push_back(1220);
        internalCounters.push_back(1658);
        internalCounters.push_back(2096);
        internalCounters.push_back(2534);
        internalCounters.push_back(2972);
        internalCounters.push_back(3410);
        internalCounters.push_back(3848);
        internalCounters.push_back(4286);
        internalCounters.push_back(4724);
        internalCounters.push_back(5162);
        internalCounters.push_back(5600);
        internalCounters.push_back(6038);
        internalCounters.push_back(6476);
        internalCounters.push_back(6914);

        p.DefinePublicCounter("CBMemWritten", "#ColorBuffer#Number of bytes written to the color buffer.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*");
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(388);
        internalCounters.push_back(826);
        internalCounters.push_back(1264);
        internalCounters.push_back(1702);
        internalCounters.push_back(2140);
        internalCounters.push_back(2578);
        internalCounters.push_back(3016);
        internalCounters.push_back(3454);
        internalCounters.push_back(3892);
        internalCounters.push_back(4330);
        internalCounters.push_back(4768);
        internalCounters.push_back(5206);
        internalCounters.push_back(5644);
        internalCounters.push_back(6082);
        internalCounters.push_back(6520);
        internalCounters.push_back(6958);
        internalCounters.push_back(233);
        internalCounters.push_back(671);
        internalCounters.push_back(1109);
        internalCounters.push_back(1547);
        internalCounters.push_back(1985);
        internalCounters.push_back(2423);
        internalCounters.push_back(2861);
        internalCounters.push_back(3299);
        internalCounters.push_back(3737);
        internalCounters.push_back(4175);
        internalCounters.push_back(4613);
        internalCounters.push_back(5051);
        internalCounters.push_back(5489);
        internalCounters.push_back(5927);
        internalCounters.push_back(6365);
        internalCounters.push_back(6803);

        p.DefinePublicCounter("CBSlowPixelPct", "#ColorBuffer#Percentage of pixels written to the color buffer using a half-rate or quarter-rate format.", GPA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, GPA_COUNTER_TYPE_DYNAMIC, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*,(100),min");
    }
}

