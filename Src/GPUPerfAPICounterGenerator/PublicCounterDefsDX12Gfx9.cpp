//==============================================================================
// Copyright (c) 2010-2018 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief PublicCounterDefinitions for DX12GFX9
//==============================================================================

#include "PublicCounterDefsDX12Gfx9.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicCountersDX12Gfx9(GPA_PublicCounters& p)
{
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);

        p.DefinePublicCounter("GPUTime", "Timing", "Time this API call took to execute on the GPU in milliseconds. Does not include time that draw calls are processed in parallel.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "0,TS_FREQ,/,(1000),*", "00bfa9cd-5512-48e8-7055-7b592113b8cb" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50653);
        internalCounters.push_back(50651);

        p.DefinePublicCounter("GPUBusy", "Timing", "The percentage of time GPU was busy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,/,(100),*,(100),min", "bef38bf3-1167-0844-81f0-67d2d28ddbc5" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(50653);

        p.DefinePublicCounter("GPUBusyCycles", "Timing", "Number of GPU cycles that the GPU was busy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0", "1e84970d-7014-2b8d-d61e-388b5f782691" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(221);
        internalCounters.push_back(369);
        internalCounters.push_back(517);
        internalCounters.push_back(665);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("TessellatorBusy", "Timing", "The percentage of time the tessellation engine is busy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,max,2,max,3,max,4,/,(100),*", "36af6c72-dcfb-8102-4fd4-ce8ddc573365" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(221);
        internalCounters.push_back(369);
        internalCounters.push_back(517);
        internalCounters.push_back(665);

        p.DefinePublicCounter("TessellatorBusyCycles", "Timing", "Number of GPU cycles that the tessellation engine is busy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,max,2,max,3,max", "60289dcb-7b33-46e7-26d1-8a2121605543" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3821);
        internalCounters.push_back(4017);
        internalCounters.push_back(4213);
        internalCounters.push_back(4409);
        internalCounters.push_back(3830);
        internalCounters.push_back(4026);
        internalCounters.push_back(4222);
        internalCounters.push_back(4418);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("VSBusy", "Timing", "The percentage of time the ShaderUnit has vertex shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min", "94caad5e-867c-6c09-cf3a-d05b51df8f3b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3821);
        internalCounters.push_back(4017);
        internalCounters.push_back(4213);
        internalCounters.push_back(4409);
        internalCounters.push_back(3830);
        internalCounters.push_back(4026);
        internalCounters.push_back(4222);
        internalCounters.push_back(4418);

        p.DefinePublicCounter("VSBusyCycles", "Timing", "Number of GPU cycles that the ShaderUnit has vertex shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max", "a2086d4e-274b-48a8-3e08-a4ab76ac15dd" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);
        internalCounters.push_back(3821);
        internalCounters.push_back(4017);
        internalCounters.push_back(4213);
        internalCounters.push_back(4409);
        internalCounters.push_back(3830);
        internalCounters.push_back(4026);
        internalCounters.push_back(4222);
        internalCounters.push_back(4418);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("VSTime", "Timing", "Time vertex shaders are busy in milliseconds.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*", "fee660c7-8e01-4dc5-e5d0-fcb61c17fb2c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3852);
        internalCounters.push_back(4048);
        internalCounters.push_back(4244);
        internalCounters.push_back(4440);
        internalCounters.push_back(3858);
        internalCounters.push_back(4054);
        internalCounters.push_back(4250);
        internalCounters.push_back(4446);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("HSBusy", "Timing", "The percentage of time the ShaderUnit has hull shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min", "16f30a0b-4cbf-eccd-b13f-ab68dd254d32" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3852);
        internalCounters.push_back(4048);
        internalCounters.push_back(4244);
        internalCounters.push_back(4440);
        internalCounters.push_back(3858);
        internalCounters.push_back(4054);
        internalCounters.push_back(4250);
        internalCounters.push_back(4446);

        p.DefinePublicCounter("HSBusyCycles", "Timing", "Number of GPU cycles that the ShaderUnit has hull shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max", "753e76ef-8ef8-3f13-b511-4bd9f3589fdb" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);
        internalCounters.push_back(3852);
        internalCounters.push_back(4048);
        internalCounters.push_back(4244);
        internalCounters.push_back(4440);
        internalCounters.push_back(3858);
        internalCounters.push_back(4054);
        internalCounters.push_back(4250);
        internalCounters.push_back(4446);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("HSTime", "Timing", "Time hull shaders are busy in milliseconds.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*", "8792e9f1-fb39-b92a-b230-f33df4c8a0de" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3840);
        internalCounters.push_back(4036);
        internalCounters.push_back(4232);
        internalCounters.push_back(4428);
        internalCounters.push_back(3843);
        internalCounters.push_back(4039);
        internalCounters.push_back(4235);
        internalCounters.push_back(4431);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("GSBusy", "Timing", "The percentage of time the ShaderUnit has geometry shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min", "876f36d8-d046-833f-7832-673cbffd0a45" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3840);
        internalCounters.push_back(4036);
        internalCounters.push_back(4232);
        internalCounters.push_back(4428);
        internalCounters.push_back(3843);
        internalCounters.push_back(4039);
        internalCounters.push_back(4235);
        internalCounters.push_back(4431);

        p.DefinePublicCounter("GSBusyCycles", "Timing", "Number of GPU cycles that the ShaderUnit has geometry shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max", "48203b6b-8983-c067-d63e-05da8be5111b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);
        internalCounters.push_back(3840);
        internalCounters.push_back(4036);
        internalCounters.push_back(4232);
        internalCounters.push_back(4428);
        internalCounters.push_back(3843);
        internalCounters.push_back(4039);
        internalCounters.push_back(4235);
        internalCounters.push_back(4431);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("GSTime", "Timing", "Time geometry shaders are busy in milliseconds.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,0,TS_FREQ,/,(1000),*,*", "86d56794-f391-b601-9388-851b646d346c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3874);
        internalCounters.push_back(4070);
        internalCounters.push_back(4266);
        internalCounters.push_back(4462);
        internalCounters.push_back(3879);
        internalCounters.push_back(4075);
        internalCounters.push_back(4271);
        internalCounters.push_back(4467);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PSBusy", "Timing", "The percentage of time the ShaderUnit has pixel shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*", "7e772beb-d82c-bd9a-aed0-fe504d416ce5" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3874);
        internalCounters.push_back(4070);
        internalCounters.push_back(4266);
        internalCounters.push_back(4462);
        internalCounters.push_back(3879);
        internalCounters.push_back(4075);
        internalCounters.push_back(4271);
        internalCounters.push_back(4467);

        p.DefinePublicCounter("PSBusyCycles", "Timing", "Number of GPU cycles that the ShaderUnit has pixel shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max", "b58bea04-ce8e-2984-80f4-8aba7d4c817b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);
        internalCounters.push_back(3874);
        internalCounters.push_back(4070);
        internalCounters.push_back(4266);
        internalCounters.push_back(4462);
        internalCounters.push_back(3879);
        internalCounters.push_back(4075);
        internalCounters.push_back(4271);
        internalCounters.push_back(4467);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PSTime", "Timing", "Time pixel shaders are busy in milliseconds.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,0,TS_FREQ,/,(1000),*,*", "f564ee00-ffcf-f7f6-fcbf-f200205cd0cc" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3862);
        internalCounters.push_back(4058);
        internalCounters.push_back(4254);
        internalCounters.push_back(4450);
        internalCounters.push_back(3866);
        internalCounters.push_back(4062);
        internalCounters.push_back(4258);
        internalCounters.push_back(4454);
        internalCounters.push_back(3868);
        internalCounters.push_back(4064);
        internalCounters.push_back(4260);
        internalCounters.push_back(4456);
        internalCounters.push_back(3872);
        internalCounters.push_back(4068);
        internalCounters.push_back(4264);
        internalCounters.push_back(4460);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("CSBusy", "Timing", "The percentage of time the ShaderUnit has compute shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max,16,/,(100),*,(100),min", "493fdd90-8d2b-a055-5e4e-2d29c3396b8c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3862);
        internalCounters.push_back(4058);
        internalCounters.push_back(4254);
        internalCounters.push_back(4450);
        internalCounters.push_back(3866);
        internalCounters.push_back(4062);
        internalCounters.push_back(4258);
        internalCounters.push_back(4454);
        internalCounters.push_back(3868);
        internalCounters.push_back(4064);
        internalCounters.push_back(4260);
        internalCounters.push_back(4456);
        internalCounters.push_back(3872);
        internalCounters.push_back(4068);
        internalCounters.push_back(4264);
        internalCounters.push_back(4460);

        p.DefinePublicCounter("CSBusyCycles", "Timing", "Number of GPU cycles that the ShaderUnit has compute shader work to do.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max", "39bcf1b8-f6b2-4c37-f9af-0a2bb59512f9" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(54510);
        internalCounters.push_back(3862);
        internalCounters.push_back(4058);
        internalCounters.push_back(4254);
        internalCounters.push_back(4450);
        internalCounters.push_back(3866);
        internalCounters.push_back(4062);
        internalCounters.push_back(4258);
        internalCounters.push_back(4454);
        internalCounters.push_back(3868);
        internalCounters.push_back(4064);
        internalCounters.push_back(4260);
        internalCounters.push_back(4456);
        internalCounters.push_back(3872);
        internalCounters.push_back(4068);
        internalCounters.push_back(4264);
        internalCounters.push_back(4460);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("CSTime", "Timing", "Time compute shaders are busy in milliseconds.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_MILLISECONDS, internalCounters, "1,2,3,4,5,6,7,8,comparemax4,9,10,11,12,13,14,15,16,comparemax4,max,17,/,(1),min,0,TS_FREQ,/,(1000),*,*", "5177faaf-f59d-ee23-6e36-0ea087dca9dc" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(116);
        internalCounters.push_back(264);
        internalCounters.push_back(412);
        internalCounters.push_back(560);
        internalCounters.push_back(97);
        internalCounters.push_back(245);
        internalCounters.push_back(393);
        internalCounters.push_back(541);
        internalCounters.push_back(192);
        internalCounters.push_back(340);
        internalCounters.push_back(488);
        internalCounters.push_back(636);

        p.DefinePublicCounter("VSVerticesIn", "VertexShader", "The number of vertices processed by the VS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,4,5,6,7,sum4,ifnotzero,8,9,10,11,sum4,8,9,10,11,sum4,ifnotzero", "810a04c8-2ff4-081d-766d-bfa2bd4ad916" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9118);
        internalCounters.push_back(9492);
        internalCounters.push_back(9866);
        internalCounters.push_back(10240);
        internalCounters.push_back(9096);
        internalCounters.push_back(9470);
        internalCounters.push_back(9844);
        internalCounters.push_back(10218);

        p.DefinePublicCounter("VSVALUInstCount", "VertexShader", "Average number of vector ALU instructions executed in the VS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "8ec604e4-63f5-e6b5-4558-c38f0b26d4b1" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9122);
        internalCounters.push_back(9496);
        internalCounters.push_back(9870);
        internalCounters.push_back(10244);
        internalCounters.push_back(9096);
        internalCounters.push_back(9470);
        internalCounters.push_back(9844);
        internalCounters.push_back(10218);

        p.DefinePublicCounter("VSSALUInstCount", "VertexShader", "Average number of scalar ALU instructions executed in the VS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "e3da0383-7322-7f65-8cf2-3ce641578e54" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9163);
        internalCounters.push_back(9537);
        internalCounters.push_back(9911);
        internalCounters.push_back(10285);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("VSVALUBusy", "VertexShader", "The percentage of GPUTime vector ALU instructions are being processed by the VS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "8b3572f7-fda0-eddf-6c93-2ab145b8754b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9163);
        internalCounters.push_back(9537);
        internalCounters.push_back(9911);
        internalCounters.push_back(10285);

        p.DefinePublicCounter("VSVALUBusyCycles", "VertexShader", "Number of GPU cycles where vector ALU instructions are being processed by the VS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4", "0af1686e-6d77-2f6e-2862-7bb8e869a776" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9176);
        internalCounters.push_back(9550);
        internalCounters.push_back(9924);
        internalCounters.push_back(10298);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("VSSALUBusy", "VertexShader", "The percentage of GPUTime scalar ALU instructions are being processed by the VS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "3bc8730c-e3bc-e2f0-7d24-36974064c25a" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(9176);
        internalCounters.push_back(9550);
        internalCounters.push_back(9924);
        internalCounters.push_back(10298);

        p.DefinePublicCounter("VSSALUBusyCycles", "VertexShader", "Number of GPU cycles where scalar ALU instructions are being processed by the VS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "357ac7cd-2e1c-dcb0-77f6-37527237f35b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(201);
        internalCounters.push_back(349);
        internalCounters.push_back(497);
        internalCounters.push_back(645);

        p.DefinePublicCounter("HSPatches", "HullShader", "The number of patches processed by the HS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4", "d1bbd27d-d591-4509-df52-d329fb73a98f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13606);
        internalCounters.push_back(13980);
        internalCounters.push_back(14354);
        internalCounters.push_back(14728);
        internalCounters.push_back(13584);
        internalCounters.push_back(13958);
        internalCounters.push_back(14332);
        internalCounters.push_back(14706);

        p.DefinePublicCounter("HSVALUInstCount", "HullShader", "Average number of vector ALU instructions executed in the HS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "786673bf-d58f-9895-3a37-9d6efb5e5804" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13610);
        internalCounters.push_back(13984);
        internalCounters.push_back(14358);
        internalCounters.push_back(14732);
        internalCounters.push_back(13584);
        internalCounters.push_back(13958);
        internalCounters.push_back(14332);
        internalCounters.push_back(14706);

        p.DefinePublicCounter("HSSALUInstCount", "HullShader", "Average number of scalar ALU instructions executed in the HS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "1af675c4-cb0b-c4c5-c131-2796750f683e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13651);
        internalCounters.push_back(14025);
        internalCounters.push_back(14399);
        internalCounters.push_back(14773);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("HSVALUBusy", "HullShader", "The percentage of GPUTime vector ALU instructions are being processed by the HS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "7880d192-8015-0311-d43e-fb0b7a4df179" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13651);
        internalCounters.push_back(14025);
        internalCounters.push_back(14399);
        internalCounters.push_back(14773);

        p.DefinePublicCounter("HSVALUBusyCycles", "HullShader", "Number of GPU cycles vector where ALU instructions are being processed by the HS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "3afb94e4-e937-5730-0cc9-41d3113ba012" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13664);
        internalCounters.push_back(14038);
        internalCounters.push_back(14412);
        internalCounters.push_back(14786);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("HSSALUBusy", "HullShader", "The percentage of GPUTime scalar ALU instructions are being processed by the HS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "34748a4b-9148-0b06-b7b9-5700d6631bde" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(13664);
        internalCounters.push_back(14038);
        internalCounters.push_back(14412);
        internalCounters.push_back(14786);

        p.DefinePublicCounter("HSSALUBusyCycles", "HullShader", "Number of GPU cycles where scalar ALU instructions are being processed by the HS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "9bceabf7-3f01-2fd9-7b1d-8fe46c729efc" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(105);
        internalCounters.push_back(253);
        internalCounters.push_back(401);
        internalCounters.push_back(549);

        p.DefinePublicCounter("GSPrimsIn", "GeometryShader", "The number of primitives passed into the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4", "20c29866-509a-aaab-2697-6b2c38f79953" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(116);
        internalCounters.push_back(264);
        internalCounters.push_back(412);
        internalCounters.push_back(560);
        internalCounters.push_back(97);
        internalCounters.push_back(245);
        internalCounters.push_back(393);
        internalCounters.push_back(541);

        p.DefinePublicCounter("GSVerticesOut", "GeometryShader", "The number of vertices output by the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero", "775b9736-319a-bd8a-48c9-68db9c91d978" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7622);
        internalCounters.push_back(7996);
        internalCounters.push_back(8370);
        internalCounters.push_back(8744);
        internalCounters.push_back(7600);
        internalCounters.push_back(7974);
        internalCounters.push_back(8348);
        internalCounters.push_back(8722);

        p.DefinePublicCounter("GSVALUInstCount", "GeometryShader", "Average number of vector ALU instructions executed in the GS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "21b12bfa-b8cd-2e71-a2d5-f9e9f1d65d61" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7626);
        internalCounters.push_back(8000);
        internalCounters.push_back(8374);
        internalCounters.push_back(8748);
        internalCounters.push_back(7600);
        internalCounters.push_back(7974);
        internalCounters.push_back(8348);
        internalCounters.push_back(8722);

        p.DefinePublicCounter("GSSALUInstCount", "GeometryShader", "Average number of scalar ALU instructions executed in the GS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "a8562594-d335-ca43-61bf-03b72d2b98a5" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7667);
        internalCounters.push_back(8041);
        internalCounters.push_back(8415);
        internalCounters.push_back(8789);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("GSVALUBusy", "GeometryShader", "The percentage of GPUTime vector ALU instructions are being processed by the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "228a4818-1e56-cebb-0720-3b2cdc057a6f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7667);
        internalCounters.push_back(8041);
        internalCounters.push_back(8415);
        internalCounters.push_back(8789);

        p.DefinePublicCounter("GSVALUBusyCycles", "GeometryShader", "Number of GPU cycles where vector ALU instructions are being processed by the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "be217edd-226f-bd97-9a48-46e2809b1933" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7680);
        internalCounters.push_back(8054);
        internalCounters.push_back(8428);
        internalCounters.push_back(8802);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("GSSALUBusy", "GeometryShader", "The percentage of GPUTime scalar ALU instructions are being processed by the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*", "f28ce300-800e-9822-39e4-f48528bdb935" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(7680);
        internalCounters.push_back(8054);
        internalCounters.push_back(8428);
        internalCounters.push_back(8802);

        p.DefinePublicCounter("GSSALUBusyCycles", "GeometryShader", "Number of GPU cycles where scalar ALU instructions are being processed by the GS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/", "b3eace7c-3bc4-0107-887f-923851dc8ea7" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(793);
        internalCounters.push_back(1085);
        internalCounters.push_back(1377);
        internalCounters.push_back(1669);
        internalCounters.push_back(797);
        internalCounters.push_back(1089);
        internalCounters.push_back(1381);
        internalCounters.push_back(1673);
        internalCounters.push_back(749);
        internalCounters.push_back(1041);
        internalCounters.push_back(1333);
        internalCounters.push_back(1625);
        internalCounters.push_back(761);
        internalCounters.push_back(1053);
        internalCounters.push_back(1345);
        internalCounters.push_back(1637);
        internalCounters.push_back(750);
        internalCounters.push_back(1042);
        internalCounters.push_back(1334);
        internalCounters.push_back(1626);
        internalCounters.push_back(762);
        internalCounters.push_back(1054);
        internalCounters.push_back(1346);
        internalCounters.push_back(1638);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PrimitiveAssemblyBusy", "Timing", "The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max,24,/,(100),*,(100),min", "54ac5640-c4d7-95e2-20e0-6a9fdfc07333" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(793);
        internalCounters.push_back(1085);
        internalCounters.push_back(1377);
        internalCounters.push_back(1669);
        internalCounters.push_back(797);
        internalCounters.push_back(1089);
        internalCounters.push_back(1381);
        internalCounters.push_back(1673);
        internalCounters.push_back(749);
        internalCounters.push_back(1041);
        internalCounters.push_back(1333);
        internalCounters.push_back(1625);
        internalCounters.push_back(761);
        internalCounters.push_back(1053);
        internalCounters.push_back(1345);
        internalCounters.push_back(1637);
        internalCounters.push_back(750);
        internalCounters.push_back(1042);
        internalCounters.push_back(1334);
        internalCounters.push_back(1626);
        internalCounters.push_back(762);
        internalCounters.push_back(1054);
        internalCounters.push_back(1346);
        internalCounters.push_back(1638);

        p.DefinePublicCounter("PrimitiveAssemblyBusyCycles", "Timing", "Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max", "99777f2d-9626-c78a-a97c-c4505eba1e5f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(696);
        internalCounters.push_back(988);
        internalCounters.push_back(1280);
        internalCounters.push_back(1572);

        p.DefinePublicCounter("PrimitivesIn", "PrimitiveAssembly", "The number of primitives received by the hardware. This includes primitives generated by tessellation.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4", "a515b80d-75c3-c7d2-0d2f-d7766b4759a6" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(702);
        internalCounters.push_back(994);
        internalCounters.push_back(1286);
        internalCounters.push_back(1578);
        internalCounters.push_back(742);
        internalCounters.push_back(1034);
        internalCounters.push_back(1326);
        internalCounters.push_back(1618);
        internalCounters.push_back(743);
        internalCounters.push_back(1035);
        internalCounters.push_back(1327);
        internalCounters.push_back(1619);
        internalCounters.push_back(744);
        internalCounters.push_back(1036);
        internalCounters.push_back(1328);
        internalCounters.push_back(1620);
        internalCounters.push_back(745);
        internalCounters.push_back(1037);
        internalCounters.push_back(1329);
        internalCounters.push_back(1621);

        p.DefinePublicCounter("CulledPrims", "PrimitiveAssembly", "The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,+,2,+,3,+,4,+,5,+,6,+,7,+,8,+,9,+,10,+,11,+,12,+,13,+,14,+,15,+,16,+,17,+,18,+,19,+", "589bdf55-9192-280a-41c3-584bc94f2562" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(709);
        internalCounters.push_back(1001);
        internalCounters.push_back(1293);
        internalCounters.push_back(1585);

        p.DefinePublicCounter("ClippedPrims", "PrimitiveAssembly", "The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4", "5ef6f9d5-155e-5baa-163f-8359d9ea9bbf" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(797);
        internalCounters.push_back(1089);
        internalCounters.push_back(1381);
        internalCounters.push_back(1673);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PAStalledOnRasterizer", "PrimitiveAssembly", "Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,max,2,max,3,max,4,/,(100),*", "6f9f416b-53c1-0457-f88c-7b6ba8973974" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(797);
        internalCounters.push_back(1089);
        internalCounters.push_back(1381);
        internalCounters.push_back(1673);

        p.DefinePublicCounter("PAStalledOnRasterizerCycles", "PrimitiveAssembly", "Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,max,2,max,3,max", "7a8c492a-c566-9328-6805-760dbff5c0f2" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16584);
        internalCounters.push_back(16792);
        internalCounters.push_back(17000);
        internalCounters.push_back(17208);
        internalCounters.push_back(16589);
        internalCounters.push_back(16797);
        internalCounters.push_back(17005);
        internalCounters.push_back(17213);
        internalCounters.push_back(16594);
        internalCounters.push_back(16802);
        internalCounters.push_back(17010);
        internalCounters.push_back(17218);
        internalCounters.push_back(16599);
        internalCounters.push_back(16807);
        internalCounters.push_back(17015);
        internalCounters.push_back(17223);

        p.DefinePublicCounter("PSPixelsOut", "PixelShader", "Pixels exported from shader to colour buffers. Does not include killed or alpha tested pixels; if there are multiple rendertargets, each rendertarget receives one export, so this will be 2 for 1 pixel written to two RTs.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,8,9,10,11,sum4,12,13,14,15,sum4,sum4", "181f5ca1-ec90-61a3-fd73-d8e3722af9e9" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16586);
        internalCounters.push_back(16794);
        internalCounters.push_back(17002);
        internalCounters.push_back(17210);
        internalCounters.push_back(16591);
        internalCounters.push_back(16799);
        internalCounters.push_back(17007);
        internalCounters.push_back(17215);
        internalCounters.push_back(16596);
        internalCounters.push_back(16804);
        internalCounters.push_back(17012);
        internalCounters.push_back(17220);
        internalCounters.push_back(16601);
        internalCounters.push_back(16809);
        internalCounters.push_back(17017);
        internalCounters.push_back(17225);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PSExportStalls", "PixelShader", "Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the colour buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,max,13,max,14,max,15,max,16,/,(100),*", "996ce2b4-55ce-25c1-afb7-575bd9b4ce90" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(16586);
        internalCounters.push_back(16794);
        internalCounters.push_back(17002);
        internalCounters.push_back(17210);
        internalCounters.push_back(16591);
        internalCounters.push_back(16799);
        internalCounters.push_back(17007);
        internalCounters.push_back(17215);
        internalCounters.push_back(16596);
        internalCounters.push_back(16804);
        internalCounters.push_back(17012);
        internalCounters.push_back(17220);
        internalCounters.push_back(16601);
        internalCounters.push_back(16809);
        internalCounters.push_back(17017);
        internalCounters.push_back(17225);

        p.DefinePublicCounter("PSExportStallsCycles", "PixelShader", "Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the colour buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,max,13,max,14,max,15,max", "5e58e8ae-1854-e662-b460-a4a31f7fb493" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10614);
        internalCounters.push_back(10988);
        internalCounters.push_back(11362);
        internalCounters.push_back(11736);
        internalCounters.push_back(10592);
        internalCounters.push_back(10966);
        internalCounters.push_back(11340);
        internalCounters.push_back(11714);

        p.DefinePublicCounter("PSVALUInstCount", "PixelShader", "Average number of vector ALU instructions executed in the PS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "eb74389e-435c-4137-ecf1-39eb5bc1cbfe" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10618);
        internalCounters.push_back(10992);
        internalCounters.push_back(11366);
        internalCounters.push_back(11740);
        internalCounters.push_back(10592);
        internalCounters.push_back(10966);
        internalCounters.push_back(11340);
        internalCounters.push_back(11714);

        p.DefinePublicCounter("PSSALUInstCount", "PixelShader", "Average number of scalar ALU instructions executed in the PS. Affected by flow control.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4,4,5,6,7,sum4,/", "e6a06580-8a82-96d6-976c-acc121fc5516" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10659);
        internalCounters.push_back(11033);
        internalCounters.push_back(11407);
        internalCounters.push_back(11781);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PSVALUBusy", "PixelShader", "The percentage of GPUTime vector ALU instructions are being processed by the PS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*", "6ce6fef7-8e33-10b4-f351-af755e177e85" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10659);
        internalCounters.push_back(11033);
        internalCounters.push_back(11407);
        internalCounters.push_back(11781);

        p.DefinePublicCounter("PSVALUBusyCycles", "PixelShader", "Number of GPU cycles where vector ALU instructions are being processed by the PS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "1e276f86-cd2a-72e7-fc9d-004f666f2981" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10672);
        internalCounters.push_back(11046);
        internalCounters.push_back(11420);
        internalCounters.push_back(11794);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("PSSALUBusy", "PixelShader", "The percentage of GPUTime scalar ALU instructions are being processed by the PS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*", "2ff9f34f-e94b-af4d-18c2-5fbbf6d1727a" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(10672);
        internalCounters.push_back(11046);
        internalCounters.push_back(11420);
        internalCounters.push_back(11794);

        p.DefinePublicCounter("PSSALUBusyCycles", "PixelShader", "Number of GPU cycles where scalar ALU instructions are being processed by the PS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/", "29808906-f128-b078-fc79-820a4b3b3b8d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSThreadGroups", "ComputeShader", "Total number of thread groups.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,sum8", "8ce3fc80-56b2-97f9-8e70-2e8c747cea68" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3866);
        internalCounters.push_back(4062);
        internalCounters.push_back(4258);
        internalCounters.push_back(4454);
        internalCounters.push_back(3872);
        internalCounters.push_back(4068);
        internalCounters.push_back(4264);
        internalCounters.push_back(4460);

        p.DefinePublicCounter("CSWavefronts", "ComputeShader", "The total number of wavefronts used for the CS.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,sum8", "42379c6e-369b-c237-8b25-cdb9cdc65c4d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);
        internalCounters.push_back(4618);
        internalCounters.push_back(4992);
        internalCounters.push_back(5366);
        internalCounters.push_back(5740);

        p.DefinePublicCounter("CSThreads", "ComputeShader", "The number of CS threads processed by the hardware.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,4,5,6,7,sum8,8,9,10,11,sum4,ifnotzero", "7a648013-6eac-2665-ac36-13c6f4ac9c26" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15102);
        internalCounters.push_back(15476);
        internalCounters.push_back(15850);
        internalCounters.push_back(16224);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSVALUInsts", "ComputeShader", "The average number of vector ALU instructions executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,12,13,14,15,sum8,ifnotzero", "376cb1cc-5a40-9d1d-404c-f1736c0c5084" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15161);
        internalCounters.push_back(15535);
        internalCounters.push_back(15909);
        internalCounters.push_back(16283);
        internalCounters.push_back(15147);
        internalCounters.push_back(15521);
        internalCounters.push_back(15895);
        internalCounters.push_back(16269);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSVALUUtilization", "ComputeShader", "The percentage of active vector ALU threads in a wave. A lower number can mean either more thread divergence in a wave or that the work-group size is not a multiple of 64. Value range: 0% (bad), 100% (ideal - no thread divergence).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,(64),*,/,(100),*,8,9,10,11,12,13,14,15,sum8,ifnotzero,(100),min", "4476879e-cdc0-d602-b24e-9b4a8d38438f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15106);
        internalCounters.push_back(15480);
        internalCounters.push_back(15854);
        internalCounters.push_back(16228);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSSALUInsts", "ComputeShader", "The average number of scalar ALU instructions executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,12,13,14,15,sum8,ifnotzero", "eb211144-8136-ff86-e8bf-4d0493a904cb" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15104);
        internalCounters.push_back(15478);
        internalCounters.push_back(15852);
        internalCounters.push_back(16226);
        internalCounters.push_back(17505);
        internalCounters.push_back(17624);
        internalCounters.push_back(17743);
        internalCounters.push_back(17862);
        internalCounters.push_back(17981);
        internalCounters.push_back(18100);
        internalCounters.push_back(18219);
        internalCounters.push_back(18338);
        internalCounters.push_back(18457);
        internalCounters.push_back(18576);
        internalCounters.push_back(18695);
        internalCounters.push_back(18814);
        internalCounters.push_back(18933);
        internalCounters.push_back(19052);
        internalCounters.push_back(19171);
        internalCounters.push_back(19290);
        internalCounters.push_back(19409);
        internalCounters.push_back(19528);
        internalCounters.push_back(19647);
        internalCounters.push_back(19766);
        internalCounters.push_back(19885);
        internalCounters.push_back(20004);
        internalCounters.push_back(20123);
        internalCounters.push_back(20242);
        internalCounters.push_back(20361);
        internalCounters.push_back(20480);
        internalCounters.push_back(20599);
        internalCounters.push_back(20718);
        internalCounters.push_back(20837);
        internalCounters.push_back(20956);
        internalCounters.push_back(21075);
        internalCounters.push_back(21194);
        internalCounters.push_back(21313);
        internalCounters.push_back(21432);
        internalCounters.push_back(21551);
        internalCounters.push_back(21670);
        internalCounters.push_back(21789);
        internalCounters.push_back(21908);
        internalCounters.push_back(22027);
        internalCounters.push_back(22146);
        internalCounters.push_back(22265);
        internalCounters.push_back(22384);
        internalCounters.push_back(22503);
        internalCounters.push_back(22622);
        internalCounters.push_back(22741);
        internalCounters.push_back(22860);
        internalCounters.push_back(22979);
        internalCounters.push_back(23098);
        internalCounters.push_back(23217);
        internalCounters.push_back(23336);
        internalCounters.push_back(23455);
        internalCounters.push_back(23574);
        internalCounters.push_back(23693);
        internalCounters.push_back(23812);
        internalCounters.push_back(23931);
        internalCounters.push_back(24050);
        internalCounters.push_back(24169);
        internalCounters.push_back(24288);
        internalCounters.push_back(24407);
        internalCounters.push_back(24526);
        internalCounters.push_back(24645);
        internalCounters.push_back(24764);
        internalCounters.push_back(24883);
        internalCounters.push_back(25002);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSVFetchInsts", "ComputeShader", "The average number of vector fetch instructions from the video memory executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,sum64,-,68,69,70,71,sum4,/,72,73,74,75,76,77,78,79,sum8,ifnotzero", "3e2829c0-6215-783b-c271-6d57ff2c520e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15107);
        internalCounters.push_back(15481);
        internalCounters.push_back(15855);
        internalCounters.push_back(16229);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSSFetchInsts", "ComputeShader", "The average number of scalar fetch instructions from the video memory executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,12,13,14,15,sum8,ifnotzero", "da09171c-6a0a-584f-fddc-dc5062d63a3e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15103);
        internalCounters.push_back(15477);
        internalCounters.push_back(15851);
        internalCounters.push_back(16225);
        internalCounters.push_back(17506);
        internalCounters.push_back(17625);
        internalCounters.push_back(17744);
        internalCounters.push_back(17863);
        internalCounters.push_back(17982);
        internalCounters.push_back(18101);
        internalCounters.push_back(18220);
        internalCounters.push_back(18339);
        internalCounters.push_back(18458);
        internalCounters.push_back(18577);
        internalCounters.push_back(18696);
        internalCounters.push_back(18815);
        internalCounters.push_back(18934);
        internalCounters.push_back(19053);
        internalCounters.push_back(19172);
        internalCounters.push_back(19291);
        internalCounters.push_back(19410);
        internalCounters.push_back(19529);
        internalCounters.push_back(19648);
        internalCounters.push_back(19767);
        internalCounters.push_back(19886);
        internalCounters.push_back(20005);
        internalCounters.push_back(20124);
        internalCounters.push_back(20243);
        internalCounters.push_back(20362);
        internalCounters.push_back(20481);
        internalCounters.push_back(20600);
        internalCounters.push_back(20719);
        internalCounters.push_back(20838);
        internalCounters.push_back(20957);
        internalCounters.push_back(21076);
        internalCounters.push_back(21195);
        internalCounters.push_back(21314);
        internalCounters.push_back(21433);
        internalCounters.push_back(21552);
        internalCounters.push_back(21671);
        internalCounters.push_back(21790);
        internalCounters.push_back(21909);
        internalCounters.push_back(22028);
        internalCounters.push_back(22147);
        internalCounters.push_back(22266);
        internalCounters.push_back(22385);
        internalCounters.push_back(22504);
        internalCounters.push_back(22623);
        internalCounters.push_back(22742);
        internalCounters.push_back(22861);
        internalCounters.push_back(22980);
        internalCounters.push_back(23099);
        internalCounters.push_back(23218);
        internalCounters.push_back(23337);
        internalCounters.push_back(23456);
        internalCounters.push_back(23575);
        internalCounters.push_back(23694);
        internalCounters.push_back(23813);
        internalCounters.push_back(23932);
        internalCounters.push_back(24051);
        internalCounters.push_back(24170);
        internalCounters.push_back(24289);
        internalCounters.push_back(24408);
        internalCounters.push_back(24527);
        internalCounters.push_back(24646);
        internalCounters.push_back(24765);
        internalCounters.push_back(24884);
        internalCounters.push_back(25003);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSVWriteInsts", "ComputeShader", "The average number of vector write instructions to the video memory executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,sum64,-,68,69,70,71,sum4,/,72,73,74,75,76,77,78,79,sum8,ifnotzero", "43438c22-e910-b377-b767-b32902e0df0d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15108);
        internalCounters.push_back(15482);
        internalCounters.push_back(15856);
        internalCounters.push_back(16230);
        internalCounters.push_back(15109);
        internalCounters.push_back(15483);
        internalCounters.push_back(15857);
        internalCounters.push_back(16231);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSFlatVMemInsts", "ComputeShader", "The average number of FLAT instructions that read from or write to the video memory executed per work item (affected by flow control). Includes FLAT instructions that read from or write to scratch.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,-,8,9,10,11,sum4,/,12,13,14,15,16,17,18,19,sum8,ifnotzero", "2570b477-13e3-f5b6-e6ff-7159373bc74d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15147);
        internalCounters.push_back(15521);
        internalCounters.push_back(15895);
        internalCounters.push_back(16269);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSVALUBusy", "ComputeShader", "The percentage of GPUTime vector ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,sum4,(4),*,NUM_SIMDS,/,4,/,(100),*,5,6,7,8,9,10,11,12,sum8,ifnotzero", "f1e64815-f6a8-c277-d4f9-d054b443e205" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15147);
        internalCounters.push_back(15521);
        internalCounters.push_back(15895);
        internalCounters.push_back(16269);

        p.DefinePublicCounter("CSVALUBusyCycles", "ComputeShader", "Number of GPU cycles where vector ALU instructions are processed.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,/", "2d0d5852-2658-eb73-68d2-f23f7118c9c3" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15160);
        internalCounters.push_back(15534);
        internalCounters.push_back(15908);
        internalCounters.push_back(16282);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSSALUBusy", "ComputeShader", "The percentage of GPUTime scalar ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,4,/,(100),*,5,6,7,8,9,10,11,12,sum8,ifnotzero", "3fc35f4e-9882-94e3-6f5f-4e81cd97082a" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15160);
        internalCounters.push_back(15534);
        internalCounters.push_back(15908);
        internalCounters.push_back(16282);

        p.DefinePublicCounter("CSSALUBusyCycles", "ComputeShader", "Number of GPU cycles where scalar ALU instructions are processed.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/", "de58f8fc-8ed4-a799-648d-62ded7b1c4c4" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17419);
        internalCounters.push_back(17538);
        internalCounters.push_back(17657);
        internalCounters.push_back(17776);
        internalCounters.push_back(17895);
        internalCounters.push_back(18014);
        internalCounters.push_back(18133);
        internalCounters.push_back(18252);
        internalCounters.push_back(18371);
        internalCounters.push_back(18490);
        internalCounters.push_back(18609);
        internalCounters.push_back(18728);
        internalCounters.push_back(18847);
        internalCounters.push_back(18966);
        internalCounters.push_back(19085);
        internalCounters.push_back(19204);
        internalCounters.push_back(19323);
        internalCounters.push_back(19442);
        internalCounters.push_back(19561);
        internalCounters.push_back(19680);
        internalCounters.push_back(19799);
        internalCounters.push_back(19918);
        internalCounters.push_back(20037);
        internalCounters.push_back(20156);
        internalCounters.push_back(20275);
        internalCounters.push_back(20394);
        internalCounters.push_back(20513);
        internalCounters.push_back(20632);
        internalCounters.push_back(20751);
        internalCounters.push_back(20870);
        internalCounters.push_back(20989);
        internalCounters.push_back(21108);
        internalCounters.push_back(21227);
        internalCounters.push_back(21346);
        internalCounters.push_back(21465);
        internalCounters.push_back(21584);
        internalCounters.push_back(21703);
        internalCounters.push_back(21822);
        internalCounters.push_back(21941);
        internalCounters.push_back(22060);
        internalCounters.push_back(22179);
        internalCounters.push_back(22298);
        internalCounters.push_back(22417);
        internalCounters.push_back(22536);
        internalCounters.push_back(22655);
        internalCounters.push_back(22774);
        internalCounters.push_back(22893);
        internalCounters.push_back(23012);
        internalCounters.push_back(23131);
        internalCounters.push_back(23250);
        internalCounters.push_back(23369);
        internalCounters.push_back(23488);
        internalCounters.push_back(23607);
        internalCounters.push_back(23726);
        internalCounters.push_back(23845);
        internalCounters.push_back(23964);
        internalCounters.push_back(24083);
        internalCounters.push_back(24202);
        internalCounters.push_back(24321);
        internalCounters.push_back(24440);
        internalCounters.push_back(24559);
        internalCounters.push_back(24678);
        internalCounters.push_back(24797);
        internalCounters.push_back(24916);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSMemUnitBusy", "ComputeShader", "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*,65,66,67,68,69,70,71,72,sum8,ifnotzero", "42ab96e1-0a24-96c8-c4ff-098fa267d78e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17419);
        internalCounters.push_back(17538);
        internalCounters.push_back(17657);
        internalCounters.push_back(17776);
        internalCounters.push_back(17895);
        internalCounters.push_back(18014);
        internalCounters.push_back(18133);
        internalCounters.push_back(18252);
        internalCounters.push_back(18371);
        internalCounters.push_back(18490);
        internalCounters.push_back(18609);
        internalCounters.push_back(18728);
        internalCounters.push_back(18847);
        internalCounters.push_back(18966);
        internalCounters.push_back(19085);
        internalCounters.push_back(19204);
        internalCounters.push_back(19323);
        internalCounters.push_back(19442);
        internalCounters.push_back(19561);
        internalCounters.push_back(19680);
        internalCounters.push_back(19799);
        internalCounters.push_back(19918);
        internalCounters.push_back(20037);
        internalCounters.push_back(20156);
        internalCounters.push_back(20275);
        internalCounters.push_back(20394);
        internalCounters.push_back(20513);
        internalCounters.push_back(20632);
        internalCounters.push_back(20751);
        internalCounters.push_back(20870);
        internalCounters.push_back(20989);
        internalCounters.push_back(21108);
        internalCounters.push_back(21227);
        internalCounters.push_back(21346);
        internalCounters.push_back(21465);
        internalCounters.push_back(21584);
        internalCounters.push_back(21703);
        internalCounters.push_back(21822);
        internalCounters.push_back(21941);
        internalCounters.push_back(22060);
        internalCounters.push_back(22179);
        internalCounters.push_back(22298);
        internalCounters.push_back(22417);
        internalCounters.push_back(22536);
        internalCounters.push_back(22655);
        internalCounters.push_back(22774);
        internalCounters.push_back(22893);
        internalCounters.push_back(23012);
        internalCounters.push_back(23131);
        internalCounters.push_back(23250);
        internalCounters.push_back(23369);
        internalCounters.push_back(23488);
        internalCounters.push_back(23607);
        internalCounters.push_back(23726);
        internalCounters.push_back(23845);
        internalCounters.push_back(23964);
        internalCounters.push_back(24083);
        internalCounters.push_back(24202);
        internalCounters.push_back(24321);
        internalCounters.push_back(24440);
        internalCounters.push_back(24559);
        internalCounters.push_back(24678);
        internalCounters.push_back(24797);
        internalCounters.push_back(24916);

        p.DefinePublicCounter("CSMemUnitBusyCycles", "ComputeShader", "Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64", "39d5687f-c727-7c0c-af82-bb711d3897ed" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28674);
        internalCounters.push_back(28759);
        internalCounters.push_back(28844);
        internalCounters.push_back(28929);
        internalCounters.push_back(29014);
        internalCounters.push_back(29099);
        internalCounters.push_back(29184);
        internalCounters.push_back(29269);
        internalCounters.push_back(29354);
        internalCounters.push_back(29439);
        internalCounters.push_back(29524);
        internalCounters.push_back(29609);
        internalCounters.push_back(29694);
        internalCounters.push_back(29779);
        internalCounters.push_back(29864);
        internalCounters.push_back(29949);
        internalCounters.push_back(30034);
        internalCounters.push_back(30119);
        internalCounters.push_back(30204);
        internalCounters.push_back(30289);
        internalCounters.push_back(30374);
        internalCounters.push_back(30459);
        internalCounters.push_back(30544);
        internalCounters.push_back(30629);
        internalCounters.push_back(30714);
        internalCounters.push_back(30799);
        internalCounters.push_back(30884);
        internalCounters.push_back(30969);
        internalCounters.push_back(31054);
        internalCounters.push_back(31139);
        internalCounters.push_back(31224);
        internalCounters.push_back(31309);
        internalCounters.push_back(31394);
        internalCounters.push_back(31479);
        internalCounters.push_back(31564);
        internalCounters.push_back(31649);
        internalCounters.push_back(31734);
        internalCounters.push_back(31819);
        internalCounters.push_back(31904);
        internalCounters.push_back(31989);
        internalCounters.push_back(32074);
        internalCounters.push_back(32159);
        internalCounters.push_back(32244);
        internalCounters.push_back(32329);
        internalCounters.push_back(32414);
        internalCounters.push_back(32499);
        internalCounters.push_back(32584);
        internalCounters.push_back(32669);
        internalCounters.push_back(32754);
        internalCounters.push_back(32839);
        internalCounters.push_back(32924);
        internalCounters.push_back(33009);
        internalCounters.push_back(33094);
        internalCounters.push_back(33179);
        internalCounters.push_back(33264);
        internalCounters.push_back(33349);
        internalCounters.push_back(33434);
        internalCounters.push_back(33519);
        internalCounters.push_back(33604);
        internalCounters.push_back(33689);
        internalCounters.push_back(33774);
        internalCounters.push_back(33859);
        internalCounters.push_back(33944);
        internalCounters.push_back(34029);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSMemUnitStalled", "ComputeShader", "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*,65,66,67,68,69,70,71,72,sum8,ifnotzero", "f18e8679-1511-d533-d9ee-4365197f7d0c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28674);
        internalCounters.push_back(28759);
        internalCounters.push_back(28844);
        internalCounters.push_back(28929);
        internalCounters.push_back(29014);
        internalCounters.push_back(29099);
        internalCounters.push_back(29184);
        internalCounters.push_back(29269);
        internalCounters.push_back(29354);
        internalCounters.push_back(29439);
        internalCounters.push_back(29524);
        internalCounters.push_back(29609);
        internalCounters.push_back(29694);
        internalCounters.push_back(29779);
        internalCounters.push_back(29864);
        internalCounters.push_back(29949);
        internalCounters.push_back(30034);
        internalCounters.push_back(30119);
        internalCounters.push_back(30204);
        internalCounters.push_back(30289);
        internalCounters.push_back(30374);
        internalCounters.push_back(30459);
        internalCounters.push_back(30544);
        internalCounters.push_back(30629);
        internalCounters.push_back(30714);
        internalCounters.push_back(30799);
        internalCounters.push_back(30884);
        internalCounters.push_back(30969);
        internalCounters.push_back(31054);
        internalCounters.push_back(31139);
        internalCounters.push_back(31224);
        internalCounters.push_back(31309);
        internalCounters.push_back(31394);
        internalCounters.push_back(31479);
        internalCounters.push_back(31564);
        internalCounters.push_back(31649);
        internalCounters.push_back(31734);
        internalCounters.push_back(31819);
        internalCounters.push_back(31904);
        internalCounters.push_back(31989);
        internalCounters.push_back(32074);
        internalCounters.push_back(32159);
        internalCounters.push_back(32244);
        internalCounters.push_back(32329);
        internalCounters.push_back(32414);
        internalCounters.push_back(32499);
        internalCounters.push_back(32584);
        internalCounters.push_back(32669);
        internalCounters.push_back(32754);
        internalCounters.push_back(32839);
        internalCounters.push_back(32924);
        internalCounters.push_back(33009);
        internalCounters.push_back(33094);
        internalCounters.push_back(33179);
        internalCounters.push_back(33264);
        internalCounters.push_back(33349);
        internalCounters.push_back(33434);
        internalCounters.push_back(33519);
        internalCounters.push_back(33604);
        internalCounters.push_back(33689);
        internalCounters.push_back(33774);
        internalCounters.push_back(33859);
        internalCounters.push_back(33944);
        internalCounters.push_back(34029);

        p.DefinePublicCounter("CSMemUnitStalledCycles", "ComputeShader", "Number of GPU cycles the memory unit is stalled. Try reducing the number or size of fetches and writes if possible.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64", "51991c84-ed2b-bf31-c4ab-8f8e9eb8f29f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28728);
        internalCounters.push_back(28813);
        internalCounters.push_back(28898);
        internalCounters.push_back(28983);
        internalCounters.push_back(29068);
        internalCounters.push_back(29153);
        internalCounters.push_back(29238);
        internalCounters.push_back(29323);
        internalCounters.push_back(29408);
        internalCounters.push_back(29493);
        internalCounters.push_back(29578);
        internalCounters.push_back(29663);
        internalCounters.push_back(29748);
        internalCounters.push_back(29833);
        internalCounters.push_back(29918);
        internalCounters.push_back(30003);
        internalCounters.push_back(30088);
        internalCounters.push_back(30173);
        internalCounters.push_back(30258);
        internalCounters.push_back(30343);
        internalCounters.push_back(30428);
        internalCounters.push_back(30513);
        internalCounters.push_back(30598);
        internalCounters.push_back(30683);
        internalCounters.push_back(30768);
        internalCounters.push_back(30853);
        internalCounters.push_back(30938);
        internalCounters.push_back(31023);
        internalCounters.push_back(31108);
        internalCounters.push_back(31193);
        internalCounters.push_back(31278);
        internalCounters.push_back(31363);
        internalCounters.push_back(31448);
        internalCounters.push_back(31533);
        internalCounters.push_back(31618);
        internalCounters.push_back(31703);
        internalCounters.push_back(31788);
        internalCounters.push_back(31873);
        internalCounters.push_back(31958);
        internalCounters.push_back(32043);
        internalCounters.push_back(32128);
        internalCounters.push_back(32213);
        internalCounters.push_back(32298);
        internalCounters.push_back(32383);
        internalCounters.push_back(32468);
        internalCounters.push_back(32553);
        internalCounters.push_back(32638);
        internalCounters.push_back(32723);
        internalCounters.push_back(32808);
        internalCounters.push_back(32893);
        internalCounters.push_back(32978);
        internalCounters.push_back(33063);
        internalCounters.push_back(33148);
        internalCounters.push_back(33233);
        internalCounters.push_back(33318);
        internalCounters.push_back(33403);
        internalCounters.push_back(33488);
        internalCounters.push_back(33573);
        internalCounters.push_back(33658);
        internalCounters.push_back(33743);
        internalCounters.push_back(33828);
        internalCounters.push_back(33913);
        internalCounters.push_back(33998);
        internalCounters.push_back(34083);
        internalCounters.push_back(28737);
        internalCounters.push_back(28822);
        internalCounters.push_back(28907);
        internalCounters.push_back(28992);
        internalCounters.push_back(29077);
        internalCounters.push_back(29162);
        internalCounters.push_back(29247);
        internalCounters.push_back(29332);
        internalCounters.push_back(29417);
        internalCounters.push_back(29502);
        internalCounters.push_back(29587);
        internalCounters.push_back(29672);
        internalCounters.push_back(29757);
        internalCounters.push_back(29842);
        internalCounters.push_back(29927);
        internalCounters.push_back(30012);
        internalCounters.push_back(30097);
        internalCounters.push_back(30182);
        internalCounters.push_back(30267);
        internalCounters.push_back(30352);
        internalCounters.push_back(30437);
        internalCounters.push_back(30522);
        internalCounters.push_back(30607);
        internalCounters.push_back(30692);
        internalCounters.push_back(30777);
        internalCounters.push_back(30862);
        internalCounters.push_back(30947);
        internalCounters.push_back(31032);
        internalCounters.push_back(31117);
        internalCounters.push_back(31202);
        internalCounters.push_back(31287);
        internalCounters.push_back(31372);
        internalCounters.push_back(31457);
        internalCounters.push_back(31542);
        internalCounters.push_back(31627);
        internalCounters.push_back(31712);
        internalCounters.push_back(31797);
        internalCounters.push_back(31882);
        internalCounters.push_back(31967);
        internalCounters.push_back(32052);
        internalCounters.push_back(32137);
        internalCounters.push_back(32222);
        internalCounters.push_back(32307);
        internalCounters.push_back(32392);
        internalCounters.push_back(32477);
        internalCounters.push_back(32562);
        internalCounters.push_back(32647);
        internalCounters.push_back(32732);
        internalCounters.push_back(32817);
        internalCounters.push_back(32902);
        internalCounters.push_back(32987);
        internalCounters.push_back(33072);
        internalCounters.push_back(33157);
        internalCounters.push_back(33242);
        internalCounters.push_back(33327);
        internalCounters.push_back(33412);
        internalCounters.push_back(33497);
        internalCounters.push_back(33582);
        internalCounters.push_back(33667);
        internalCounters.push_back(33752);
        internalCounters.push_back(33837);
        internalCounters.push_back(33922);
        internalCounters.push_back(34007);
        internalCounters.push_back(34092);
        internalCounters.push_back(28738);
        internalCounters.push_back(28823);
        internalCounters.push_back(28908);
        internalCounters.push_back(28993);
        internalCounters.push_back(29078);
        internalCounters.push_back(29163);
        internalCounters.push_back(29248);
        internalCounters.push_back(29333);
        internalCounters.push_back(29418);
        internalCounters.push_back(29503);
        internalCounters.push_back(29588);
        internalCounters.push_back(29673);
        internalCounters.push_back(29758);
        internalCounters.push_back(29843);
        internalCounters.push_back(29928);
        internalCounters.push_back(30013);
        internalCounters.push_back(30098);
        internalCounters.push_back(30183);
        internalCounters.push_back(30268);
        internalCounters.push_back(30353);
        internalCounters.push_back(30438);
        internalCounters.push_back(30523);
        internalCounters.push_back(30608);
        internalCounters.push_back(30693);
        internalCounters.push_back(30778);
        internalCounters.push_back(30863);
        internalCounters.push_back(30948);
        internalCounters.push_back(31033);
        internalCounters.push_back(31118);
        internalCounters.push_back(31203);
        internalCounters.push_back(31288);
        internalCounters.push_back(31373);
        internalCounters.push_back(31458);
        internalCounters.push_back(31543);
        internalCounters.push_back(31628);
        internalCounters.push_back(31713);
        internalCounters.push_back(31798);
        internalCounters.push_back(31883);
        internalCounters.push_back(31968);
        internalCounters.push_back(32053);
        internalCounters.push_back(32138);
        internalCounters.push_back(32223);
        internalCounters.push_back(32308);
        internalCounters.push_back(32393);
        internalCounters.push_back(32478);
        internalCounters.push_back(32563);
        internalCounters.push_back(32648);
        internalCounters.push_back(32733);
        internalCounters.push_back(32818);
        internalCounters.push_back(32903);
        internalCounters.push_back(32988);
        internalCounters.push_back(33073);
        internalCounters.push_back(33158);
        internalCounters.push_back(33243);
        internalCounters.push_back(33328);
        internalCounters.push_back(33413);
        internalCounters.push_back(33498);
        internalCounters.push_back(33583);
        internalCounters.push_back(33668);
        internalCounters.push_back(33753);
        internalCounters.push_back(33838);
        internalCounters.push_back(33923);
        internalCounters.push_back(34008);
        internalCounters.push_back(34093);
        internalCounters.push_back(28739);
        internalCounters.push_back(28824);
        internalCounters.push_back(28909);
        internalCounters.push_back(28994);
        internalCounters.push_back(29079);
        internalCounters.push_back(29164);
        internalCounters.push_back(29249);
        internalCounters.push_back(29334);
        internalCounters.push_back(29419);
        internalCounters.push_back(29504);
        internalCounters.push_back(29589);
        internalCounters.push_back(29674);
        internalCounters.push_back(29759);
        internalCounters.push_back(29844);
        internalCounters.push_back(29929);
        internalCounters.push_back(30014);
        internalCounters.push_back(30099);
        internalCounters.push_back(30184);
        internalCounters.push_back(30269);
        internalCounters.push_back(30354);
        internalCounters.push_back(30439);
        internalCounters.push_back(30524);
        internalCounters.push_back(30609);
        internalCounters.push_back(30694);
        internalCounters.push_back(30779);
        internalCounters.push_back(30864);
        internalCounters.push_back(30949);
        internalCounters.push_back(31034);
        internalCounters.push_back(31119);
        internalCounters.push_back(31204);
        internalCounters.push_back(31289);
        internalCounters.push_back(31374);
        internalCounters.push_back(31459);
        internalCounters.push_back(31544);
        internalCounters.push_back(31629);
        internalCounters.push_back(31714);
        internalCounters.push_back(31799);
        internalCounters.push_back(31884);
        internalCounters.push_back(31969);
        internalCounters.push_back(32054);
        internalCounters.push_back(32139);
        internalCounters.push_back(32224);
        internalCounters.push_back(32309);
        internalCounters.push_back(32394);
        internalCounters.push_back(32479);
        internalCounters.push_back(32564);
        internalCounters.push_back(32649);
        internalCounters.push_back(32734);
        internalCounters.push_back(32819);
        internalCounters.push_back(32904);
        internalCounters.push_back(32989);
        internalCounters.push_back(33074);
        internalCounters.push_back(33159);
        internalCounters.push_back(33244);
        internalCounters.push_back(33329);
        internalCounters.push_back(33414);
        internalCounters.push_back(33499);
        internalCounters.push_back(33584);
        internalCounters.push_back(33669);
        internalCounters.push_back(33754);
        internalCounters.push_back(33839);
        internalCounters.push_back(33924);
        internalCounters.push_back(34009);
        internalCounters.push_back(34094);
        internalCounters.push_back(28740);
        internalCounters.push_back(28825);
        internalCounters.push_back(28910);
        internalCounters.push_back(28995);
        internalCounters.push_back(29080);
        internalCounters.push_back(29165);
        internalCounters.push_back(29250);
        internalCounters.push_back(29335);
        internalCounters.push_back(29420);
        internalCounters.push_back(29505);
        internalCounters.push_back(29590);
        internalCounters.push_back(29675);
        internalCounters.push_back(29760);
        internalCounters.push_back(29845);
        internalCounters.push_back(29930);
        internalCounters.push_back(30015);
        internalCounters.push_back(30100);
        internalCounters.push_back(30185);
        internalCounters.push_back(30270);
        internalCounters.push_back(30355);
        internalCounters.push_back(30440);
        internalCounters.push_back(30525);
        internalCounters.push_back(30610);
        internalCounters.push_back(30695);
        internalCounters.push_back(30780);
        internalCounters.push_back(30865);
        internalCounters.push_back(30950);
        internalCounters.push_back(31035);
        internalCounters.push_back(31120);
        internalCounters.push_back(31205);
        internalCounters.push_back(31290);
        internalCounters.push_back(31375);
        internalCounters.push_back(31460);
        internalCounters.push_back(31545);
        internalCounters.push_back(31630);
        internalCounters.push_back(31715);
        internalCounters.push_back(31800);
        internalCounters.push_back(31885);
        internalCounters.push_back(31970);
        internalCounters.push_back(32055);
        internalCounters.push_back(32140);
        internalCounters.push_back(32225);
        internalCounters.push_back(32310);
        internalCounters.push_back(32395);
        internalCounters.push_back(32480);
        internalCounters.push_back(32565);
        internalCounters.push_back(32650);
        internalCounters.push_back(32735);
        internalCounters.push_back(32820);
        internalCounters.push_back(32905);
        internalCounters.push_back(32990);
        internalCounters.push_back(33075);
        internalCounters.push_back(33160);
        internalCounters.push_back(33245);
        internalCounters.push_back(33330);
        internalCounters.push_back(33415);
        internalCounters.push_back(33500);
        internalCounters.push_back(33585);
        internalCounters.push_back(33670);
        internalCounters.push_back(33755);
        internalCounters.push_back(33840);
        internalCounters.push_back(33925);
        internalCounters.push_back(34010);
        internalCounters.push_back(34095);

        p.DefinePublicCounter("L1CacheHit", "GlobalMemory", "The percentage of fetch, write, atomic, and other instructions that hit the data in L1 cache. Value range: 0% (no hit) to 100% (optimal).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),(1),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum256,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,ifnotzero", "6deaf002-3cac-2d2d-7b89-566c7a52b08e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28728);
        internalCounters.push_back(28813);
        internalCounters.push_back(28898);
        internalCounters.push_back(28983);
        internalCounters.push_back(29068);
        internalCounters.push_back(29153);
        internalCounters.push_back(29238);
        internalCounters.push_back(29323);
        internalCounters.push_back(29408);
        internalCounters.push_back(29493);
        internalCounters.push_back(29578);
        internalCounters.push_back(29663);
        internalCounters.push_back(29748);
        internalCounters.push_back(29833);
        internalCounters.push_back(29918);
        internalCounters.push_back(30003);
        internalCounters.push_back(30088);
        internalCounters.push_back(30173);
        internalCounters.push_back(30258);
        internalCounters.push_back(30343);
        internalCounters.push_back(30428);
        internalCounters.push_back(30513);
        internalCounters.push_back(30598);
        internalCounters.push_back(30683);
        internalCounters.push_back(30768);
        internalCounters.push_back(30853);
        internalCounters.push_back(30938);
        internalCounters.push_back(31023);
        internalCounters.push_back(31108);
        internalCounters.push_back(31193);
        internalCounters.push_back(31278);
        internalCounters.push_back(31363);
        internalCounters.push_back(31448);
        internalCounters.push_back(31533);
        internalCounters.push_back(31618);
        internalCounters.push_back(31703);
        internalCounters.push_back(31788);
        internalCounters.push_back(31873);
        internalCounters.push_back(31958);
        internalCounters.push_back(32043);
        internalCounters.push_back(32128);
        internalCounters.push_back(32213);
        internalCounters.push_back(32298);
        internalCounters.push_back(32383);
        internalCounters.push_back(32468);
        internalCounters.push_back(32553);
        internalCounters.push_back(32638);
        internalCounters.push_back(32723);
        internalCounters.push_back(32808);
        internalCounters.push_back(32893);
        internalCounters.push_back(32978);
        internalCounters.push_back(33063);
        internalCounters.push_back(33148);
        internalCounters.push_back(33233);
        internalCounters.push_back(33318);
        internalCounters.push_back(33403);
        internalCounters.push_back(33488);
        internalCounters.push_back(33573);
        internalCounters.push_back(33658);
        internalCounters.push_back(33743);
        internalCounters.push_back(33828);
        internalCounters.push_back(33913);
        internalCounters.push_back(33998);
        internalCounters.push_back(34083);
        internalCounters.push_back(28737);
        internalCounters.push_back(28822);
        internalCounters.push_back(28907);
        internalCounters.push_back(28992);
        internalCounters.push_back(29077);
        internalCounters.push_back(29162);
        internalCounters.push_back(29247);
        internalCounters.push_back(29332);
        internalCounters.push_back(29417);
        internalCounters.push_back(29502);
        internalCounters.push_back(29587);
        internalCounters.push_back(29672);
        internalCounters.push_back(29757);
        internalCounters.push_back(29842);
        internalCounters.push_back(29927);
        internalCounters.push_back(30012);
        internalCounters.push_back(30097);
        internalCounters.push_back(30182);
        internalCounters.push_back(30267);
        internalCounters.push_back(30352);
        internalCounters.push_back(30437);
        internalCounters.push_back(30522);
        internalCounters.push_back(30607);
        internalCounters.push_back(30692);
        internalCounters.push_back(30777);
        internalCounters.push_back(30862);
        internalCounters.push_back(30947);
        internalCounters.push_back(31032);
        internalCounters.push_back(31117);
        internalCounters.push_back(31202);
        internalCounters.push_back(31287);
        internalCounters.push_back(31372);
        internalCounters.push_back(31457);
        internalCounters.push_back(31542);
        internalCounters.push_back(31627);
        internalCounters.push_back(31712);
        internalCounters.push_back(31797);
        internalCounters.push_back(31882);
        internalCounters.push_back(31967);
        internalCounters.push_back(32052);
        internalCounters.push_back(32137);
        internalCounters.push_back(32222);
        internalCounters.push_back(32307);
        internalCounters.push_back(32392);
        internalCounters.push_back(32477);
        internalCounters.push_back(32562);
        internalCounters.push_back(32647);
        internalCounters.push_back(32732);
        internalCounters.push_back(32817);
        internalCounters.push_back(32902);
        internalCounters.push_back(32987);
        internalCounters.push_back(33072);
        internalCounters.push_back(33157);
        internalCounters.push_back(33242);
        internalCounters.push_back(33327);
        internalCounters.push_back(33412);
        internalCounters.push_back(33497);
        internalCounters.push_back(33582);
        internalCounters.push_back(33667);
        internalCounters.push_back(33752);
        internalCounters.push_back(33837);
        internalCounters.push_back(33922);
        internalCounters.push_back(34007);
        internalCounters.push_back(34092);
        internalCounters.push_back(28738);
        internalCounters.push_back(28823);
        internalCounters.push_back(28908);
        internalCounters.push_back(28993);
        internalCounters.push_back(29078);
        internalCounters.push_back(29163);
        internalCounters.push_back(29248);
        internalCounters.push_back(29333);
        internalCounters.push_back(29418);
        internalCounters.push_back(29503);
        internalCounters.push_back(29588);
        internalCounters.push_back(29673);
        internalCounters.push_back(29758);
        internalCounters.push_back(29843);
        internalCounters.push_back(29928);
        internalCounters.push_back(30013);
        internalCounters.push_back(30098);
        internalCounters.push_back(30183);
        internalCounters.push_back(30268);
        internalCounters.push_back(30353);
        internalCounters.push_back(30438);
        internalCounters.push_back(30523);
        internalCounters.push_back(30608);
        internalCounters.push_back(30693);
        internalCounters.push_back(30778);
        internalCounters.push_back(30863);
        internalCounters.push_back(30948);
        internalCounters.push_back(31033);
        internalCounters.push_back(31118);
        internalCounters.push_back(31203);
        internalCounters.push_back(31288);
        internalCounters.push_back(31373);
        internalCounters.push_back(31458);
        internalCounters.push_back(31543);
        internalCounters.push_back(31628);
        internalCounters.push_back(31713);
        internalCounters.push_back(31798);
        internalCounters.push_back(31883);
        internalCounters.push_back(31968);
        internalCounters.push_back(32053);
        internalCounters.push_back(32138);
        internalCounters.push_back(32223);
        internalCounters.push_back(32308);
        internalCounters.push_back(32393);
        internalCounters.push_back(32478);
        internalCounters.push_back(32563);
        internalCounters.push_back(32648);
        internalCounters.push_back(32733);
        internalCounters.push_back(32818);
        internalCounters.push_back(32903);
        internalCounters.push_back(32988);
        internalCounters.push_back(33073);
        internalCounters.push_back(33158);
        internalCounters.push_back(33243);
        internalCounters.push_back(33328);
        internalCounters.push_back(33413);
        internalCounters.push_back(33498);
        internalCounters.push_back(33583);
        internalCounters.push_back(33668);
        internalCounters.push_back(33753);
        internalCounters.push_back(33838);
        internalCounters.push_back(33923);
        internalCounters.push_back(34008);
        internalCounters.push_back(34093);
        internalCounters.push_back(28739);
        internalCounters.push_back(28824);
        internalCounters.push_back(28909);
        internalCounters.push_back(28994);
        internalCounters.push_back(29079);
        internalCounters.push_back(29164);
        internalCounters.push_back(29249);
        internalCounters.push_back(29334);
        internalCounters.push_back(29419);
        internalCounters.push_back(29504);
        internalCounters.push_back(29589);
        internalCounters.push_back(29674);
        internalCounters.push_back(29759);
        internalCounters.push_back(29844);
        internalCounters.push_back(29929);
        internalCounters.push_back(30014);
        internalCounters.push_back(30099);
        internalCounters.push_back(30184);
        internalCounters.push_back(30269);
        internalCounters.push_back(30354);
        internalCounters.push_back(30439);
        internalCounters.push_back(30524);
        internalCounters.push_back(30609);
        internalCounters.push_back(30694);
        internalCounters.push_back(30779);
        internalCounters.push_back(30864);
        internalCounters.push_back(30949);
        internalCounters.push_back(31034);
        internalCounters.push_back(31119);
        internalCounters.push_back(31204);
        internalCounters.push_back(31289);
        internalCounters.push_back(31374);
        internalCounters.push_back(31459);
        internalCounters.push_back(31544);
        internalCounters.push_back(31629);
        internalCounters.push_back(31714);
        internalCounters.push_back(31799);
        internalCounters.push_back(31884);
        internalCounters.push_back(31969);
        internalCounters.push_back(32054);
        internalCounters.push_back(32139);
        internalCounters.push_back(32224);
        internalCounters.push_back(32309);
        internalCounters.push_back(32394);
        internalCounters.push_back(32479);
        internalCounters.push_back(32564);
        internalCounters.push_back(32649);
        internalCounters.push_back(32734);
        internalCounters.push_back(32819);
        internalCounters.push_back(32904);
        internalCounters.push_back(32989);
        internalCounters.push_back(33074);
        internalCounters.push_back(33159);
        internalCounters.push_back(33244);
        internalCounters.push_back(33329);
        internalCounters.push_back(33414);
        internalCounters.push_back(33499);
        internalCounters.push_back(33584);
        internalCounters.push_back(33669);
        internalCounters.push_back(33754);
        internalCounters.push_back(33839);
        internalCounters.push_back(33924);
        internalCounters.push_back(34009);
        internalCounters.push_back(34094);
        internalCounters.push_back(28740);
        internalCounters.push_back(28825);
        internalCounters.push_back(28910);
        internalCounters.push_back(28995);
        internalCounters.push_back(29080);
        internalCounters.push_back(29165);
        internalCounters.push_back(29250);
        internalCounters.push_back(29335);
        internalCounters.push_back(29420);
        internalCounters.push_back(29505);
        internalCounters.push_back(29590);
        internalCounters.push_back(29675);
        internalCounters.push_back(29760);
        internalCounters.push_back(29845);
        internalCounters.push_back(29930);
        internalCounters.push_back(30015);
        internalCounters.push_back(30100);
        internalCounters.push_back(30185);
        internalCounters.push_back(30270);
        internalCounters.push_back(30355);
        internalCounters.push_back(30440);
        internalCounters.push_back(30525);
        internalCounters.push_back(30610);
        internalCounters.push_back(30695);
        internalCounters.push_back(30780);
        internalCounters.push_back(30865);
        internalCounters.push_back(30950);
        internalCounters.push_back(31035);
        internalCounters.push_back(31120);
        internalCounters.push_back(31205);
        internalCounters.push_back(31290);
        internalCounters.push_back(31375);
        internalCounters.push_back(31460);
        internalCounters.push_back(31545);
        internalCounters.push_back(31630);
        internalCounters.push_back(31715);
        internalCounters.push_back(31800);
        internalCounters.push_back(31885);
        internalCounters.push_back(31970);
        internalCounters.push_back(32055);
        internalCounters.push_back(32140);
        internalCounters.push_back(32225);
        internalCounters.push_back(32310);
        internalCounters.push_back(32395);
        internalCounters.push_back(32480);
        internalCounters.push_back(32565);
        internalCounters.push_back(32650);
        internalCounters.push_back(32735);
        internalCounters.push_back(32820);
        internalCounters.push_back(32905);
        internalCounters.push_back(32990);
        internalCounters.push_back(33075);
        internalCounters.push_back(33160);
        internalCounters.push_back(33245);
        internalCounters.push_back(33330);
        internalCounters.push_back(33415);
        internalCounters.push_back(33500);
        internalCounters.push_back(33585);
        internalCounters.push_back(33670);
        internalCounters.push_back(33755);
        internalCounters.push_back(33840);
        internalCounters.push_back(33925);
        internalCounters.push_back(34010);
        internalCounters.push_back(34095);

        p.DefinePublicCounter("L1CacheHitCount", "GlobalMemory", "Count of fetch, write, atomic, and other instructions that hit the data in L1 cache.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum256,-", "279c8bff-ec6a-f9bf-96d7-5e8000f77891" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28737);
        internalCounters.push_back(28822);
        internalCounters.push_back(28907);
        internalCounters.push_back(28992);
        internalCounters.push_back(29077);
        internalCounters.push_back(29162);
        internalCounters.push_back(29247);
        internalCounters.push_back(29332);
        internalCounters.push_back(29417);
        internalCounters.push_back(29502);
        internalCounters.push_back(29587);
        internalCounters.push_back(29672);
        internalCounters.push_back(29757);
        internalCounters.push_back(29842);
        internalCounters.push_back(29927);
        internalCounters.push_back(30012);
        internalCounters.push_back(30097);
        internalCounters.push_back(30182);
        internalCounters.push_back(30267);
        internalCounters.push_back(30352);
        internalCounters.push_back(30437);
        internalCounters.push_back(30522);
        internalCounters.push_back(30607);
        internalCounters.push_back(30692);
        internalCounters.push_back(30777);
        internalCounters.push_back(30862);
        internalCounters.push_back(30947);
        internalCounters.push_back(31032);
        internalCounters.push_back(31117);
        internalCounters.push_back(31202);
        internalCounters.push_back(31287);
        internalCounters.push_back(31372);
        internalCounters.push_back(31457);
        internalCounters.push_back(31542);
        internalCounters.push_back(31627);
        internalCounters.push_back(31712);
        internalCounters.push_back(31797);
        internalCounters.push_back(31882);
        internalCounters.push_back(31967);
        internalCounters.push_back(32052);
        internalCounters.push_back(32137);
        internalCounters.push_back(32222);
        internalCounters.push_back(32307);
        internalCounters.push_back(32392);
        internalCounters.push_back(32477);
        internalCounters.push_back(32562);
        internalCounters.push_back(32647);
        internalCounters.push_back(32732);
        internalCounters.push_back(32817);
        internalCounters.push_back(32902);
        internalCounters.push_back(32987);
        internalCounters.push_back(33072);
        internalCounters.push_back(33157);
        internalCounters.push_back(33242);
        internalCounters.push_back(33327);
        internalCounters.push_back(33412);
        internalCounters.push_back(33497);
        internalCounters.push_back(33582);
        internalCounters.push_back(33667);
        internalCounters.push_back(33752);
        internalCounters.push_back(33837);
        internalCounters.push_back(33922);
        internalCounters.push_back(34007);
        internalCounters.push_back(34092);
        internalCounters.push_back(28738);
        internalCounters.push_back(28823);
        internalCounters.push_back(28908);
        internalCounters.push_back(28993);
        internalCounters.push_back(29078);
        internalCounters.push_back(29163);
        internalCounters.push_back(29248);
        internalCounters.push_back(29333);
        internalCounters.push_back(29418);
        internalCounters.push_back(29503);
        internalCounters.push_back(29588);
        internalCounters.push_back(29673);
        internalCounters.push_back(29758);
        internalCounters.push_back(29843);
        internalCounters.push_back(29928);
        internalCounters.push_back(30013);
        internalCounters.push_back(30098);
        internalCounters.push_back(30183);
        internalCounters.push_back(30268);
        internalCounters.push_back(30353);
        internalCounters.push_back(30438);
        internalCounters.push_back(30523);
        internalCounters.push_back(30608);
        internalCounters.push_back(30693);
        internalCounters.push_back(30778);
        internalCounters.push_back(30863);
        internalCounters.push_back(30948);
        internalCounters.push_back(31033);
        internalCounters.push_back(31118);
        internalCounters.push_back(31203);
        internalCounters.push_back(31288);
        internalCounters.push_back(31373);
        internalCounters.push_back(31458);
        internalCounters.push_back(31543);
        internalCounters.push_back(31628);
        internalCounters.push_back(31713);
        internalCounters.push_back(31798);
        internalCounters.push_back(31883);
        internalCounters.push_back(31968);
        internalCounters.push_back(32053);
        internalCounters.push_back(32138);
        internalCounters.push_back(32223);
        internalCounters.push_back(32308);
        internalCounters.push_back(32393);
        internalCounters.push_back(32478);
        internalCounters.push_back(32563);
        internalCounters.push_back(32648);
        internalCounters.push_back(32733);
        internalCounters.push_back(32818);
        internalCounters.push_back(32903);
        internalCounters.push_back(32988);
        internalCounters.push_back(33073);
        internalCounters.push_back(33158);
        internalCounters.push_back(33243);
        internalCounters.push_back(33328);
        internalCounters.push_back(33413);
        internalCounters.push_back(33498);
        internalCounters.push_back(33583);
        internalCounters.push_back(33668);
        internalCounters.push_back(33753);
        internalCounters.push_back(33838);
        internalCounters.push_back(33923);
        internalCounters.push_back(34008);
        internalCounters.push_back(34093);
        internalCounters.push_back(28739);
        internalCounters.push_back(28824);
        internalCounters.push_back(28909);
        internalCounters.push_back(28994);
        internalCounters.push_back(29079);
        internalCounters.push_back(29164);
        internalCounters.push_back(29249);
        internalCounters.push_back(29334);
        internalCounters.push_back(29419);
        internalCounters.push_back(29504);
        internalCounters.push_back(29589);
        internalCounters.push_back(29674);
        internalCounters.push_back(29759);
        internalCounters.push_back(29844);
        internalCounters.push_back(29929);
        internalCounters.push_back(30014);
        internalCounters.push_back(30099);
        internalCounters.push_back(30184);
        internalCounters.push_back(30269);
        internalCounters.push_back(30354);
        internalCounters.push_back(30439);
        internalCounters.push_back(30524);
        internalCounters.push_back(30609);
        internalCounters.push_back(30694);
        internalCounters.push_back(30779);
        internalCounters.push_back(30864);
        internalCounters.push_back(30949);
        internalCounters.push_back(31034);
        internalCounters.push_back(31119);
        internalCounters.push_back(31204);
        internalCounters.push_back(31289);
        internalCounters.push_back(31374);
        internalCounters.push_back(31459);
        internalCounters.push_back(31544);
        internalCounters.push_back(31629);
        internalCounters.push_back(31714);
        internalCounters.push_back(31799);
        internalCounters.push_back(31884);
        internalCounters.push_back(31969);
        internalCounters.push_back(32054);
        internalCounters.push_back(32139);
        internalCounters.push_back(32224);
        internalCounters.push_back(32309);
        internalCounters.push_back(32394);
        internalCounters.push_back(32479);
        internalCounters.push_back(32564);
        internalCounters.push_back(32649);
        internalCounters.push_back(32734);
        internalCounters.push_back(32819);
        internalCounters.push_back(32904);
        internalCounters.push_back(32989);
        internalCounters.push_back(33074);
        internalCounters.push_back(33159);
        internalCounters.push_back(33244);
        internalCounters.push_back(33329);
        internalCounters.push_back(33414);
        internalCounters.push_back(33499);
        internalCounters.push_back(33584);
        internalCounters.push_back(33669);
        internalCounters.push_back(33754);
        internalCounters.push_back(33839);
        internalCounters.push_back(33924);
        internalCounters.push_back(34009);
        internalCounters.push_back(34094);
        internalCounters.push_back(28740);
        internalCounters.push_back(28825);
        internalCounters.push_back(28910);
        internalCounters.push_back(28995);
        internalCounters.push_back(29080);
        internalCounters.push_back(29165);
        internalCounters.push_back(29250);
        internalCounters.push_back(29335);
        internalCounters.push_back(29420);
        internalCounters.push_back(29505);
        internalCounters.push_back(29590);
        internalCounters.push_back(29675);
        internalCounters.push_back(29760);
        internalCounters.push_back(29845);
        internalCounters.push_back(29930);
        internalCounters.push_back(30015);
        internalCounters.push_back(30100);
        internalCounters.push_back(30185);
        internalCounters.push_back(30270);
        internalCounters.push_back(30355);
        internalCounters.push_back(30440);
        internalCounters.push_back(30525);
        internalCounters.push_back(30610);
        internalCounters.push_back(30695);
        internalCounters.push_back(30780);
        internalCounters.push_back(30865);
        internalCounters.push_back(30950);
        internalCounters.push_back(31035);
        internalCounters.push_back(31120);
        internalCounters.push_back(31205);
        internalCounters.push_back(31290);
        internalCounters.push_back(31375);
        internalCounters.push_back(31460);
        internalCounters.push_back(31545);
        internalCounters.push_back(31630);
        internalCounters.push_back(31715);
        internalCounters.push_back(31800);
        internalCounters.push_back(31885);
        internalCounters.push_back(31970);
        internalCounters.push_back(32055);
        internalCounters.push_back(32140);
        internalCounters.push_back(32225);
        internalCounters.push_back(32310);
        internalCounters.push_back(32395);
        internalCounters.push_back(32480);
        internalCounters.push_back(32565);
        internalCounters.push_back(32650);
        internalCounters.push_back(32735);
        internalCounters.push_back(32820);
        internalCounters.push_back(32905);
        internalCounters.push_back(32990);
        internalCounters.push_back(33075);
        internalCounters.push_back(33160);
        internalCounters.push_back(33245);
        internalCounters.push_back(33330);
        internalCounters.push_back(33415);
        internalCounters.push_back(33500);
        internalCounters.push_back(33585);
        internalCounters.push_back(33670);
        internalCounters.push_back(33755);
        internalCounters.push_back(33840);
        internalCounters.push_back(33925);
        internalCounters.push_back(34010);
        internalCounters.push_back(34095);

        p.DefinePublicCounter("L1CacheMissCount", "GlobalMemory", "Count of fetch, write, atomic, and other instructions that miss the data in L1 cache.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum256", "6e4ee364-41d7-476d-361d-f47b266c15db" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34141);
        internalCounters.push_back(34397);
        internalCounters.push_back(34653);
        internalCounters.push_back(34909);
        internalCounters.push_back(35165);
        internalCounters.push_back(35421);
        internalCounters.push_back(35677);
        internalCounters.push_back(35933);
        internalCounters.push_back(36189);
        internalCounters.push_back(36445);
        internalCounters.push_back(36701);
        internalCounters.push_back(36957);
        internalCounters.push_back(37213);
        internalCounters.push_back(37469);
        internalCounters.push_back(37725);
        internalCounters.push_back(37981);

        p.DefinePublicCounter("CSWriteUnitStalledCycles", "ComputeShader", "Number of GPU cycles the write unit is stalled.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16", "be164c60-5e48-acac-9622-29616d09aa9a" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15111);
        internalCounters.push_back(15485);
        internalCounters.push_back(15859);
        internalCounters.push_back(16233);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSGDSInsts", "ComputeShader", "The average number of GDS read or GDS write instructions executed per work item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,12,13,14,15,sum8,ifnotzero", "2a867f3e-4a37-ad16-55d1-f03d74707819" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15110);
        internalCounters.push_back(15484);
        internalCounters.push_back(15858);
        internalCounters.push_back(16232);
        internalCounters.push_back(15109);
        internalCounters.push_back(15483);
        internalCounters.push_back(15857);
        internalCounters.push_back(16231);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSLDSInsts", "ComputeShader", "The average number of LDS read/write instructions executed per work-item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,-,8,9,10,11,sum4,/,12,13,14,15,16,17,18,19,sum8,ifnotzero", "61b0b351-7e06-ef8e-a8e0-7a9e3200a836" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15109);
        internalCounters.push_back(15483);
        internalCounters.push_back(15857);
        internalCounters.push_back(16231);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSFlatLDSInsts", "ComputeShader", "The average number of FLAT instructions that read from or write to LDS executed per work item (affected by flow control).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,12,13,14,15,sum8,ifnotzero", "99672cda-de2b-014c-482e-cf73b90068d5" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15139);
        internalCounters.push_back(15513);
        internalCounters.push_back(15887);
        internalCounters.push_back(16261);
        internalCounters.push_back(15080);
        internalCounters.push_back(15454);
        internalCounters.push_back(15828);
        internalCounters.push_back(16202);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSALUStalledByLDS", "ComputeShader", "The percentage of GPUTime ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,/,NUM_SHADER_ENGINES,/,(100),*,9,10,11,12,13,14,15,16,sum8,ifnotzero", "6dc4f1c2-bad0-c9ff-156e-883b319a752a" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15139);
        internalCounters.push_back(15513);
        internalCounters.push_back(15887);
        internalCounters.push_back(16261);

        p.DefinePublicCounter("CSALUStalledByLDSCycles", "ComputeShader", "Number of GPU cycles the ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,NUM_SHADER_ENGINES,/", "8f3d5f25-2159-0374-fafe-e26a7799b6c8" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15169);
        internalCounters.push_back(15543);
        internalCounters.push_back(15917);
        internalCounters.push_back(16291);
        internalCounters.push_back(50653);
        internalCounters.push_back(3863);
        internalCounters.push_back(4059);
        internalCounters.push_back(4255);
        internalCounters.push_back(4451);
        internalCounters.push_back(3869);
        internalCounters.push_back(4065);
        internalCounters.push_back(4261);
        internalCounters.push_back(4457);

        p.DefinePublicCounter("CSLDSBankConflict", "ComputeShader", "The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "(0),0,1,2,3,sum4,4,/,NUM_SIMDS,/,(100),*,5,6,7,8,9,10,11,12,sum8,ifnotzero", "1065ee10-2e41-ea41-1eb3-b61b491752f4" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(15169);
        internalCounters.push_back(15543);
        internalCounters.push_back(15917);
        internalCounters.push_back(16291);

        p.DefinePublicCounter("CSLDSBankConflictCycles", "ComputeShader", "Number of GPU cycles the LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,sum4,NUM_SIMDS,/", "1fd1adf3-c51e-94fd-083e-c482a0a0809e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17419);
        internalCounters.push_back(17538);
        internalCounters.push_back(17657);
        internalCounters.push_back(17776);
        internalCounters.push_back(17895);
        internalCounters.push_back(18014);
        internalCounters.push_back(18133);
        internalCounters.push_back(18252);
        internalCounters.push_back(18371);
        internalCounters.push_back(18490);
        internalCounters.push_back(18609);
        internalCounters.push_back(18728);
        internalCounters.push_back(18847);
        internalCounters.push_back(18966);
        internalCounters.push_back(19085);
        internalCounters.push_back(19204);
        internalCounters.push_back(19323);
        internalCounters.push_back(19442);
        internalCounters.push_back(19561);
        internalCounters.push_back(19680);
        internalCounters.push_back(19799);
        internalCounters.push_back(19918);
        internalCounters.push_back(20037);
        internalCounters.push_back(20156);
        internalCounters.push_back(20275);
        internalCounters.push_back(20394);
        internalCounters.push_back(20513);
        internalCounters.push_back(20632);
        internalCounters.push_back(20751);
        internalCounters.push_back(20870);
        internalCounters.push_back(20989);
        internalCounters.push_back(21108);
        internalCounters.push_back(21227);
        internalCounters.push_back(21346);
        internalCounters.push_back(21465);
        internalCounters.push_back(21584);
        internalCounters.push_back(21703);
        internalCounters.push_back(21822);
        internalCounters.push_back(21941);
        internalCounters.push_back(22060);
        internalCounters.push_back(22179);
        internalCounters.push_back(22298);
        internalCounters.push_back(22417);
        internalCounters.push_back(22536);
        internalCounters.push_back(22655);
        internalCounters.push_back(22774);
        internalCounters.push_back(22893);
        internalCounters.push_back(23012);
        internalCounters.push_back(23131);
        internalCounters.push_back(23250);
        internalCounters.push_back(23369);
        internalCounters.push_back(23488);
        internalCounters.push_back(23607);
        internalCounters.push_back(23726);
        internalCounters.push_back(23845);
        internalCounters.push_back(23964);
        internalCounters.push_back(24083);
        internalCounters.push_back(24202);
        internalCounters.push_back(24321);
        internalCounters.push_back(24440);
        internalCounters.push_back(24559);
        internalCounters.push_back(24678);
        internalCounters.push_back(24797);
        internalCounters.push_back(24916);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("TexUnitBusy", "Timing", "The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*", "36afb8d9-42fc-aafe-66c5-449542153b2c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17419);
        internalCounters.push_back(17538);
        internalCounters.push_back(17657);
        internalCounters.push_back(17776);
        internalCounters.push_back(17895);
        internalCounters.push_back(18014);
        internalCounters.push_back(18133);
        internalCounters.push_back(18252);
        internalCounters.push_back(18371);
        internalCounters.push_back(18490);
        internalCounters.push_back(18609);
        internalCounters.push_back(18728);
        internalCounters.push_back(18847);
        internalCounters.push_back(18966);
        internalCounters.push_back(19085);
        internalCounters.push_back(19204);
        internalCounters.push_back(19323);
        internalCounters.push_back(19442);
        internalCounters.push_back(19561);
        internalCounters.push_back(19680);
        internalCounters.push_back(19799);
        internalCounters.push_back(19918);
        internalCounters.push_back(20037);
        internalCounters.push_back(20156);
        internalCounters.push_back(20275);
        internalCounters.push_back(20394);
        internalCounters.push_back(20513);
        internalCounters.push_back(20632);
        internalCounters.push_back(20751);
        internalCounters.push_back(20870);
        internalCounters.push_back(20989);
        internalCounters.push_back(21108);
        internalCounters.push_back(21227);
        internalCounters.push_back(21346);
        internalCounters.push_back(21465);
        internalCounters.push_back(21584);
        internalCounters.push_back(21703);
        internalCounters.push_back(21822);
        internalCounters.push_back(21941);
        internalCounters.push_back(22060);
        internalCounters.push_back(22179);
        internalCounters.push_back(22298);
        internalCounters.push_back(22417);
        internalCounters.push_back(22536);
        internalCounters.push_back(22655);
        internalCounters.push_back(22774);
        internalCounters.push_back(22893);
        internalCounters.push_back(23012);
        internalCounters.push_back(23131);
        internalCounters.push_back(23250);
        internalCounters.push_back(23369);
        internalCounters.push_back(23488);
        internalCounters.push_back(23607);
        internalCounters.push_back(23726);
        internalCounters.push_back(23845);
        internalCounters.push_back(23964);
        internalCounters.push_back(24083);
        internalCounters.push_back(24202);
        internalCounters.push_back(24321);
        internalCounters.push_back(24440);
        internalCounters.push_back(24559);
        internalCounters.push_back(24678);
        internalCounters.push_back(24797);
        internalCounters.push_back(24916);

        p.DefinePublicCounter("TexUnitBusyCycles", "Timing", "Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64", "c68761f2-248c-4f39-6528-c308b1c0807c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17473);
        internalCounters.push_back(17592);
        internalCounters.push_back(17711);
        internalCounters.push_back(17830);
        internalCounters.push_back(17949);
        internalCounters.push_back(18068);
        internalCounters.push_back(18187);
        internalCounters.push_back(18306);
        internalCounters.push_back(18425);
        internalCounters.push_back(18544);
        internalCounters.push_back(18663);
        internalCounters.push_back(18782);
        internalCounters.push_back(18901);
        internalCounters.push_back(19020);
        internalCounters.push_back(19139);
        internalCounters.push_back(19258);
        internalCounters.push_back(19377);
        internalCounters.push_back(19496);
        internalCounters.push_back(19615);
        internalCounters.push_back(19734);
        internalCounters.push_back(19853);
        internalCounters.push_back(19972);
        internalCounters.push_back(20091);
        internalCounters.push_back(20210);
        internalCounters.push_back(20329);
        internalCounters.push_back(20448);
        internalCounters.push_back(20567);
        internalCounters.push_back(20686);
        internalCounters.push_back(20805);
        internalCounters.push_back(20924);
        internalCounters.push_back(21043);
        internalCounters.push_back(21162);
        internalCounters.push_back(21281);
        internalCounters.push_back(21400);
        internalCounters.push_back(21519);
        internalCounters.push_back(21638);
        internalCounters.push_back(21757);
        internalCounters.push_back(21876);
        internalCounters.push_back(21995);
        internalCounters.push_back(22114);
        internalCounters.push_back(22233);
        internalCounters.push_back(22352);
        internalCounters.push_back(22471);
        internalCounters.push_back(22590);
        internalCounters.push_back(22709);
        internalCounters.push_back(22828);
        internalCounters.push_back(22947);
        internalCounters.push_back(23066);
        internalCounters.push_back(23185);
        internalCounters.push_back(23304);
        internalCounters.push_back(23423);
        internalCounters.push_back(23542);
        internalCounters.push_back(23661);
        internalCounters.push_back(23780);
        internalCounters.push_back(23899);
        internalCounters.push_back(24018);
        internalCounters.push_back(24137);
        internalCounters.push_back(24256);
        internalCounters.push_back(24375);
        internalCounters.push_back(24494);
        internalCounters.push_back(24613);
        internalCounters.push_back(24732);
        internalCounters.push_back(24851);
        internalCounters.push_back(24970);
        internalCounters.push_back(17472);
        internalCounters.push_back(17591);
        internalCounters.push_back(17710);
        internalCounters.push_back(17829);
        internalCounters.push_back(17948);
        internalCounters.push_back(18067);
        internalCounters.push_back(18186);
        internalCounters.push_back(18305);
        internalCounters.push_back(18424);
        internalCounters.push_back(18543);
        internalCounters.push_back(18662);
        internalCounters.push_back(18781);
        internalCounters.push_back(18900);
        internalCounters.push_back(19019);
        internalCounters.push_back(19138);
        internalCounters.push_back(19257);
        internalCounters.push_back(19376);
        internalCounters.push_back(19495);
        internalCounters.push_back(19614);
        internalCounters.push_back(19733);
        internalCounters.push_back(19852);
        internalCounters.push_back(19971);
        internalCounters.push_back(20090);
        internalCounters.push_back(20209);
        internalCounters.push_back(20328);
        internalCounters.push_back(20447);
        internalCounters.push_back(20566);
        internalCounters.push_back(20685);
        internalCounters.push_back(20804);
        internalCounters.push_back(20923);
        internalCounters.push_back(21042);
        internalCounters.push_back(21161);
        internalCounters.push_back(21280);
        internalCounters.push_back(21399);
        internalCounters.push_back(21518);
        internalCounters.push_back(21637);
        internalCounters.push_back(21756);
        internalCounters.push_back(21875);
        internalCounters.push_back(21994);
        internalCounters.push_back(22113);
        internalCounters.push_back(22232);
        internalCounters.push_back(22351);
        internalCounters.push_back(22470);
        internalCounters.push_back(22589);
        internalCounters.push_back(22708);
        internalCounters.push_back(22827);
        internalCounters.push_back(22946);
        internalCounters.push_back(23065);
        internalCounters.push_back(23184);
        internalCounters.push_back(23303);
        internalCounters.push_back(23422);
        internalCounters.push_back(23541);
        internalCounters.push_back(23660);
        internalCounters.push_back(23779);
        internalCounters.push_back(23898);
        internalCounters.push_back(24017);
        internalCounters.push_back(24136);
        internalCounters.push_back(24255);
        internalCounters.push_back(24374);
        internalCounters.push_back(24493);
        internalCounters.push_back(24612);
        internalCounters.push_back(24731);
        internalCounters.push_back(24850);
        internalCounters.push_back(24969);

        p.DefinePublicCounter("TexTriFilteringPct", "TextureUnit", "Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*", "1affc3c8-b917-5c81-622b-7004527208ae" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17473);
        internalCounters.push_back(17592);
        internalCounters.push_back(17711);
        internalCounters.push_back(17830);
        internalCounters.push_back(17949);
        internalCounters.push_back(18068);
        internalCounters.push_back(18187);
        internalCounters.push_back(18306);
        internalCounters.push_back(18425);
        internalCounters.push_back(18544);
        internalCounters.push_back(18663);
        internalCounters.push_back(18782);
        internalCounters.push_back(18901);
        internalCounters.push_back(19020);
        internalCounters.push_back(19139);
        internalCounters.push_back(19258);
        internalCounters.push_back(19377);
        internalCounters.push_back(19496);
        internalCounters.push_back(19615);
        internalCounters.push_back(19734);
        internalCounters.push_back(19853);
        internalCounters.push_back(19972);
        internalCounters.push_back(20091);
        internalCounters.push_back(20210);
        internalCounters.push_back(20329);
        internalCounters.push_back(20448);
        internalCounters.push_back(20567);
        internalCounters.push_back(20686);
        internalCounters.push_back(20805);
        internalCounters.push_back(20924);
        internalCounters.push_back(21043);
        internalCounters.push_back(21162);
        internalCounters.push_back(21281);
        internalCounters.push_back(21400);
        internalCounters.push_back(21519);
        internalCounters.push_back(21638);
        internalCounters.push_back(21757);
        internalCounters.push_back(21876);
        internalCounters.push_back(21995);
        internalCounters.push_back(22114);
        internalCounters.push_back(22233);
        internalCounters.push_back(22352);
        internalCounters.push_back(22471);
        internalCounters.push_back(22590);
        internalCounters.push_back(22709);
        internalCounters.push_back(22828);
        internalCounters.push_back(22947);
        internalCounters.push_back(23066);
        internalCounters.push_back(23185);
        internalCounters.push_back(23304);
        internalCounters.push_back(23423);
        internalCounters.push_back(23542);
        internalCounters.push_back(23661);
        internalCounters.push_back(23780);
        internalCounters.push_back(23899);
        internalCounters.push_back(24018);
        internalCounters.push_back(24137);
        internalCounters.push_back(24256);
        internalCounters.push_back(24375);
        internalCounters.push_back(24494);
        internalCounters.push_back(24613);
        internalCounters.push_back(24732);
        internalCounters.push_back(24851);
        internalCounters.push_back(24970);

        p.DefinePublicCounter("TexTriFilteringCount", "TextureUnit", "Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64", "5785b3a1-a513-18db-4b1c-bdeef75bb2b6" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17472);
        internalCounters.push_back(17591);
        internalCounters.push_back(17710);
        internalCounters.push_back(17829);
        internalCounters.push_back(17948);
        internalCounters.push_back(18067);
        internalCounters.push_back(18186);
        internalCounters.push_back(18305);
        internalCounters.push_back(18424);
        internalCounters.push_back(18543);
        internalCounters.push_back(18662);
        internalCounters.push_back(18781);
        internalCounters.push_back(18900);
        internalCounters.push_back(19019);
        internalCounters.push_back(19138);
        internalCounters.push_back(19257);
        internalCounters.push_back(19376);
        internalCounters.push_back(19495);
        internalCounters.push_back(19614);
        internalCounters.push_back(19733);
        internalCounters.push_back(19852);
        internalCounters.push_back(19971);
        internalCounters.push_back(20090);
        internalCounters.push_back(20209);
        internalCounters.push_back(20328);
        internalCounters.push_back(20447);
        internalCounters.push_back(20566);
        internalCounters.push_back(20685);
        internalCounters.push_back(20804);
        internalCounters.push_back(20923);
        internalCounters.push_back(21042);
        internalCounters.push_back(21161);
        internalCounters.push_back(21280);
        internalCounters.push_back(21399);
        internalCounters.push_back(21518);
        internalCounters.push_back(21637);
        internalCounters.push_back(21756);
        internalCounters.push_back(21875);
        internalCounters.push_back(21994);
        internalCounters.push_back(22113);
        internalCounters.push_back(22232);
        internalCounters.push_back(22351);
        internalCounters.push_back(22470);
        internalCounters.push_back(22589);
        internalCounters.push_back(22708);
        internalCounters.push_back(22827);
        internalCounters.push_back(22946);
        internalCounters.push_back(23065);
        internalCounters.push_back(23184);
        internalCounters.push_back(23303);
        internalCounters.push_back(23422);
        internalCounters.push_back(23541);
        internalCounters.push_back(23660);
        internalCounters.push_back(23779);
        internalCounters.push_back(23898);
        internalCounters.push_back(24017);
        internalCounters.push_back(24136);
        internalCounters.push_back(24255);
        internalCounters.push_back(24374);
        internalCounters.push_back(24493);
        internalCounters.push_back(24612);
        internalCounters.push_back(24731);
        internalCounters.push_back(24850);
        internalCounters.push_back(24969);

        p.DefinePublicCounter("NoTexTriFilteringCount", "TextureUnit", "Count of pixels that did not receive trilinear filtering.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64", "179da29a-81af-c06e-ce8c-a0a731ea030d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17475);
        internalCounters.push_back(17594);
        internalCounters.push_back(17713);
        internalCounters.push_back(17832);
        internalCounters.push_back(17951);
        internalCounters.push_back(18070);
        internalCounters.push_back(18189);
        internalCounters.push_back(18308);
        internalCounters.push_back(18427);
        internalCounters.push_back(18546);
        internalCounters.push_back(18665);
        internalCounters.push_back(18784);
        internalCounters.push_back(18903);
        internalCounters.push_back(19022);
        internalCounters.push_back(19141);
        internalCounters.push_back(19260);
        internalCounters.push_back(19379);
        internalCounters.push_back(19498);
        internalCounters.push_back(19617);
        internalCounters.push_back(19736);
        internalCounters.push_back(19855);
        internalCounters.push_back(19974);
        internalCounters.push_back(20093);
        internalCounters.push_back(20212);
        internalCounters.push_back(20331);
        internalCounters.push_back(20450);
        internalCounters.push_back(20569);
        internalCounters.push_back(20688);
        internalCounters.push_back(20807);
        internalCounters.push_back(20926);
        internalCounters.push_back(21045);
        internalCounters.push_back(21164);
        internalCounters.push_back(21283);
        internalCounters.push_back(21402);
        internalCounters.push_back(21521);
        internalCounters.push_back(21640);
        internalCounters.push_back(21759);
        internalCounters.push_back(21878);
        internalCounters.push_back(21997);
        internalCounters.push_back(22116);
        internalCounters.push_back(22235);
        internalCounters.push_back(22354);
        internalCounters.push_back(22473);
        internalCounters.push_back(22592);
        internalCounters.push_back(22711);
        internalCounters.push_back(22830);
        internalCounters.push_back(22949);
        internalCounters.push_back(23068);
        internalCounters.push_back(23187);
        internalCounters.push_back(23306);
        internalCounters.push_back(23425);
        internalCounters.push_back(23544);
        internalCounters.push_back(23663);
        internalCounters.push_back(23782);
        internalCounters.push_back(23901);
        internalCounters.push_back(24020);
        internalCounters.push_back(24139);
        internalCounters.push_back(24258);
        internalCounters.push_back(24377);
        internalCounters.push_back(24496);
        internalCounters.push_back(24615);
        internalCounters.push_back(24734);
        internalCounters.push_back(24853);
        internalCounters.push_back(24972);
        internalCounters.push_back(17474);
        internalCounters.push_back(17593);
        internalCounters.push_back(17712);
        internalCounters.push_back(17831);
        internalCounters.push_back(17950);
        internalCounters.push_back(18069);
        internalCounters.push_back(18188);
        internalCounters.push_back(18307);
        internalCounters.push_back(18426);
        internalCounters.push_back(18545);
        internalCounters.push_back(18664);
        internalCounters.push_back(18783);
        internalCounters.push_back(18902);
        internalCounters.push_back(19021);
        internalCounters.push_back(19140);
        internalCounters.push_back(19259);
        internalCounters.push_back(19378);
        internalCounters.push_back(19497);
        internalCounters.push_back(19616);
        internalCounters.push_back(19735);
        internalCounters.push_back(19854);
        internalCounters.push_back(19973);
        internalCounters.push_back(20092);
        internalCounters.push_back(20211);
        internalCounters.push_back(20330);
        internalCounters.push_back(20449);
        internalCounters.push_back(20568);
        internalCounters.push_back(20687);
        internalCounters.push_back(20806);
        internalCounters.push_back(20925);
        internalCounters.push_back(21044);
        internalCounters.push_back(21163);
        internalCounters.push_back(21282);
        internalCounters.push_back(21401);
        internalCounters.push_back(21520);
        internalCounters.push_back(21639);
        internalCounters.push_back(21758);
        internalCounters.push_back(21877);
        internalCounters.push_back(21996);
        internalCounters.push_back(22115);
        internalCounters.push_back(22234);
        internalCounters.push_back(22353);
        internalCounters.push_back(22472);
        internalCounters.push_back(22591);
        internalCounters.push_back(22710);
        internalCounters.push_back(22829);
        internalCounters.push_back(22948);
        internalCounters.push_back(23067);
        internalCounters.push_back(23186);
        internalCounters.push_back(23305);
        internalCounters.push_back(23424);
        internalCounters.push_back(23543);
        internalCounters.push_back(23662);
        internalCounters.push_back(23781);
        internalCounters.push_back(23900);
        internalCounters.push_back(24019);
        internalCounters.push_back(24138);
        internalCounters.push_back(24257);
        internalCounters.push_back(24376);
        internalCounters.push_back(24495);
        internalCounters.push_back(24614);
        internalCounters.push_back(24733);
        internalCounters.push_back(24852);
        internalCounters.push_back(24971);

        p.DefinePublicCounter("TexVolFilteringPct", "TextureUnit", "Percentage of pixels that received volume filtering.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*", "b5ff6bed-3178-aee4-42dd-c74391c02a2d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17475);
        internalCounters.push_back(17594);
        internalCounters.push_back(17713);
        internalCounters.push_back(17832);
        internalCounters.push_back(17951);
        internalCounters.push_back(18070);
        internalCounters.push_back(18189);
        internalCounters.push_back(18308);
        internalCounters.push_back(18427);
        internalCounters.push_back(18546);
        internalCounters.push_back(18665);
        internalCounters.push_back(18784);
        internalCounters.push_back(18903);
        internalCounters.push_back(19022);
        internalCounters.push_back(19141);
        internalCounters.push_back(19260);
        internalCounters.push_back(19379);
        internalCounters.push_back(19498);
        internalCounters.push_back(19617);
        internalCounters.push_back(19736);
        internalCounters.push_back(19855);
        internalCounters.push_back(19974);
        internalCounters.push_back(20093);
        internalCounters.push_back(20212);
        internalCounters.push_back(20331);
        internalCounters.push_back(20450);
        internalCounters.push_back(20569);
        internalCounters.push_back(20688);
        internalCounters.push_back(20807);
        internalCounters.push_back(20926);
        internalCounters.push_back(21045);
        internalCounters.push_back(21164);
        internalCounters.push_back(21283);
        internalCounters.push_back(21402);
        internalCounters.push_back(21521);
        internalCounters.push_back(21640);
        internalCounters.push_back(21759);
        internalCounters.push_back(21878);
        internalCounters.push_back(21997);
        internalCounters.push_back(22116);
        internalCounters.push_back(22235);
        internalCounters.push_back(22354);
        internalCounters.push_back(22473);
        internalCounters.push_back(22592);
        internalCounters.push_back(22711);
        internalCounters.push_back(22830);
        internalCounters.push_back(22949);
        internalCounters.push_back(23068);
        internalCounters.push_back(23187);
        internalCounters.push_back(23306);
        internalCounters.push_back(23425);
        internalCounters.push_back(23544);
        internalCounters.push_back(23663);
        internalCounters.push_back(23782);
        internalCounters.push_back(23901);
        internalCounters.push_back(24020);
        internalCounters.push_back(24139);
        internalCounters.push_back(24258);
        internalCounters.push_back(24377);
        internalCounters.push_back(24496);
        internalCounters.push_back(24615);
        internalCounters.push_back(24734);
        internalCounters.push_back(24853);
        internalCounters.push_back(24972);

        p.DefinePublicCounter("TexVolFilteringCount", "TextureUnit", "Count of pixels that received volume filtering.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64", "4bddc587-d589-8128-e18c-762eab2c871f" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17474);
        internalCounters.push_back(17593);
        internalCounters.push_back(17712);
        internalCounters.push_back(17831);
        internalCounters.push_back(17950);
        internalCounters.push_back(18069);
        internalCounters.push_back(18188);
        internalCounters.push_back(18307);
        internalCounters.push_back(18426);
        internalCounters.push_back(18545);
        internalCounters.push_back(18664);
        internalCounters.push_back(18783);
        internalCounters.push_back(18902);
        internalCounters.push_back(19021);
        internalCounters.push_back(19140);
        internalCounters.push_back(19259);
        internalCounters.push_back(19378);
        internalCounters.push_back(19497);
        internalCounters.push_back(19616);
        internalCounters.push_back(19735);
        internalCounters.push_back(19854);
        internalCounters.push_back(19973);
        internalCounters.push_back(20092);
        internalCounters.push_back(20211);
        internalCounters.push_back(20330);
        internalCounters.push_back(20449);
        internalCounters.push_back(20568);
        internalCounters.push_back(20687);
        internalCounters.push_back(20806);
        internalCounters.push_back(20925);
        internalCounters.push_back(21044);
        internalCounters.push_back(21163);
        internalCounters.push_back(21282);
        internalCounters.push_back(21401);
        internalCounters.push_back(21520);
        internalCounters.push_back(21639);
        internalCounters.push_back(21758);
        internalCounters.push_back(21877);
        internalCounters.push_back(21996);
        internalCounters.push_back(22115);
        internalCounters.push_back(22234);
        internalCounters.push_back(22353);
        internalCounters.push_back(22472);
        internalCounters.push_back(22591);
        internalCounters.push_back(22710);
        internalCounters.push_back(22829);
        internalCounters.push_back(22948);
        internalCounters.push_back(23067);
        internalCounters.push_back(23186);
        internalCounters.push_back(23305);
        internalCounters.push_back(23424);
        internalCounters.push_back(23543);
        internalCounters.push_back(23662);
        internalCounters.push_back(23781);
        internalCounters.push_back(23900);
        internalCounters.push_back(24019);
        internalCounters.push_back(24138);
        internalCounters.push_back(24257);
        internalCounters.push_back(24376);
        internalCounters.push_back(24495);
        internalCounters.push_back(24614);
        internalCounters.push_back(24733);
        internalCounters.push_back(24852);
        internalCounters.push_back(24971);

        p.DefinePublicCounter("NoTexVolFilteringCount", "TextureUnit", "Count of pixels that did not receive volume filtering.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64", "9fe1a854-17c6-9d26-b2b9-80610cd5827d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17493);
        internalCounters.push_back(17612);
        internalCounters.push_back(17731);
        internalCounters.push_back(17850);
        internalCounters.push_back(17969);
        internalCounters.push_back(18088);
        internalCounters.push_back(18207);
        internalCounters.push_back(18326);
        internalCounters.push_back(18445);
        internalCounters.push_back(18564);
        internalCounters.push_back(18683);
        internalCounters.push_back(18802);
        internalCounters.push_back(18921);
        internalCounters.push_back(19040);
        internalCounters.push_back(19159);
        internalCounters.push_back(19278);
        internalCounters.push_back(19397);
        internalCounters.push_back(19516);
        internalCounters.push_back(19635);
        internalCounters.push_back(19754);
        internalCounters.push_back(19873);
        internalCounters.push_back(19992);
        internalCounters.push_back(20111);
        internalCounters.push_back(20230);
        internalCounters.push_back(20349);
        internalCounters.push_back(20468);
        internalCounters.push_back(20587);
        internalCounters.push_back(20706);
        internalCounters.push_back(20825);
        internalCounters.push_back(20944);
        internalCounters.push_back(21063);
        internalCounters.push_back(21182);
        internalCounters.push_back(21301);
        internalCounters.push_back(21420);
        internalCounters.push_back(21539);
        internalCounters.push_back(21658);
        internalCounters.push_back(21777);
        internalCounters.push_back(21896);
        internalCounters.push_back(22015);
        internalCounters.push_back(22134);
        internalCounters.push_back(22253);
        internalCounters.push_back(22372);
        internalCounters.push_back(22491);
        internalCounters.push_back(22610);
        internalCounters.push_back(22729);
        internalCounters.push_back(22848);
        internalCounters.push_back(22967);
        internalCounters.push_back(23086);
        internalCounters.push_back(23205);
        internalCounters.push_back(23324);
        internalCounters.push_back(23443);
        internalCounters.push_back(23562);
        internalCounters.push_back(23681);
        internalCounters.push_back(23800);
        internalCounters.push_back(23919);
        internalCounters.push_back(24038);
        internalCounters.push_back(24157);
        internalCounters.push_back(24276);
        internalCounters.push_back(24395);
        internalCounters.push_back(24514);
        internalCounters.push_back(24633);
        internalCounters.push_back(24752);
        internalCounters.push_back(24871);
        internalCounters.push_back(24990);
        internalCounters.push_back(17494);
        internalCounters.push_back(17613);
        internalCounters.push_back(17732);
        internalCounters.push_back(17851);
        internalCounters.push_back(17970);
        internalCounters.push_back(18089);
        internalCounters.push_back(18208);
        internalCounters.push_back(18327);
        internalCounters.push_back(18446);
        internalCounters.push_back(18565);
        internalCounters.push_back(18684);
        internalCounters.push_back(18803);
        internalCounters.push_back(18922);
        internalCounters.push_back(19041);
        internalCounters.push_back(19160);
        internalCounters.push_back(19279);
        internalCounters.push_back(19398);
        internalCounters.push_back(19517);
        internalCounters.push_back(19636);
        internalCounters.push_back(19755);
        internalCounters.push_back(19874);
        internalCounters.push_back(19993);
        internalCounters.push_back(20112);
        internalCounters.push_back(20231);
        internalCounters.push_back(20350);
        internalCounters.push_back(20469);
        internalCounters.push_back(20588);
        internalCounters.push_back(20707);
        internalCounters.push_back(20826);
        internalCounters.push_back(20945);
        internalCounters.push_back(21064);
        internalCounters.push_back(21183);
        internalCounters.push_back(21302);
        internalCounters.push_back(21421);
        internalCounters.push_back(21540);
        internalCounters.push_back(21659);
        internalCounters.push_back(21778);
        internalCounters.push_back(21897);
        internalCounters.push_back(22016);
        internalCounters.push_back(22135);
        internalCounters.push_back(22254);
        internalCounters.push_back(22373);
        internalCounters.push_back(22492);
        internalCounters.push_back(22611);
        internalCounters.push_back(22730);
        internalCounters.push_back(22849);
        internalCounters.push_back(22968);
        internalCounters.push_back(23087);
        internalCounters.push_back(23206);
        internalCounters.push_back(23325);
        internalCounters.push_back(23444);
        internalCounters.push_back(23563);
        internalCounters.push_back(23682);
        internalCounters.push_back(23801);
        internalCounters.push_back(23920);
        internalCounters.push_back(24039);
        internalCounters.push_back(24158);
        internalCounters.push_back(24277);
        internalCounters.push_back(24396);
        internalCounters.push_back(24515);
        internalCounters.push_back(24634);
        internalCounters.push_back(24753);
        internalCounters.push_back(24872);
        internalCounters.push_back(24991);
        internalCounters.push_back(17495);
        internalCounters.push_back(17614);
        internalCounters.push_back(17733);
        internalCounters.push_back(17852);
        internalCounters.push_back(17971);
        internalCounters.push_back(18090);
        internalCounters.push_back(18209);
        internalCounters.push_back(18328);
        internalCounters.push_back(18447);
        internalCounters.push_back(18566);
        internalCounters.push_back(18685);
        internalCounters.push_back(18804);
        internalCounters.push_back(18923);
        internalCounters.push_back(19042);
        internalCounters.push_back(19161);
        internalCounters.push_back(19280);
        internalCounters.push_back(19399);
        internalCounters.push_back(19518);
        internalCounters.push_back(19637);
        internalCounters.push_back(19756);
        internalCounters.push_back(19875);
        internalCounters.push_back(19994);
        internalCounters.push_back(20113);
        internalCounters.push_back(20232);
        internalCounters.push_back(20351);
        internalCounters.push_back(20470);
        internalCounters.push_back(20589);
        internalCounters.push_back(20708);
        internalCounters.push_back(20827);
        internalCounters.push_back(20946);
        internalCounters.push_back(21065);
        internalCounters.push_back(21184);
        internalCounters.push_back(21303);
        internalCounters.push_back(21422);
        internalCounters.push_back(21541);
        internalCounters.push_back(21660);
        internalCounters.push_back(21779);
        internalCounters.push_back(21898);
        internalCounters.push_back(22017);
        internalCounters.push_back(22136);
        internalCounters.push_back(22255);
        internalCounters.push_back(22374);
        internalCounters.push_back(22493);
        internalCounters.push_back(22612);
        internalCounters.push_back(22731);
        internalCounters.push_back(22850);
        internalCounters.push_back(22969);
        internalCounters.push_back(23088);
        internalCounters.push_back(23207);
        internalCounters.push_back(23326);
        internalCounters.push_back(23445);
        internalCounters.push_back(23564);
        internalCounters.push_back(23683);
        internalCounters.push_back(23802);
        internalCounters.push_back(23921);
        internalCounters.push_back(24040);
        internalCounters.push_back(24159);
        internalCounters.push_back(24278);
        internalCounters.push_back(24397);
        internalCounters.push_back(24516);
        internalCounters.push_back(24635);
        internalCounters.push_back(24754);
        internalCounters.push_back(24873);
        internalCounters.push_back(24992);
        internalCounters.push_back(17496);
        internalCounters.push_back(17615);
        internalCounters.push_back(17734);
        internalCounters.push_back(17853);
        internalCounters.push_back(17972);
        internalCounters.push_back(18091);
        internalCounters.push_back(18210);
        internalCounters.push_back(18329);
        internalCounters.push_back(18448);
        internalCounters.push_back(18567);
        internalCounters.push_back(18686);
        internalCounters.push_back(18805);
        internalCounters.push_back(18924);
        internalCounters.push_back(19043);
        internalCounters.push_back(19162);
        internalCounters.push_back(19281);
        internalCounters.push_back(19400);
        internalCounters.push_back(19519);
        internalCounters.push_back(19638);
        internalCounters.push_back(19757);
        internalCounters.push_back(19876);
        internalCounters.push_back(19995);
        internalCounters.push_back(20114);
        internalCounters.push_back(20233);
        internalCounters.push_back(20352);
        internalCounters.push_back(20471);
        internalCounters.push_back(20590);
        internalCounters.push_back(20709);
        internalCounters.push_back(20828);
        internalCounters.push_back(20947);
        internalCounters.push_back(21066);
        internalCounters.push_back(21185);
        internalCounters.push_back(21304);
        internalCounters.push_back(21423);
        internalCounters.push_back(21542);
        internalCounters.push_back(21661);
        internalCounters.push_back(21780);
        internalCounters.push_back(21899);
        internalCounters.push_back(22018);
        internalCounters.push_back(22137);
        internalCounters.push_back(22256);
        internalCounters.push_back(22375);
        internalCounters.push_back(22494);
        internalCounters.push_back(22613);
        internalCounters.push_back(22732);
        internalCounters.push_back(22851);
        internalCounters.push_back(22970);
        internalCounters.push_back(23089);
        internalCounters.push_back(23208);
        internalCounters.push_back(23327);
        internalCounters.push_back(23446);
        internalCounters.push_back(23565);
        internalCounters.push_back(23684);
        internalCounters.push_back(23803);
        internalCounters.push_back(23922);
        internalCounters.push_back(24041);
        internalCounters.push_back(24160);
        internalCounters.push_back(24279);
        internalCounters.push_back(24398);
        internalCounters.push_back(24517);
        internalCounters.push_back(24636);
        internalCounters.push_back(24755);
        internalCounters.push_back(24874);
        internalCounters.push_back(24993);
        internalCounters.push_back(17497);
        internalCounters.push_back(17616);
        internalCounters.push_back(17735);
        internalCounters.push_back(17854);
        internalCounters.push_back(17973);
        internalCounters.push_back(18092);
        internalCounters.push_back(18211);
        internalCounters.push_back(18330);
        internalCounters.push_back(18449);
        internalCounters.push_back(18568);
        internalCounters.push_back(18687);
        internalCounters.push_back(18806);
        internalCounters.push_back(18925);
        internalCounters.push_back(19044);
        internalCounters.push_back(19163);
        internalCounters.push_back(19282);
        internalCounters.push_back(19401);
        internalCounters.push_back(19520);
        internalCounters.push_back(19639);
        internalCounters.push_back(19758);
        internalCounters.push_back(19877);
        internalCounters.push_back(19996);
        internalCounters.push_back(20115);
        internalCounters.push_back(20234);
        internalCounters.push_back(20353);
        internalCounters.push_back(20472);
        internalCounters.push_back(20591);
        internalCounters.push_back(20710);
        internalCounters.push_back(20829);
        internalCounters.push_back(20948);
        internalCounters.push_back(21067);
        internalCounters.push_back(21186);
        internalCounters.push_back(21305);
        internalCounters.push_back(21424);
        internalCounters.push_back(21543);
        internalCounters.push_back(21662);
        internalCounters.push_back(21781);
        internalCounters.push_back(21900);
        internalCounters.push_back(22019);
        internalCounters.push_back(22138);
        internalCounters.push_back(22257);
        internalCounters.push_back(22376);
        internalCounters.push_back(22495);
        internalCounters.push_back(22614);
        internalCounters.push_back(22733);
        internalCounters.push_back(22852);
        internalCounters.push_back(22971);
        internalCounters.push_back(23090);
        internalCounters.push_back(23209);
        internalCounters.push_back(23328);
        internalCounters.push_back(23447);
        internalCounters.push_back(23566);
        internalCounters.push_back(23685);
        internalCounters.push_back(23804);
        internalCounters.push_back(23923);
        internalCounters.push_back(24042);
        internalCounters.push_back(24161);
        internalCounters.push_back(24280);
        internalCounters.push_back(24399);
        internalCounters.push_back(24518);
        internalCounters.push_back(24637);
        internalCounters.push_back(24756);
        internalCounters.push_back(24875);
        internalCounters.push_back(24994);
        internalCounters.push_back(17498);
        internalCounters.push_back(17617);
        internalCounters.push_back(17736);
        internalCounters.push_back(17855);
        internalCounters.push_back(17974);
        internalCounters.push_back(18093);
        internalCounters.push_back(18212);
        internalCounters.push_back(18331);
        internalCounters.push_back(18450);
        internalCounters.push_back(18569);
        internalCounters.push_back(18688);
        internalCounters.push_back(18807);
        internalCounters.push_back(18926);
        internalCounters.push_back(19045);
        internalCounters.push_back(19164);
        internalCounters.push_back(19283);
        internalCounters.push_back(19402);
        internalCounters.push_back(19521);
        internalCounters.push_back(19640);
        internalCounters.push_back(19759);
        internalCounters.push_back(19878);
        internalCounters.push_back(19997);
        internalCounters.push_back(20116);
        internalCounters.push_back(20235);
        internalCounters.push_back(20354);
        internalCounters.push_back(20473);
        internalCounters.push_back(20592);
        internalCounters.push_back(20711);
        internalCounters.push_back(20830);
        internalCounters.push_back(20949);
        internalCounters.push_back(21068);
        internalCounters.push_back(21187);
        internalCounters.push_back(21306);
        internalCounters.push_back(21425);
        internalCounters.push_back(21544);
        internalCounters.push_back(21663);
        internalCounters.push_back(21782);
        internalCounters.push_back(21901);
        internalCounters.push_back(22020);
        internalCounters.push_back(22139);
        internalCounters.push_back(22258);
        internalCounters.push_back(22377);
        internalCounters.push_back(22496);
        internalCounters.push_back(22615);
        internalCounters.push_back(22734);
        internalCounters.push_back(22853);
        internalCounters.push_back(22972);
        internalCounters.push_back(23091);
        internalCounters.push_back(23210);
        internalCounters.push_back(23329);
        internalCounters.push_back(23448);
        internalCounters.push_back(23567);
        internalCounters.push_back(23686);
        internalCounters.push_back(23805);
        internalCounters.push_back(23924);
        internalCounters.push_back(24043);
        internalCounters.push_back(24162);
        internalCounters.push_back(24281);
        internalCounters.push_back(24400);
        internalCounters.push_back(24519);
        internalCounters.push_back(24638);
        internalCounters.push_back(24757);
        internalCounters.push_back(24876);
        internalCounters.push_back(24995);
        internalCounters.push_back(17499);
        internalCounters.push_back(17618);
        internalCounters.push_back(17737);
        internalCounters.push_back(17856);
        internalCounters.push_back(17975);
        internalCounters.push_back(18094);
        internalCounters.push_back(18213);
        internalCounters.push_back(18332);
        internalCounters.push_back(18451);
        internalCounters.push_back(18570);
        internalCounters.push_back(18689);
        internalCounters.push_back(18808);
        internalCounters.push_back(18927);
        internalCounters.push_back(19046);
        internalCounters.push_back(19165);
        internalCounters.push_back(19284);
        internalCounters.push_back(19403);
        internalCounters.push_back(19522);
        internalCounters.push_back(19641);
        internalCounters.push_back(19760);
        internalCounters.push_back(19879);
        internalCounters.push_back(19998);
        internalCounters.push_back(20117);
        internalCounters.push_back(20236);
        internalCounters.push_back(20355);
        internalCounters.push_back(20474);
        internalCounters.push_back(20593);
        internalCounters.push_back(20712);
        internalCounters.push_back(20831);
        internalCounters.push_back(20950);
        internalCounters.push_back(21069);
        internalCounters.push_back(21188);
        internalCounters.push_back(21307);
        internalCounters.push_back(21426);
        internalCounters.push_back(21545);
        internalCounters.push_back(21664);
        internalCounters.push_back(21783);
        internalCounters.push_back(21902);
        internalCounters.push_back(22021);
        internalCounters.push_back(22140);
        internalCounters.push_back(22259);
        internalCounters.push_back(22378);
        internalCounters.push_back(22497);
        internalCounters.push_back(22616);
        internalCounters.push_back(22735);
        internalCounters.push_back(22854);
        internalCounters.push_back(22973);
        internalCounters.push_back(23092);
        internalCounters.push_back(23211);
        internalCounters.push_back(23330);
        internalCounters.push_back(23449);
        internalCounters.push_back(23568);
        internalCounters.push_back(23687);
        internalCounters.push_back(23806);
        internalCounters.push_back(23925);
        internalCounters.push_back(24044);
        internalCounters.push_back(24163);
        internalCounters.push_back(24282);
        internalCounters.push_back(24401);
        internalCounters.push_back(24520);
        internalCounters.push_back(24639);
        internalCounters.push_back(24758);
        internalCounters.push_back(24877);
        internalCounters.push_back(24996);
        internalCounters.push_back(17500);
        internalCounters.push_back(17619);
        internalCounters.push_back(17738);
        internalCounters.push_back(17857);
        internalCounters.push_back(17976);
        internalCounters.push_back(18095);
        internalCounters.push_back(18214);
        internalCounters.push_back(18333);
        internalCounters.push_back(18452);
        internalCounters.push_back(18571);
        internalCounters.push_back(18690);
        internalCounters.push_back(18809);
        internalCounters.push_back(18928);
        internalCounters.push_back(19047);
        internalCounters.push_back(19166);
        internalCounters.push_back(19285);
        internalCounters.push_back(19404);
        internalCounters.push_back(19523);
        internalCounters.push_back(19642);
        internalCounters.push_back(19761);
        internalCounters.push_back(19880);
        internalCounters.push_back(19999);
        internalCounters.push_back(20118);
        internalCounters.push_back(20237);
        internalCounters.push_back(20356);
        internalCounters.push_back(20475);
        internalCounters.push_back(20594);
        internalCounters.push_back(20713);
        internalCounters.push_back(20832);
        internalCounters.push_back(20951);
        internalCounters.push_back(21070);
        internalCounters.push_back(21189);
        internalCounters.push_back(21308);
        internalCounters.push_back(21427);
        internalCounters.push_back(21546);
        internalCounters.push_back(21665);
        internalCounters.push_back(21784);
        internalCounters.push_back(21903);
        internalCounters.push_back(22022);
        internalCounters.push_back(22141);
        internalCounters.push_back(22260);
        internalCounters.push_back(22379);
        internalCounters.push_back(22498);
        internalCounters.push_back(22617);
        internalCounters.push_back(22736);
        internalCounters.push_back(22855);
        internalCounters.push_back(22974);
        internalCounters.push_back(23093);
        internalCounters.push_back(23212);
        internalCounters.push_back(23331);
        internalCounters.push_back(23450);
        internalCounters.push_back(23569);
        internalCounters.push_back(23688);
        internalCounters.push_back(23807);
        internalCounters.push_back(23926);
        internalCounters.push_back(24045);
        internalCounters.push_back(24164);
        internalCounters.push_back(24283);
        internalCounters.push_back(24402);
        internalCounters.push_back(24521);
        internalCounters.push_back(24640);
        internalCounters.push_back(24759);
        internalCounters.push_back(24878);
        internalCounters.push_back(24997);
        internalCounters.push_back(17501);
        internalCounters.push_back(17620);
        internalCounters.push_back(17739);
        internalCounters.push_back(17858);
        internalCounters.push_back(17977);
        internalCounters.push_back(18096);
        internalCounters.push_back(18215);
        internalCounters.push_back(18334);
        internalCounters.push_back(18453);
        internalCounters.push_back(18572);
        internalCounters.push_back(18691);
        internalCounters.push_back(18810);
        internalCounters.push_back(18929);
        internalCounters.push_back(19048);
        internalCounters.push_back(19167);
        internalCounters.push_back(19286);
        internalCounters.push_back(19405);
        internalCounters.push_back(19524);
        internalCounters.push_back(19643);
        internalCounters.push_back(19762);
        internalCounters.push_back(19881);
        internalCounters.push_back(20000);
        internalCounters.push_back(20119);
        internalCounters.push_back(20238);
        internalCounters.push_back(20357);
        internalCounters.push_back(20476);
        internalCounters.push_back(20595);
        internalCounters.push_back(20714);
        internalCounters.push_back(20833);
        internalCounters.push_back(20952);
        internalCounters.push_back(21071);
        internalCounters.push_back(21190);
        internalCounters.push_back(21309);
        internalCounters.push_back(21428);
        internalCounters.push_back(21547);
        internalCounters.push_back(21666);
        internalCounters.push_back(21785);
        internalCounters.push_back(21904);
        internalCounters.push_back(22023);
        internalCounters.push_back(22142);
        internalCounters.push_back(22261);
        internalCounters.push_back(22380);
        internalCounters.push_back(22499);
        internalCounters.push_back(22618);
        internalCounters.push_back(22737);
        internalCounters.push_back(22856);
        internalCounters.push_back(22975);
        internalCounters.push_back(23094);
        internalCounters.push_back(23213);
        internalCounters.push_back(23332);
        internalCounters.push_back(23451);
        internalCounters.push_back(23570);
        internalCounters.push_back(23689);
        internalCounters.push_back(23808);
        internalCounters.push_back(23927);
        internalCounters.push_back(24046);
        internalCounters.push_back(24165);
        internalCounters.push_back(24284);
        internalCounters.push_back(24403);
        internalCounters.push_back(24522);
        internalCounters.push_back(24641);
        internalCounters.push_back(24760);
        internalCounters.push_back(24879);
        internalCounters.push_back(24998);

        p.DefinePublicCounter("TexAveAnisotropy", "TextureUnit", "The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(2),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,*,+,(4),128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,*,+,(6),192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,*,+,(8),256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,*,+,(10),320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,*,+,(12),384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,*,+,(14),448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,*,+,(16),512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,+,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,+,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,+,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,+,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,+,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,+,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,+,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,+,/", "7ca2a2b9-a4eb-ce23-d163-59147e672396" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38418);
        internalCounters.push_back(38746);
        internalCounters.push_back(39074);
        internalCounters.push_back(39402);
        internalCounters.push_back(39730);
        internalCounters.push_back(40058);
        internalCounters.push_back(40386);
        internalCounters.push_back(40714);
        internalCounters.push_back(41042);
        internalCounters.push_back(41370);
        internalCounters.push_back(41698);
        internalCounters.push_back(42026);
        internalCounters.push_back(42354);
        internalCounters.push_back(42682);
        internalCounters.push_back(43010);
        internalCounters.push_back(43338);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("DepthStencilTestBusy", "Timing", "Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*", "6834fb52-42e8-bb50-fd48-ec2f2904e7e0" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38418);
        internalCounters.push_back(38746);
        internalCounters.push_back(39074);
        internalCounters.push_back(39402);
        internalCounters.push_back(39730);
        internalCounters.push_back(40058);
        internalCounters.push_back(40386);
        internalCounters.push_back(40714);
        internalCounters.push_back(41042);
        internalCounters.push_back(41370);
        internalCounters.push_back(41698);
        internalCounters.push_back(42026);
        internalCounters.push_back(42354);
        internalCounters.push_back(42682);
        internalCounters.push_back(43010);
        internalCounters.push_back(43338);

        p.DefinePublicCounter("DepthStencilTestBusyCount", "Timing", "Number of GPU cycles spent performing depth and stencil tests.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16", "e02860fa-c7bd-90ea-2149-69b4e98a636c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38289);
        internalCounters.push_back(38617);
        internalCounters.push_back(38945);
        internalCounters.push_back(39273);
        internalCounters.push_back(39601);
        internalCounters.push_back(39929);
        internalCounters.push_back(40257);
        internalCounters.push_back(40585);
        internalCounters.push_back(40913);
        internalCounters.push_back(41241);
        internalCounters.push_back(41569);
        internalCounters.push_back(41897);
        internalCounters.push_back(42225);
        internalCounters.push_back(42553);
        internalCounters.push_back(42881);
        internalCounters.push_back(43209);
        internalCounters.push_back(38278);
        internalCounters.push_back(38606);
        internalCounters.push_back(38934);
        internalCounters.push_back(39262);
        internalCounters.push_back(39590);
        internalCounters.push_back(39918);
        internalCounters.push_back(40246);
        internalCounters.push_back(40574);
        internalCounters.push_back(40902);
        internalCounters.push_back(41230);
        internalCounters.push_back(41558);
        internalCounters.push_back(41886);
        internalCounters.push_back(42214);
        internalCounters.push_back(42542);
        internalCounters.push_back(42870);
        internalCounters.push_back(43198);

        p.DefinePublicCounter("HiZTilesAccepted", "DepthAndStencil", "Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*", "56176f45-d7ff-813d-4f05-3b2f046067e7" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38289);
        internalCounters.push_back(38617);
        internalCounters.push_back(38945);
        internalCounters.push_back(39273);
        internalCounters.push_back(39601);
        internalCounters.push_back(39929);
        internalCounters.push_back(40257);
        internalCounters.push_back(40585);
        internalCounters.push_back(40913);
        internalCounters.push_back(41241);
        internalCounters.push_back(41569);
        internalCounters.push_back(41897);
        internalCounters.push_back(42225);
        internalCounters.push_back(42553);
        internalCounters.push_back(42881);
        internalCounters.push_back(43209);

        p.DefinePublicCounter("HiZTilesAcceptedCount", "DepthAndStencil", "Count of tiles accepted by HiZ and will be rendered to the depth or color buffers.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "95d4e3f6-b2f0-f26e-8423-aacdfaf79ea3" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38278);
        internalCounters.push_back(38606);
        internalCounters.push_back(38934);
        internalCounters.push_back(39262);
        internalCounters.push_back(39590);
        internalCounters.push_back(39918);
        internalCounters.push_back(40246);
        internalCounters.push_back(40574);
        internalCounters.push_back(40902);
        internalCounters.push_back(41230);
        internalCounters.push_back(41558);
        internalCounters.push_back(41886);
        internalCounters.push_back(42214);
        internalCounters.push_back(42542);
        internalCounters.push_back(42870);
        internalCounters.push_back(43198);

        p.DefinePublicCounter("HiZTilesRejectedCount", "DepthAndStencil", "Count of tiles not accepted by HiZ.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "156ba142-7eeb-aa6e-a00a-f8aea4e41e0b" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38278);
        internalCounters.push_back(38606);
        internalCounters.push_back(38934);
        internalCounters.push_back(39262);
        internalCounters.push_back(39590);
        internalCounters.push_back(39918);
        internalCounters.push_back(40246);
        internalCounters.push_back(40574);
        internalCounters.push_back(40902);
        internalCounters.push_back(41230);
        internalCounters.push_back(41558);
        internalCounters.push_back(41886);
        internalCounters.push_back(42214);
        internalCounters.push_back(42542);
        internalCounters.push_back(42870);
        internalCounters.push_back(43198);
        internalCounters.push_back(38302);
        internalCounters.push_back(38630);
        internalCounters.push_back(38958);
        internalCounters.push_back(39286);
        internalCounters.push_back(39614);
        internalCounters.push_back(39942);
        internalCounters.push_back(40270);
        internalCounters.push_back(40598);
        internalCounters.push_back(40926);
        internalCounters.push_back(41254);
        internalCounters.push_back(41582);
        internalCounters.push_back(41910);
        internalCounters.push_back(42238);
        internalCounters.push_back(42566);
        internalCounters.push_back(42894);
        internalCounters.push_back(43222);

        p.DefinePublicCounter("PreZTilesDetailCulled", "DepthAndStencil", "Percentage of tiles rejected because the associated prim had no contributing area.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*", "cad7f54d-a044-7574-c472-6f2065cbeeac" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38302);
        internalCounters.push_back(38630);
        internalCounters.push_back(38958);
        internalCounters.push_back(39286);
        internalCounters.push_back(39614);
        internalCounters.push_back(39942);
        internalCounters.push_back(40270);
        internalCounters.push_back(40598);
        internalCounters.push_back(40926);
        internalCounters.push_back(41254);
        internalCounters.push_back(41582);
        internalCounters.push_back(41910);
        internalCounters.push_back(42238);
        internalCounters.push_back(42566);
        internalCounters.push_back(42894);
        internalCounters.push_back(43222);

        p.DefinePublicCounter("PreZTilesDetailCulledCount", "DepthAndStencil", "Count of tiles rejected because the associated primitive had no contributing area.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "49262c8a-b1e6-90dd-f096-0fc4921715e9" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38278);
        internalCounters.push_back(38606);
        internalCounters.push_back(38934);
        internalCounters.push_back(39262);
        internalCounters.push_back(39590);
        internalCounters.push_back(39918);
        internalCounters.push_back(40246);
        internalCounters.push_back(40574);
        internalCounters.push_back(40902);
        internalCounters.push_back(41230);
        internalCounters.push_back(41558);
        internalCounters.push_back(41886);
        internalCounters.push_back(42214);
        internalCounters.push_back(42542);
        internalCounters.push_back(42870);
        internalCounters.push_back(43198);

        p.DefinePublicCounter("PreZTilesDetailSurvivingCount", "DepthAndStencil", "Count of tiles surviving because the associated primitive had contributing area.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "f803eaa4-bbed-bd39-775f-a64df92e2c08" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2015);
        internalCounters.push_back(2506);
        internalCounters.push_back(2997);
        internalCounters.push_back(3488);
        internalCounters.push_back(2016);
        internalCounters.push_back(2507);
        internalCounters.push_back(2998);
        internalCounters.push_back(3489);
        internalCounters.push_back(2017);
        internalCounters.push_back(2508);
        internalCounters.push_back(2999);
        internalCounters.push_back(3490);
        internalCounters.push_back(2018);
        internalCounters.push_back(2509);
        internalCounters.push_back(3000);
        internalCounters.push_back(3491);
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("HiZQuadsCulled", "DepthAndStencil", "Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*", "fa0e319b-5573-6d34-5bab-904769925036" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2015);
        internalCounters.push_back(2506);
        internalCounters.push_back(2997);
        internalCounters.push_back(3488);
        internalCounters.push_back(2016);
        internalCounters.push_back(2507);
        internalCounters.push_back(2998);
        internalCounters.push_back(3489);
        internalCounters.push_back(2017);
        internalCounters.push_back(2508);
        internalCounters.push_back(2999);
        internalCounters.push_back(3490);
        internalCounters.push_back(2018);
        internalCounters.push_back(2509);
        internalCounters.push_back(3000);
        internalCounters.push_back(3491);
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("HiZQuadsCulledCount", "DepthAndStencil", "Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-", "73b0b39d-6df2-3e24-0b5c-7cb0ac8b6f39" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("HiZQuadsAcceptedCount", "DepthAndStencil", "Count of quads that did continue on in the pipeline after HiZ.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "59049ad9-42b5-c7cb-3616-6a8f6a8e4894" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2015);
        internalCounters.push_back(2506);
        internalCounters.push_back(2997);
        internalCounters.push_back(3488);
        internalCounters.push_back(2016);
        internalCounters.push_back(2507);
        internalCounters.push_back(2998);
        internalCounters.push_back(3489);
        internalCounters.push_back(2017);
        internalCounters.push_back(2508);
        internalCounters.push_back(2999);
        internalCounters.push_back(3490);
        internalCounters.push_back(2018);
        internalCounters.push_back(2509);
        internalCounters.push_back(3000);
        internalCounters.push_back(3491);
        internalCounters.push_back(2115);
        internalCounters.push_back(2606);
        internalCounters.push_back(3097);
        internalCounters.push_back(3588);
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("PreZQuadsCulled", "DepthAndStencil", "Percentage of quads rejected based on the detailZ and earlyZ tests.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum16,16,17,18,19,sum4,-,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*", "4e77547b-ec55-5663-f034-af59be66d77d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2015);
        internalCounters.push_back(2506);
        internalCounters.push_back(2997);
        internalCounters.push_back(3488);
        internalCounters.push_back(2016);
        internalCounters.push_back(2507);
        internalCounters.push_back(2998);
        internalCounters.push_back(3489);
        internalCounters.push_back(2017);
        internalCounters.push_back(2508);
        internalCounters.push_back(2999);
        internalCounters.push_back(3490);
        internalCounters.push_back(2018);
        internalCounters.push_back(2509);
        internalCounters.push_back(3000);
        internalCounters.push_back(3491);
        internalCounters.push_back(2115);
        internalCounters.push_back(2606);
        internalCounters.push_back(3097);
        internalCounters.push_back(3588);
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("PreZQuadsCulledCount", "DepthAndStencil", "Count of quads rejected based on the detailZ and earlyZ tests.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,sum4,-,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum16,-", "1bf169e6-9304-834e-df5f-0c44d7890a08" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2115);
        internalCounters.push_back(2606);
        internalCounters.push_back(3097);
        internalCounters.push_back(3588);
        internalCounters.push_back(2091);
        internalCounters.push_back(2582);
        internalCounters.push_back(3073);
        internalCounters.push_back(3564);
        internalCounters.push_back(2092);
        internalCounters.push_back(2583);
        internalCounters.push_back(3074);
        internalCounters.push_back(3565);
        internalCounters.push_back(2093);
        internalCounters.push_back(2584);
        internalCounters.push_back(3075);
        internalCounters.push_back(3566);
        internalCounters.push_back(2094);
        internalCounters.push_back(2585);
        internalCounters.push_back(3076);
        internalCounters.push_back(3567);

        p.DefinePublicCounter("PreZQuadsSurvivingCount", "DepthAndStencil", "Count of quads surviving detailZ and earlyZ tests.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,sum16,0,1,2,3,sum4,-", "50e25e51-3713-89cb-7f92-559cde5e5532" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2115);
        internalCounters.push_back(2606);
        internalCounters.push_back(3097);
        internalCounters.push_back(3588);
        internalCounters.push_back(2015);
        internalCounters.push_back(2506);
        internalCounters.push_back(2997);
        internalCounters.push_back(3488);
        internalCounters.push_back(2016);
        internalCounters.push_back(2507);
        internalCounters.push_back(2998);
        internalCounters.push_back(3489);
        internalCounters.push_back(2017);
        internalCounters.push_back(2508);
        internalCounters.push_back(2999);
        internalCounters.push_back(3490);
        internalCounters.push_back(2018);
        internalCounters.push_back(2509);
        internalCounters.push_back(3000);
        internalCounters.push_back(3491);

        p.DefinePublicCounter("PostZQuads", "DepthAndStencil", "Percentage of quads for which the pixel shader will run and may be postZ tested.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,sum16,/,(100),*", "58f0d34b-eeb8-e8db-abce-cb72584144be" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(2115);
        internalCounters.push_back(2606);
        internalCounters.push_back(3097);
        internalCounters.push_back(3588);

        p.DefinePublicCounter("PostZQuadCount", "DepthAndStencil", "Count of quads for which the pixel shader will run and may be postZ tested.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,sum4", "08404526-ce35-939b-34c8-a7a35a0ff4d6" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38451);
        internalCounters.push_back(38779);
        internalCounters.push_back(39107);
        internalCounters.push_back(39435);
        internalCounters.push_back(39763);
        internalCounters.push_back(40091);
        internalCounters.push_back(40419);
        internalCounters.push_back(40747);
        internalCounters.push_back(41075);
        internalCounters.push_back(41403);
        internalCounters.push_back(41731);
        internalCounters.push_back(42059);
        internalCounters.push_back(42387);
        internalCounters.push_back(42715);
        internalCounters.push_back(43043);
        internalCounters.push_back(43371);

        p.DefinePublicCounter("PreZSamplesPassing", "DepthAndStencil", "Number of samples tested for Z before shading and passed.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "3bfe6c4d-7422-ca03-7ea5-e67ff1a00136" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38453);
        internalCounters.push_back(38781);
        internalCounters.push_back(39109);
        internalCounters.push_back(39437);
        internalCounters.push_back(39765);
        internalCounters.push_back(40093);
        internalCounters.push_back(40421);
        internalCounters.push_back(40749);
        internalCounters.push_back(41077);
        internalCounters.push_back(41405);
        internalCounters.push_back(41733);
        internalCounters.push_back(42061);
        internalCounters.push_back(42389);
        internalCounters.push_back(42717);
        internalCounters.push_back(43045);
        internalCounters.push_back(43373);

        p.DefinePublicCounter("PreZSamplesFailingS", "DepthAndStencil", "Number of samples tested for Z before shading and failed stencil test.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "df7f705e-5162-d3b5-da8b-63466cf9c4e5" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38452);
        internalCounters.push_back(38780);
        internalCounters.push_back(39108);
        internalCounters.push_back(39436);
        internalCounters.push_back(39764);
        internalCounters.push_back(40092);
        internalCounters.push_back(40420);
        internalCounters.push_back(40748);
        internalCounters.push_back(41076);
        internalCounters.push_back(41404);
        internalCounters.push_back(41732);
        internalCounters.push_back(42060);
        internalCounters.push_back(42388);
        internalCounters.push_back(42716);
        internalCounters.push_back(43044);
        internalCounters.push_back(43372);

        p.DefinePublicCounter("PreZSamplesFailingZ", "DepthAndStencil", "Number of samples tested for Z before shading and failed Z test.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "4484e950-f7a4-3800-bc74-78dd297f017e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38448);
        internalCounters.push_back(38776);
        internalCounters.push_back(39104);
        internalCounters.push_back(39432);
        internalCounters.push_back(39760);
        internalCounters.push_back(40088);
        internalCounters.push_back(40416);
        internalCounters.push_back(40744);
        internalCounters.push_back(41072);
        internalCounters.push_back(41400);
        internalCounters.push_back(41728);
        internalCounters.push_back(42056);
        internalCounters.push_back(42384);
        internalCounters.push_back(42712);
        internalCounters.push_back(43040);
        internalCounters.push_back(43368);

        p.DefinePublicCounter("PostZSamplesPassing", "DepthAndStencil", "Number of samples tested for Z after shading and passed.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "4995d5d6-2330-b986-508b-fae24856f44c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38450);
        internalCounters.push_back(38778);
        internalCounters.push_back(39106);
        internalCounters.push_back(39434);
        internalCounters.push_back(39762);
        internalCounters.push_back(40090);
        internalCounters.push_back(40418);
        internalCounters.push_back(40746);
        internalCounters.push_back(41074);
        internalCounters.push_back(41402);
        internalCounters.push_back(41730);
        internalCounters.push_back(42058);
        internalCounters.push_back(42386);
        internalCounters.push_back(42714);
        internalCounters.push_back(43042);
        internalCounters.push_back(43370);

        p.DefinePublicCounter("PostZSamplesFailingS", "DepthAndStencil", "Number of samples tested for Z after shading and failed stencil test.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "ae558af4-f4be-3dd4-7316-b2c4dcf0def8" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38449);
        internalCounters.push_back(38777);
        internalCounters.push_back(39105);
        internalCounters.push_back(39433);
        internalCounters.push_back(39761);
        internalCounters.push_back(40089);
        internalCounters.push_back(40417);
        internalCounters.push_back(40745);
        internalCounters.push_back(41073);
        internalCounters.push_back(41401);
        internalCounters.push_back(41729);
        internalCounters.push_back(42057);
        internalCounters.push_back(42385);
        internalCounters.push_back(42713);
        internalCounters.push_back(43041);
        internalCounters.push_back(43369);

        p.DefinePublicCounter("PostZSamplesFailingZ", "DepthAndStencil", "Number of samples tested for Z after shading and failed Z test.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "b3684c94-814a-c695-c85d-a5b6ab798b35" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38320);
        internalCounters.push_back(38648);
        internalCounters.push_back(38976);
        internalCounters.push_back(39304);
        internalCounters.push_back(39632);
        internalCounters.push_back(39960);
        internalCounters.push_back(40288);
        internalCounters.push_back(40616);
        internalCounters.push_back(40944);
        internalCounters.push_back(41272);
        internalCounters.push_back(41600);
        internalCounters.push_back(41928);
        internalCounters.push_back(42256);
        internalCounters.push_back(42584);
        internalCounters.push_back(42912);
        internalCounters.push_back(43240);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("ZUnitStalled", "DepthAndStencil", "The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*", "5e86c3ad-1726-3157-1d01-7ed188bf854d" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38320);
        internalCounters.push_back(38648);
        internalCounters.push_back(38976);
        internalCounters.push_back(39304);
        internalCounters.push_back(39632);
        internalCounters.push_back(39960);
        internalCounters.push_back(40288);
        internalCounters.push_back(40616);
        internalCounters.push_back(40944);
        internalCounters.push_back(41272);
        internalCounters.push_back(41600);
        internalCounters.push_back(41928);
        internalCounters.push_back(42256);
        internalCounters.push_back(42584);
        internalCounters.push_back(42912);
        internalCounters.push_back(43240);

        p.DefinePublicCounter("ZUnitStalledCycles", "DepthAndStencil", "Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_CYCLES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16", "4351fa7f-6737-2c3e-3ffb-b3addbdceedd" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38322);
        internalCounters.push_back(38650);
        internalCounters.push_back(38978);
        internalCounters.push_back(39306);
        internalCounters.push_back(39634);
        internalCounters.push_back(39962);
        internalCounters.push_back(40290);
        internalCounters.push_back(40618);
        internalCounters.push_back(40946);
        internalCounters.push_back(41274);
        internalCounters.push_back(41602);
        internalCounters.push_back(41930);
        internalCounters.push_back(42258);
        internalCounters.push_back(42586);
        internalCounters.push_back(42914);
        internalCounters.push_back(43242);
        internalCounters.push_back(38329);
        internalCounters.push_back(38657);
        internalCounters.push_back(38985);
        internalCounters.push_back(39313);
        internalCounters.push_back(39641);
        internalCounters.push_back(39969);
        internalCounters.push_back(40297);
        internalCounters.push_back(40625);
        internalCounters.push_back(40953);
        internalCounters.push_back(41281);
        internalCounters.push_back(41609);
        internalCounters.push_back(41937);
        internalCounters.push_back(42265);
        internalCounters.push_back(42593);
        internalCounters.push_back(42921);
        internalCounters.push_back(43249);

        p.DefinePublicCounter("DBMemRead", "DepthAndStencil", "Number of bytes read from the depth buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(256),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+", "dcdb4ee7-bd50-00f7-c028-9e5f4ce888c0" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(38334);
        internalCounters.push_back(38662);
        internalCounters.push_back(38990);
        internalCounters.push_back(39318);
        internalCounters.push_back(39646);
        internalCounters.push_back(39974);
        internalCounters.push_back(40302);
        internalCounters.push_back(40630);
        internalCounters.push_back(40958);
        internalCounters.push_back(41286);
        internalCounters.push_back(41614);
        internalCounters.push_back(41942);
        internalCounters.push_back(42270);
        internalCounters.push_back(42598);
        internalCounters.push_back(42926);
        internalCounters.push_back(43254);
        internalCounters.push_back(38337);
        internalCounters.push_back(38665);
        internalCounters.push_back(38993);
        internalCounters.push_back(39321);
        internalCounters.push_back(39649);
        internalCounters.push_back(39977);
        internalCounters.push_back(40305);
        internalCounters.push_back(40633);
        internalCounters.push_back(40961);
        internalCounters.push_back(41289);
        internalCounters.push_back(41617);
        internalCounters.push_back(41945);
        internalCounters.push_back(42273);
        internalCounters.push_back(42601);
        internalCounters.push_back(42929);
        internalCounters.push_back(43257);

        p.DefinePublicCounter("DBMemWritten", "DepthAndStencil", "Number of bytes written to the depth buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+", "de5717f8-8a49-ee44-4645-10de51b37dcf" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43650);
        internalCounters.push_back(44088);
        internalCounters.push_back(44526);
        internalCounters.push_back(44964);
        internalCounters.push_back(45402);
        internalCounters.push_back(45840);
        internalCounters.push_back(46278);
        internalCounters.push_back(46716);
        internalCounters.push_back(47154);
        internalCounters.push_back(47592);
        internalCounters.push_back(48030);
        internalCounters.push_back(48468);
        internalCounters.push_back(48906);
        internalCounters.push_back(49344);
        internalCounters.push_back(49782);
        internalCounters.push_back(50220);

        p.DefinePublicCounter("CBMemRead", "ColorBuffer", "Number of bytes read from the color buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*", "84b531d8-a1f8-7f49-7c27-7bc97801f1e6" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43781);
        internalCounters.push_back(44219);
        internalCounters.push_back(44657);
        internalCounters.push_back(45095);
        internalCounters.push_back(45533);
        internalCounters.push_back(45971);
        internalCounters.push_back(46409);
        internalCounters.push_back(46847);
        internalCounters.push_back(47285);
        internalCounters.push_back(47723);
        internalCounters.push_back(48161);
        internalCounters.push_back(48599);
        internalCounters.push_back(49037);
        internalCounters.push_back(49475);
        internalCounters.push_back(49913);
        internalCounters.push_back(50351);
        internalCounters.push_back(43648);
        internalCounters.push_back(44086);
        internalCounters.push_back(44524);
        internalCounters.push_back(44962);
        internalCounters.push_back(45400);
        internalCounters.push_back(45838);
        internalCounters.push_back(46276);
        internalCounters.push_back(46714);
        internalCounters.push_back(47152);
        internalCounters.push_back(47590);
        internalCounters.push_back(48028);
        internalCounters.push_back(48466);
        internalCounters.push_back(48904);
        internalCounters.push_back(49342);
        internalCounters.push_back(49780);
        internalCounters.push_back(50218);
        internalCounters.push_back(43649);
        internalCounters.push_back(44087);
        internalCounters.push_back(44525);
        internalCounters.push_back(44963);
        internalCounters.push_back(45401);
        internalCounters.push_back(45839);
        internalCounters.push_back(46277);
        internalCounters.push_back(46715);
        internalCounters.push_back(47153);
        internalCounters.push_back(47591);
        internalCounters.push_back(48029);
        internalCounters.push_back(48467);
        internalCounters.push_back(48905);
        internalCounters.push_back(49343);
        internalCounters.push_back(49781);
        internalCounters.push_back(50219);
        internalCounters.push_back(43650);
        internalCounters.push_back(44088);
        internalCounters.push_back(44526);
        internalCounters.push_back(44964);
        internalCounters.push_back(45402);
        internalCounters.push_back(45840);
        internalCounters.push_back(46278);
        internalCounters.push_back(46716);
        internalCounters.push_back(47154);
        internalCounters.push_back(47592);
        internalCounters.push_back(48030);
        internalCounters.push_back(48468);
        internalCounters.push_back(48906);
        internalCounters.push_back(49344);
        internalCounters.push_back(49782);
        internalCounters.push_back(50220);

        p.DefinePublicCounter("CBColorAndMaskRead", "ColorBuffer", "Total number of bytes read from the color and mask buffers.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(32),*", "da41660e-eb6f-32ec-8a64-b32ca17bd7eb" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43640);
        internalCounters.push_back(44078);
        internalCounters.push_back(44516);
        internalCounters.push_back(44954);
        internalCounters.push_back(45392);
        internalCounters.push_back(45830);
        internalCounters.push_back(46268);
        internalCounters.push_back(46706);
        internalCounters.push_back(47144);
        internalCounters.push_back(47582);
        internalCounters.push_back(48020);
        internalCounters.push_back(48458);
        internalCounters.push_back(48896);
        internalCounters.push_back(49334);
        internalCounters.push_back(49772);
        internalCounters.push_back(50210);

        p.DefinePublicCounter("CBMemWritten", "ColorBuffer", "Number of bytes written to the color buffer.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*", "550f8ff8-60b6-a6bf-87d0-25ac9e87de70" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43779);
        internalCounters.push_back(44217);
        internalCounters.push_back(44655);
        internalCounters.push_back(45093);
        internalCounters.push_back(45531);
        internalCounters.push_back(45969);
        internalCounters.push_back(46407);
        internalCounters.push_back(46845);
        internalCounters.push_back(47283);
        internalCounters.push_back(47721);
        internalCounters.push_back(48159);
        internalCounters.push_back(48597);
        internalCounters.push_back(49035);
        internalCounters.push_back(49473);
        internalCounters.push_back(49911);
        internalCounters.push_back(50349);
        internalCounters.push_back(43638);
        internalCounters.push_back(44076);
        internalCounters.push_back(44514);
        internalCounters.push_back(44952);
        internalCounters.push_back(45390);
        internalCounters.push_back(45828);
        internalCounters.push_back(46266);
        internalCounters.push_back(46704);
        internalCounters.push_back(47142);
        internalCounters.push_back(47580);
        internalCounters.push_back(48018);
        internalCounters.push_back(48456);
        internalCounters.push_back(48894);
        internalCounters.push_back(49332);
        internalCounters.push_back(49770);
        internalCounters.push_back(50208);
        internalCounters.push_back(43639);
        internalCounters.push_back(44077);
        internalCounters.push_back(44515);
        internalCounters.push_back(44953);
        internalCounters.push_back(45391);
        internalCounters.push_back(45829);
        internalCounters.push_back(46267);
        internalCounters.push_back(46705);
        internalCounters.push_back(47143);
        internalCounters.push_back(47581);
        internalCounters.push_back(48019);
        internalCounters.push_back(48457);
        internalCounters.push_back(48895);
        internalCounters.push_back(49333);
        internalCounters.push_back(49771);
        internalCounters.push_back(50209);
        internalCounters.push_back(43640);
        internalCounters.push_back(44078);
        internalCounters.push_back(44516);
        internalCounters.push_back(44954);
        internalCounters.push_back(45392);
        internalCounters.push_back(45830);
        internalCounters.push_back(46268);
        internalCounters.push_back(46706);
        internalCounters.push_back(47144);
        internalCounters.push_back(47582);
        internalCounters.push_back(48020);
        internalCounters.push_back(48458);
        internalCounters.push_back(48896);
        internalCounters.push_back(49334);
        internalCounters.push_back(49772);
        internalCounters.push_back(50210);

        p.DefinePublicCounter("CBColorAndMaskWritten", "ColorBuffer", "Total number of bytes written to the color and mask buffers.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_BYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(32),*", "29a04b69-8f5f-b770-a0f2-3453e2c99e49" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43684);
        internalCounters.push_back(44122);
        internalCounters.push_back(44560);
        internalCounters.push_back(44998);
        internalCounters.push_back(45436);
        internalCounters.push_back(45874);
        internalCounters.push_back(46312);
        internalCounters.push_back(46750);
        internalCounters.push_back(47188);
        internalCounters.push_back(47626);
        internalCounters.push_back(48064);
        internalCounters.push_back(48502);
        internalCounters.push_back(48940);
        internalCounters.push_back(49378);
        internalCounters.push_back(49816);
        internalCounters.push_back(50254);
        internalCounters.push_back(43529);
        internalCounters.push_back(43967);
        internalCounters.push_back(44405);
        internalCounters.push_back(44843);
        internalCounters.push_back(45281);
        internalCounters.push_back(45719);
        internalCounters.push_back(46157);
        internalCounters.push_back(46595);
        internalCounters.push_back(47033);
        internalCounters.push_back(47471);
        internalCounters.push_back(47909);
        internalCounters.push_back(48347);
        internalCounters.push_back(48785);
        internalCounters.push_back(49223);
        internalCounters.push_back(49661);
        internalCounters.push_back(50099);

        p.DefinePublicCounter("CBSlowPixelPct", "ColorBuffer", "Percentage of pixels written to the color buffer using a half-rate or quarter-rate format.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*,(100),min", "5775943f-0313-7e52-9638-b24a449197bc" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(43684);
        internalCounters.push_back(44122);
        internalCounters.push_back(44560);
        internalCounters.push_back(44998);
        internalCounters.push_back(45436);
        internalCounters.push_back(45874);
        internalCounters.push_back(46312);
        internalCounters.push_back(46750);
        internalCounters.push_back(47188);
        internalCounters.push_back(47626);
        internalCounters.push_back(48064);
        internalCounters.push_back(48502);
        internalCounters.push_back(48940);
        internalCounters.push_back(49378);
        internalCounters.push_back(49816);
        internalCounters.push_back(50254);

        p.DefinePublicCounter("CBSlowPixelCount", "ColorBuffer", "Number of pixels written to the color buffer using a half-rate or quarter-rate format.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "47eacbb0-28c8-22b4-5c69-c00d5813bb1c" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34149);
        internalCounters.push_back(34405);
        internalCounters.push_back(34661);
        internalCounters.push_back(34917);
        internalCounters.push_back(35173);
        internalCounters.push_back(35429);
        internalCounters.push_back(35685);
        internalCounters.push_back(35941);
        internalCounters.push_back(36197);
        internalCounters.push_back(36453);
        internalCounters.push_back(36709);
        internalCounters.push_back(36965);
        internalCounters.push_back(37221);
        internalCounters.push_back(37477);
        internalCounters.push_back(37733);
        internalCounters.push_back(37989);
        internalCounters.push_back(34150);
        internalCounters.push_back(34406);
        internalCounters.push_back(34662);
        internalCounters.push_back(34918);
        internalCounters.push_back(35174);
        internalCounters.push_back(35430);
        internalCounters.push_back(35686);
        internalCounters.push_back(35942);
        internalCounters.push_back(36198);
        internalCounters.push_back(36454);
        internalCounters.push_back(36710);
        internalCounters.push_back(36966);
        internalCounters.push_back(37222);
        internalCounters.push_back(37478);
        internalCounters.push_back(37734);
        internalCounters.push_back(37990);

        p.DefinePublicCounter("FetchSize", "GlobalMemory", "The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_KILOBYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(64),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+", "664bb3ef-6eca-86b1-1e2d-30cb897b5fa9" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34137);
        internalCounters.push_back(34393);
        internalCounters.push_back(34649);
        internalCounters.push_back(34905);
        internalCounters.push_back(35161);
        internalCounters.push_back(35417);
        internalCounters.push_back(35673);
        internalCounters.push_back(35929);
        internalCounters.push_back(36185);
        internalCounters.push_back(36441);
        internalCounters.push_back(36697);
        internalCounters.push_back(36953);
        internalCounters.push_back(37209);
        internalCounters.push_back(37465);
        internalCounters.push_back(37721);
        internalCounters.push_back(37977);
        internalCounters.push_back(34138);
        internalCounters.push_back(34394);
        internalCounters.push_back(34650);
        internalCounters.push_back(34906);
        internalCounters.push_back(35162);
        internalCounters.push_back(35418);
        internalCounters.push_back(35674);
        internalCounters.push_back(35930);
        internalCounters.push_back(36186);
        internalCounters.push_back(36442);
        internalCounters.push_back(36698);
        internalCounters.push_back(36954);
        internalCounters.push_back(37210);
        internalCounters.push_back(37466);
        internalCounters.push_back(37722);
        internalCounters.push_back(37978);

        p.DefinePublicCounter("WriteSize", "GlobalMemory", "The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_KILOBYTES, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(64),*,+", "f96f2c16-b1b4-4ec4-229c-fc82e6f80a82" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34128);
        internalCounters.push_back(34384);
        internalCounters.push_back(34640);
        internalCounters.push_back(34896);
        internalCounters.push_back(35152);
        internalCounters.push_back(35408);
        internalCounters.push_back(35664);
        internalCounters.push_back(35920);
        internalCounters.push_back(36176);
        internalCounters.push_back(36432);
        internalCounters.push_back(36688);
        internalCounters.push_back(36944);
        internalCounters.push_back(37200);
        internalCounters.push_back(37456);
        internalCounters.push_back(37712);
        internalCounters.push_back(37968);
        internalCounters.push_back(34130);
        internalCounters.push_back(34386);
        internalCounters.push_back(34642);
        internalCounters.push_back(34898);
        internalCounters.push_back(35154);
        internalCounters.push_back(35410);
        internalCounters.push_back(35666);
        internalCounters.push_back(35922);
        internalCounters.push_back(36178);
        internalCounters.push_back(36434);
        internalCounters.push_back(36690);
        internalCounters.push_back(36946);
        internalCounters.push_back(37202);
        internalCounters.push_back(37458);
        internalCounters.push_back(37714);
        internalCounters.push_back(37970);

        p.DefinePublicCounter("L2CacheHit", "GlobalMemory", "The percentage of fetch, write, atomic, and other instructions that hit the L2 cache. Value range: 0% (no hit) to 100% (optimal).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,+,/,(100),*", "d78fdf66-104f-8372-02c1-91d07d7dc62e" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34128);
        internalCounters.push_back(34384);
        internalCounters.push_back(34640);
        internalCounters.push_back(34896);
        internalCounters.push_back(35152);
        internalCounters.push_back(35408);
        internalCounters.push_back(35664);
        internalCounters.push_back(35920);
        internalCounters.push_back(36176);
        internalCounters.push_back(36432);
        internalCounters.push_back(36688);
        internalCounters.push_back(36944);
        internalCounters.push_back(37200);
        internalCounters.push_back(37456);
        internalCounters.push_back(37712);
        internalCounters.push_back(37968);
        internalCounters.push_back(34130);
        internalCounters.push_back(34386);
        internalCounters.push_back(34642);
        internalCounters.push_back(34898);
        internalCounters.push_back(35154);
        internalCounters.push_back(35410);
        internalCounters.push_back(35666);
        internalCounters.push_back(35922);
        internalCounters.push_back(36178);
        internalCounters.push_back(36434);
        internalCounters.push_back(36690);
        internalCounters.push_back(36946);
        internalCounters.push_back(37202);
        internalCounters.push_back(37458);
        internalCounters.push_back(37714);
        internalCounters.push_back(37970);

        p.DefinePublicCounter("L2CacheMiss", "GlobalMemory", "The percentage of fetch, write, atomic, and other instructions that miss the L2 cache. Value range: 0% (optimal) to 100% (all miss).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,+,/,(100),*", "4cd70885-41b3-25cd-92db-c76a0decc634" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34128);
        internalCounters.push_back(34384);
        internalCounters.push_back(34640);
        internalCounters.push_back(34896);
        internalCounters.push_back(35152);
        internalCounters.push_back(35408);
        internalCounters.push_back(35664);
        internalCounters.push_back(35920);
        internalCounters.push_back(36176);
        internalCounters.push_back(36432);
        internalCounters.push_back(36688);
        internalCounters.push_back(36944);
        internalCounters.push_back(37200);
        internalCounters.push_back(37456);
        internalCounters.push_back(37712);
        internalCounters.push_back(37968);

        p.DefinePublicCounter("L2CacheHitCount", "GlobalMemory", "Count of fetch, write, atomic, and other instructions that hit the L2 cache.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "d0bce171-560c-1895-66b3-bc56abccb077" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34130);
        internalCounters.push_back(34386);
        internalCounters.push_back(34642);
        internalCounters.push_back(34898);
        internalCounters.push_back(35154);
        internalCounters.push_back(35410);
        internalCounters.push_back(35666);
        internalCounters.push_back(35922);
        internalCounters.push_back(36178);
        internalCounters.push_back(36434);
        internalCounters.push_back(36690);
        internalCounters.push_back(36946);
        internalCounters.push_back(37202);
        internalCounters.push_back(37458);
        internalCounters.push_back(37714);
        internalCounters.push_back(37970);

        p.DefinePublicCounter("L2CacheMissCount", "GlobalMemory", "Count of fetch, write, atomic, and other instructions that miss the L2 cache.", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_ITEMS, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16", "f2ab3a1a-ead6-9893-961b-88ba2a758807" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(17419);
        internalCounters.push_back(17538);
        internalCounters.push_back(17657);
        internalCounters.push_back(17776);
        internalCounters.push_back(17895);
        internalCounters.push_back(18014);
        internalCounters.push_back(18133);
        internalCounters.push_back(18252);
        internalCounters.push_back(18371);
        internalCounters.push_back(18490);
        internalCounters.push_back(18609);
        internalCounters.push_back(18728);
        internalCounters.push_back(18847);
        internalCounters.push_back(18966);
        internalCounters.push_back(19085);
        internalCounters.push_back(19204);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("MemUnitBusy", "GlobalMemory", "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,NUM_SHADER_ENGINES,/,(100),*", "a1efa380-4a72-e066-e06a-2ab71a488521" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(28674);
        internalCounters.push_back(28759);
        internalCounters.push_back(28844);
        internalCounters.push_back(28929);
        internalCounters.push_back(29014);
        internalCounters.push_back(29099);
        internalCounters.push_back(29184);
        internalCounters.push_back(29269);
        internalCounters.push_back(29354);
        internalCounters.push_back(29439);
        internalCounters.push_back(29524);
        internalCounters.push_back(29609);
        internalCounters.push_back(29694);
        internalCounters.push_back(29779);
        internalCounters.push_back(29864);
        internalCounters.push_back(29949);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("MemUnitStalled", "GlobalMemory", "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,NUM_SHADER_ENGINES,/,(100),*", "465ba54f-d250-1453-790a-731b10d230b1" );
    }
    {
        vector< gpa_uint32 > internalCounters;
        internalCounters.push_back(34141);
        internalCounters.push_back(34397);
        internalCounters.push_back(34653);
        internalCounters.push_back(34909);
        internalCounters.push_back(35165);
        internalCounters.push_back(35421);
        internalCounters.push_back(35677);
        internalCounters.push_back(35933);
        internalCounters.push_back(36189);
        internalCounters.push_back(36445);
        internalCounters.push_back(36701);
        internalCounters.push_back(36957);
        internalCounters.push_back(37213);
        internalCounters.push_back(37469);
        internalCounters.push_back(37725);
        internalCounters.push_back(37981);
        internalCounters.push_back(50653);

        p.DefinePublicCounter("WriteUnitStalled", "GlobalMemory", "The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).", GPA_DATA_TYPE_FLOAT64, GPA_USAGE_TYPE_PERCENTAGE, internalCounters, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*", "594ad3ce-d1ec-10fc-7d59-25738e397d72" );
    }
}

