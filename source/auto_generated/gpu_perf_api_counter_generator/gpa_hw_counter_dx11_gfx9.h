//==============================================================================
// Copyright (c) 2010-2020 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  DX11 counter definitions for GFX9
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project

#ifndef _GPA_HW_COUNTER_DX11_GFX9_H_
#define _GPA_HW_COUNTER_DX11_GFX9_H_

// clang-format off

#include <windows.h>
#include <AmdDxExtPerfProfile.h>

#include <set>

struct GPA_HardwareCounterDesc;
struct GPA_CounterGroupDesc;
struct GPA_SQCounterGroupDesc;

namespace counter_dx11_gfx9
{
    extern GPA_HardwareCounterDesc*           dx11_counter_group_array_gfx9[]; ///< Array of hardware counter groups for dx11 for gfx9 family
    extern GPA_HardwareCounterDesc*           dx11_exposed_counters_group_array_gfx9[]; ///< Array of hardware exposed counter groups for dx11 for gfx9 family
    extern GPA_CounterGroupDesc               hw_dx11_groups_gfx9[]; ///< Array of counter groups for dx11 for gfx9 family
    extern GPA_CounterGroupExposedCounterDesc hw_dx11_exposed_counters_by_group_gfx9[]; ///< Array of exposed counter groups for dx11 for gfx9 family
    extern GPA_PaddedCounterDesc              dx11_padded_counter_by_group_gfx9[]; ///< Array of reserved counter for dx11 for gfx9 family
    extern GPA_SQCounterGroupDesc             hw_dx11_sq_groups_gfx9[]; ///< Array of SQ groups for dx11 for gfx9 family
    extern unsigned int                       hw_dx11_sq_isolated_groups_gfx9[]; ///< Array of counter groups isolated from SQ counter groups for dx11 for gfx9 family
    extern PE_BLOCK_ID hw_dx11_driver_enum_gfx9[]; ///< Array of driver enum values per group for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimebottomtobottomduration_index_gfx9; ///< Index of delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets. for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimebottomtobottomstart_index_gfx9; ///< Index of time of the previous command reaching bottom of pipe for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimebottomtobottomend_index_gfx9; ///< Index of time of the current command reaching bottom of pipe for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimetoptobottomduration_index_gfx9; ///< Index of execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimetoptobottomstart_index_gfx9; ///< Index of time that the current command reaches the top of pipe for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_gputimetoptobottomend_index_gfx9; ///< Index of time that the current command reaches the bottom of pipe for dx11 for gfx9 family
    extern const std::set<unsigned int>       hw_dx11_timestamp_block_ids_gfx9; ///< Timestamp block id's for dx11 for gfx9 family
    extern const std::set<unsigned int>       hw_dx11_time_counter_indices_gfx9; ///< Timestamp counter indices for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_group_count_gfx9; ///< Hardware Group Count for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_exposed_counters_group_count_gfx9; ///< Whitelist hardware counter Group Count for dx11 for gfx9 family
    extern const unsigned int                 dx11_padded_counter_group_count_gfx9; ///< reserved counter group count for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_sq_group_count_gfx9; ///< Hardware SQ Group Count for dx11 for gfx9 family
    extern const unsigned int                 hw_dx11_sq_isolated_group_count_gfx9; ///< Hardware Isolated Group Count for dx11 for gfx9 family

/// If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
/// \param asic_type The ASIC type that is currently in use.
/// \return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideMaxBlockEvents(GDT_HW_ASIC_TYPE asic_type)
{
    UNREFERENCED_PARAMETER(asic_type);


    return true;
}
} //  namespace counter_dx11_gfx9

// clang-format on

#endif  // _GPA_HW_COUNTER_DX11_GFX9_H_
