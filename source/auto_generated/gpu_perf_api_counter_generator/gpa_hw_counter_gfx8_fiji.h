//==============================================================================
// Copyright (c) 2010-2020 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  Hardware counter info for GFX8_FIJI
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project

#ifndef _GPA_HW_COUNTER_GFX8_FIJI_H_
#define _GPA_HW_COUNTER_GFX8_FIJI_H_

// clang-format off

#include <set>

struct GPA_HardwareCounterDesc;
#include "gpa_hw_counter_gfx8.h"

namespace counter_gfx8_fiji
{
/// Uses the input ASIC type to determine if this data provides an ASIC specific version.
/// \param asic_type The ASIC type that is currently in use.
/// \return True if the ASIC is matched by this file.
inline bool MatchAsic(GDT_HW_ASIC_TYPE asic_type)
{
    static std::set<GDT_HW_ASIC_TYPE> asics_supported = { GDT_FIJI };

    if (asics_supported.find(asic_type) == asics_supported.end())
    {
        return false;
    }

    return true;
}

    extern GPA_HardwareCounterDesc vgt0_counters_gfx8_fiji[]; ///< Array of internal counters for vgt0 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc vgt1_counters_gfx8_fiji[]; ///< Array of internal counters for vgt1 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc vgt2_counters_gfx8_fiji[]; ///< Array of internal counters for vgt2 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc vgt3_counters_gfx8_fiji[]; ///< Array of internal counters for vgt3 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc0_counters_gfx8_fiji[]; ///< Array of internal counters for mc0 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc1_counters_gfx8_fiji[]; ///< Array of internal counters for mc1 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc2_counters_gfx8_fiji[]; ///< Array of internal counters for mc2 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc3_counters_gfx8_fiji[]; ///< Array of internal counters for mc3 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc4_counters_gfx8_fiji[]; ///< Array of internal counters for mc4 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc5_counters_gfx8_fiji[]; ///< Array of internal counters for mc5 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc6_counters_gfx8_fiji[]; ///< Array of internal counters for mc6 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc7_counters_gfx8_fiji[]; ///< Array of internal counters for mc7 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc8_counters_gfx8_fiji[]; ///< Array of internal counters for mc8 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc9_counters_gfx8_fiji[]; ///< Array of internal counters for mc9 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc10_counters_gfx8_fiji[]; ///< Array of internal counters for mc10 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc11_counters_gfx8_fiji[]; ///< Array of internal counters for mc11 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc12_counters_gfx8_fiji[]; ///< Array of internal counters for mc12 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc13_counters_gfx8_fiji[]; ///< Array of internal counters for mc13 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc14_counters_gfx8_fiji[]; ///< Array of internal counters for mc14 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc15_counters_gfx8_fiji[]; ///< Array of internal counters for mc15 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc16_counters_gfx8_fiji[]; ///< Array of internal counters for mc16 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc17_counters_gfx8_fiji[]; ///< Array of internal counters for mc17 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc18_counters_gfx8_fiji[]; ///< Array of internal counters for mc18 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc19_counters_gfx8_fiji[]; ///< Array of internal counters for mc19 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc20_counters_gfx8_fiji[]; ///< Array of internal counters for mc20 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc21_counters_gfx8_fiji[]; ///< Array of internal counters for mc21 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc22_counters_gfx8_fiji[]; ///< Array of internal counters for mc22 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc23_counters_gfx8_fiji[]; ///< Array of internal counters for mc23 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc24_counters_gfx8_fiji[]; ///< Array of internal counters for mc24 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc25_counters_gfx8_fiji[]; ///< Array of internal counters for mc25 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc26_counters_gfx8_fiji[]; ///< Array of internal counters for mc26 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc27_counters_gfx8_fiji[]; ///< Array of internal counters for mc27 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc28_counters_gfx8_fiji[]; ///< Array of internal counters for mc28 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc29_counters_gfx8_fiji[]; ///< Array of internal counters for mc29 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc30_counters_gfx8_fiji[]; ///< Array of internal counters for mc30 block for gfx8_fiji family
    extern GPA_HardwareCounterDesc mc31_counters_gfx8_fiji[]; ///< Array of internal counters for mc31 block for gfx8_fiji family

/// Replaces count number of block instance counters at the destination with the overriding source counters.
/// \param dest_counter Destination to update.
/// \param src_counter Source to update from.
/// \param count Number of counters to update.
inline void ReplaceBlockInstanceCounters(GPA_HardwareCounterDesc* dest_counter, GPA_HardwareCounterDesc* src_counter, uint32_t count)
{
    for (uint32_t i = 0; i < count; i++)
    {
        dest_counter[i] = src_counter[i];
    }
}

/// If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
/// \param asic_type The ASIC type that is currently in use.
/// \return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideBlockInstanceCounters(GDT_HW_ASIC_TYPE asic_type)
{
    if (!MatchAsic(asic_type))
    {
        return false;
    }

    ReplaceBlockInstanceCounters(counter_gfx8::vgt0_counters_gfx8, vgt0_counters_gfx8_fiji, 146);
    ReplaceBlockInstanceCounters(counter_gfx8::vgt1_counters_gfx8, vgt1_counters_gfx8_fiji, 146);
    ReplaceBlockInstanceCounters(counter_gfx8::vgt2_counters_gfx8, vgt2_counters_gfx8_fiji, 146);
    ReplaceBlockInstanceCounters(counter_gfx8::vgt3_counters_gfx8, vgt3_counters_gfx8_fiji, 146);
    ReplaceBlockInstanceCounters(counter_gfx8::mc0_counters_gfx8, mc0_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc1_counters_gfx8, mc1_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc2_counters_gfx8, mc2_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc3_counters_gfx8, mc3_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc4_counters_gfx8, mc4_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc5_counters_gfx8, mc5_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc6_counters_gfx8, mc6_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc7_counters_gfx8, mc7_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc8_counters_gfx8, mc8_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc9_counters_gfx8, mc9_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc10_counters_gfx8, mc10_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc11_counters_gfx8, mc11_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc12_counters_gfx8, mc12_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc13_counters_gfx8, mc13_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc14_counters_gfx8, mc14_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc15_counters_gfx8, mc15_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc16_counters_gfx8, mc16_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc17_counters_gfx8, mc17_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc18_counters_gfx8, mc18_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc19_counters_gfx8, mc19_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc20_counters_gfx8, mc20_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc21_counters_gfx8, mc21_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc22_counters_gfx8, mc22_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc23_counters_gfx8, mc23_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc24_counters_gfx8, mc24_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc25_counters_gfx8, mc25_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc26_counters_gfx8, mc26_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc27_counters_gfx8, mc27_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc28_counters_gfx8, mc28_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc29_counters_gfx8, mc29_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc30_counters_gfx8, mc30_counters_gfx8_fiji, 33);
    ReplaceBlockInstanceCounters(counter_gfx8::mc31_counters_gfx8, mc31_counters_gfx8_fiji, 33);

    return true;
}

bool OverrideMaxBlockEvents(GDT_HW_ASIC_TYPE asic_type);
} // counter_gfx8_fiji

#endif  // _GPA_HW_COUNTER_GFX8_FIJI_H_

// clang-format on
